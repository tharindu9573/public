<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
This file was generated by Altova MapForce 2022r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:core="http://www.altova.com/MapForce/UDF/core" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:ns0="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" exclude-result-prefixes="core vmf xs fn ns0">
	<xsl:template name="core:firstCharacter">
		<xsl:param name="value" select="()"/>
		<xsl:param name="default" select="()"/>
		<xsl:choose>
			<xsl:when test="(fn:string-length($value) = xs:integer('0'))">
				<xsl:sequence select="$default"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="fn:substring($value, xs:double(xs:integer('1')), xs:double(xs:integer('1')))"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0088'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='GLN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0088'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='GLN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf4_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf5_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0088'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='GLN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf6_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0088'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='GLN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf7_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='vatex-eu-132'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1m'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1n'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1p'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1q'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1fa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-309'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1aa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ic'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ae'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="'FALSE'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf8_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='vatex-eu-132'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1m'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1n'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1p'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1q'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1fa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-309'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1aa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ic'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ae'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="'FALSE'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf9_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='10'">
				<xsl:copy-of select="'10'"/>
			</xsl:when>
			<xsl:when test="$input='11'">
				<xsl:copy-of select="'11'"/>
			</xsl:when>
			<xsl:when test="$input='13'">
				<xsl:copy-of select="'13'"/>
			</xsl:when>
			<xsl:when test="$input='14'">
				<xsl:copy-of select="'14'"/>
			</xsl:when>
			<xsl:when test="$input='15'">
				<xsl:copy-of select="'15'"/>
			</xsl:when>
			<xsl:when test="$input='20'">
				<xsl:copy-of select="'20'"/>
			</xsl:when>
			<xsl:when test="$input='21'">
				<xsl:copy-of select="'21'"/>
			</xsl:when>
			<xsl:when test="$input='22'">
				<xsl:copy-of select="'22'"/>
			</xsl:when>
			<xsl:when test="$input='23'">
				<xsl:copy-of select="'23'"/>
			</xsl:when>
			<xsl:when test="$input='24'">
				<xsl:copy-of select="'24'"/>
			</xsl:when>
			<xsl:when test="$input='25'">
				<xsl:copy-of select="'25'"/>
			</xsl:when>
			<xsl:when test="$input='27'">
				<xsl:copy-of select="'27'"/>
			</xsl:when>
			<xsl:when test="$input='28'">
				<xsl:copy-of select="'28'"/>
			</xsl:when>
			<xsl:when test="$input='33'">
				<xsl:copy-of select="'33'"/>
			</xsl:when>
			<xsl:when test="$input='34'">
				<xsl:copy-of select="'34'"/>
			</xsl:when>
			<xsl:when test="$input='35'">
				<xsl:copy-of select="'35'"/>
			</xsl:when>
			<xsl:when test="$input='37'">
				<xsl:copy-of select="'37'"/>
			</xsl:when>
			<xsl:when test="$input='38'">
				<xsl:copy-of select="'38'"/>
			</xsl:when>
			<xsl:when test="$input='40'">
				<xsl:copy-of select="'40'"/>
			</xsl:when>
			<xsl:when test="$input='41'">
				<xsl:copy-of select="'41'"/>
			</xsl:when>
			<xsl:when test="$input='56'">
				<xsl:copy-of select="'56'"/>
			</xsl:when>
			<xsl:when test="$input='57'">
				<xsl:copy-of select="'57'"/>
			</xsl:when>
			<xsl:when test="$input='58'">
				<xsl:copy-of select="'58'"/>
			</xsl:when>
			<xsl:when test="$input='59'">
				<xsl:copy-of select="'59'"/>
			</xsl:when>
			<xsl:when test="$input='60'">
				<xsl:copy-of select="'60'"/>
			</xsl:when>
			<xsl:when test="$input='61'">
				<xsl:copy-of select="'61'"/>
			</xsl:when>
			<xsl:when test="$input='64'">
				<xsl:copy-of select="'64'"/>
			</xsl:when>
			<xsl:when test="$input='66'">
				<xsl:copy-of select="'66'"/>
			</xsl:when>
			<xsl:when test="$input='74'">
				<xsl:copy-of select="'74'"/>
			</xsl:when>
			<xsl:when test="$input='76'">
				<xsl:copy-of select="'76'"/>
			</xsl:when>
			<xsl:when test="$input='77'">
				<xsl:copy-of select="'77'"/>
			</xsl:when>
			<xsl:when test="$input='78'">
				<xsl:copy-of select="'78'"/>
			</xsl:when>
			<xsl:when test="$input='80'">
				<xsl:copy-of select="'80'"/>
			</xsl:when>
			<xsl:when test="$input='81'">
				<xsl:copy-of select="'81'"/>
			</xsl:when>
			<xsl:when test="$input='84'">
				<xsl:copy-of select="'84'"/>
			</xsl:when>
			<xsl:when test="$input='85'">
				<xsl:copy-of select="'85'"/>
			</xsl:when>
			<xsl:when test="$input='87'">
				<xsl:copy-of select="'87'"/>
			</xsl:when>
			<xsl:when test="$input='89'">
				<xsl:copy-of select="'89'"/>
			</xsl:when>
			<xsl:when test="$input='91'">
				<xsl:copy-of select="'91'"/>
			</xsl:when>
			<xsl:when test="$input='1I'">
				<xsl:copy-of select="'1I'"/>
			</xsl:when>
			<xsl:when test="$input='2A'">
				<xsl:copy-of select="'2A'"/>
			</xsl:when>
			<xsl:when test="$input='2B'">
				<xsl:copy-of select="'2B'"/>
			</xsl:when>
			<xsl:when test="$input='2C'">
				<xsl:copy-of select="'2C'"/>
			</xsl:when>
			<xsl:when test="$input='2G'">
				<xsl:copy-of select="'2G'"/>
			</xsl:when>
			<xsl:when test="$input='2H'">
				<xsl:copy-of select="'2H'"/>
			</xsl:when>
			<xsl:when test="$input='2I'">
				<xsl:copy-of select="'2I'"/>
			</xsl:when>
			<xsl:when test="$input='2J'">
				<xsl:copy-of select="'2J'"/>
			</xsl:when>
			<xsl:when test="$input='2K'">
				<xsl:copy-of select="'2K'"/>
			</xsl:when>
			<xsl:when test="$input='2L'">
				<xsl:copy-of select="'2L'"/>
			</xsl:when>
			<xsl:when test="$input='2M'">
				<xsl:copy-of select="'2M'"/>
			</xsl:when>
			<xsl:when test="$input='2N'">
				<xsl:copy-of select="'2N'"/>
			</xsl:when>
			<xsl:when test="$input='2P'">
				<xsl:copy-of select="'2P'"/>
			</xsl:when>
			<xsl:when test="$input='2Q'">
				<xsl:copy-of select="'2Q'"/>
			</xsl:when>
			<xsl:when test="$input='2R'">
				<xsl:copy-of select="'2R'"/>
			</xsl:when>
			<xsl:when test="$input='2U'">
				<xsl:copy-of select="'2U'"/>
			</xsl:when>
			<xsl:when test="$input='2X'">
				<xsl:copy-of select="'2X'"/>
			</xsl:when>
			<xsl:when test="$input='2Y'">
				<xsl:copy-of select="'2Y'"/>
			</xsl:when>
			<xsl:when test="$input='2Z'">
				<xsl:copy-of select="'2Z'"/>
			</xsl:when>
			<xsl:when test="$input='3B'">
				<xsl:copy-of select="'3B'"/>
			</xsl:when>
			<xsl:when test="$input='3C'">
				<xsl:copy-of select="'3C'"/>
			</xsl:when>
			<xsl:when test="$input='4C'">
				<xsl:copy-of select="'4C'"/>
			</xsl:when>
			<xsl:when test="$input='4G'">
				<xsl:copy-of select="'4G'"/>
			</xsl:when>
			<xsl:when test="$input='4H'">
				<xsl:copy-of select="'4H'"/>
			</xsl:when>
			<xsl:when test="$input='4K'">
				<xsl:copy-of select="'4K'"/>
			</xsl:when>
			<xsl:when test="$input='4L'">
				<xsl:copy-of select="'4L'"/>
			</xsl:when>
			<xsl:when test="$input='4M'">
				<xsl:copy-of select="'4M'"/>
			</xsl:when>
			<xsl:when test="$input='4N'">
				<xsl:copy-of select="'4N'"/>
			</xsl:when>
			<xsl:when test="$input='4O'">
				<xsl:copy-of select="'4O'"/>
			</xsl:when>
			<xsl:when test="$input='4P'">
				<xsl:copy-of select="'4P'"/>
			</xsl:when>
			<xsl:when test="$input='4Q'">
				<xsl:copy-of select="'4Q'"/>
			</xsl:when>
			<xsl:when test="$input='4R'">
				<xsl:copy-of select="'4R'"/>
			</xsl:when>
			<xsl:when test="$input='4T'">
				<xsl:copy-of select="'4T'"/>
			</xsl:when>
			<xsl:when test="$input='4U'">
				<xsl:copy-of select="'4U'"/>
			</xsl:when>
			<xsl:when test="$input='4W'">
				<xsl:copy-of select="'4W'"/>
			</xsl:when>
			<xsl:when test="$input='4X'">
				<xsl:copy-of select="'4X'"/>
			</xsl:when>
			<xsl:when test="$input='5A'">
				<xsl:copy-of select="'5A'"/>
			</xsl:when>
			<xsl:when test="$input='5B'">
				<xsl:copy-of select="'5B'"/>
			</xsl:when>
			<xsl:when test="$input='5E'">
				<xsl:copy-of select="'5E'"/>
			</xsl:when>
			<xsl:when test="$input='5J'">
				<xsl:copy-of select="'5J'"/>
			</xsl:when>
			<xsl:when test="$input='A1'">
				<xsl:copy-of select="'A1'"/>
			</xsl:when>
			<xsl:when test="$input='A10'">
				<xsl:copy-of select="'A10'"/>
			</xsl:when>
			<xsl:when test="$input='A11'">
				<xsl:copy-of select="'A11'"/>
			</xsl:when>
			<xsl:when test="$input='A12'">
				<xsl:copy-of select="'A12'"/>
			</xsl:when>
			<xsl:when test="$input='A13'">
				<xsl:copy-of select="'A13'"/>
			</xsl:when>
			<xsl:when test="$input='A14'">
				<xsl:copy-of select="'A14'"/>
			</xsl:when>
			<xsl:when test="$input='A15'">
				<xsl:copy-of select="'A15'"/>
			</xsl:when>
			<xsl:when test="$input='A16'">
				<xsl:copy-of select="'A16'"/>
			</xsl:when>
			<xsl:when test="$input='A17'">
				<xsl:copy-of select="'A17'"/>
			</xsl:when>
			<xsl:when test="$input='A18'">
				<xsl:copy-of select="'A18'"/>
			</xsl:when>
			<xsl:when test="$input='A19'">
				<xsl:copy-of select="'A19'"/>
			</xsl:when>
			<xsl:when test="$input='A2'">
				<xsl:copy-of select="'A2'"/>
			</xsl:when>
			<xsl:when test="$input='A20'">
				<xsl:copy-of select="'A20'"/>
			</xsl:when>
			<xsl:when test="$input='A21'">
				<xsl:copy-of select="'A21'"/>
			</xsl:when>
			<xsl:when test="$input='A22'">
				<xsl:copy-of select="'A22'"/>
			</xsl:when>
			<xsl:when test="$input='A23'">
				<xsl:copy-of select="'A23'"/>
			</xsl:when>
			<xsl:when test="$input='A24'">
				<xsl:copy-of select="'A24'"/>
			</xsl:when>
			<xsl:when test="$input='A25'">
				<xsl:copy-of select="'A25'"/>
			</xsl:when>
			<xsl:when test="$input='A26'">
				<xsl:copy-of select="'A26'"/>
			</xsl:when>
			<xsl:when test="$input='A27'">
				<xsl:copy-of select="'A27'"/>
			</xsl:when>
			<xsl:when test="$input='A28'">
				<xsl:copy-of select="'A28'"/>
			</xsl:when>
			<xsl:when test="$input='A29'">
				<xsl:copy-of select="'A29'"/>
			</xsl:when>
			<xsl:when test="$input='A3'">
				<xsl:copy-of select="'A3'"/>
			</xsl:when>
			<xsl:when test="$input='A30'">
				<xsl:copy-of select="'A30'"/>
			</xsl:when>
			<xsl:when test="$input='A31'">
				<xsl:copy-of select="'A31'"/>
			</xsl:when>
			<xsl:when test="$input='A32'">
				<xsl:copy-of select="'A32'"/>
			</xsl:when>
			<xsl:when test="$input='A33'">
				<xsl:copy-of select="'A33'"/>
			</xsl:when>
			<xsl:when test="$input='A34'">
				<xsl:copy-of select="'A34'"/>
			</xsl:when>
			<xsl:when test="$input='A35'">
				<xsl:copy-of select="'A35'"/>
			</xsl:when>
			<xsl:when test="$input='A36'">
				<xsl:copy-of select="'A36'"/>
			</xsl:when>
			<xsl:when test="$input='A37'">
				<xsl:copy-of select="'A37'"/>
			</xsl:when>
			<xsl:when test="$input='A38'">
				<xsl:copy-of select="'A38'"/>
			</xsl:when>
			<xsl:when test="$input='A39'">
				<xsl:copy-of select="'A39'"/>
			</xsl:when>
			<xsl:when test="$input='A4'">
				<xsl:copy-of select="'A4'"/>
			</xsl:when>
			<xsl:when test="$input='A40'">
				<xsl:copy-of select="'A40'"/>
			</xsl:when>
			<xsl:when test="$input='A41'">
				<xsl:copy-of select="'A41'"/>
			</xsl:when>
			<xsl:when test="$input='A42'">
				<xsl:copy-of select="'A42'"/>
			</xsl:when>
			<xsl:when test="$input='A43'">
				<xsl:copy-of select="'A43'"/>
			</xsl:when>
			<xsl:when test="$input='A44'">
				<xsl:copy-of select="'A44'"/>
			</xsl:when>
			<xsl:when test="$input='A45'">
				<xsl:copy-of select="'A45'"/>
			</xsl:when>
			<xsl:when test="$input='A47'">
				<xsl:copy-of select="'A47'"/>
			</xsl:when>
			<xsl:when test="$input='A48'">
				<xsl:copy-of select="'A48'"/>
			</xsl:when>
			<xsl:when test="$input='A49'">
				<xsl:copy-of select="'A49'"/>
			</xsl:when>
			<xsl:when test="$input='A5'">
				<xsl:copy-of select="'A5'"/>
			</xsl:when>
			<xsl:when test="$input='A50'">
				<xsl:copy-of select="'A50'"/>
			</xsl:when>
			<xsl:when test="$input='A51'">
				<xsl:copy-of select="'A51'"/>
			</xsl:when>
			<xsl:when test="$input='A52'">
				<xsl:copy-of select="'A52'"/>
			</xsl:when>
			<xsl:when test="$input='A53'">
				<xsl:copy-of select="'A53'"/>
			</xsl:when>
			<xsl:when test="$input='A54'">
				<xsl:copy-of select="'A54'"/>
			</xsl:when>
			<xsl:when test="$input='A55'">
				<xsl:copy-of select="'A55'"/>
			</xsl:when>
			<xsl:when test="$input='A56'">
				<xsl:copy-of select="'A56'"/>
			</xsl:when>
			<xsl:when test="$input='A57'">
				<xsl:copy-of select="'A57'"/>
			</xsl:when>
			<xsl:when test="$input='A58'">
				<xsl:copy-of select="'A58'"/>
			</xsl:when>
			<xsl:when test="$input='A59'">
				<xsl:copy-of select="'A59'"/>
			</xsl:when>
			<xsl:when test="$input='A6'">
				<xsl:copy-of select="'A6'"/>
			</xsl:when>
			<xsl:when test="$input='A60'">
				<xsl:copy-of select="'A60'"/>
			</xsl:when>
			<xsl:when test="$input='A61'">
				<xsl:copy-of select="'A61'"/>
			</xsl:when>
			<xsl:when test="$input='A62'">
				<xsl:copy-of select="'A62'"/>
			</xsl:when>
			<xsl:when test="$input='A63'">
				<xsl:copy-of select="'A63'"/>
			</xsl:when>
			<xsl:when test="$input='A64'">
				<xsl:copy-of select="'A64'"/>
			</xsl:when>
			<xsl:when test="$input='A65'">
				<xsl:copy-of select="'A65'"/>
			</xsl:when>
			<xsl:when test="$input='A66'">
				<xsl:copy-of select="'A66'"/>
			</xsl:when>
			<xsl:when test="$input='A67'">
				<xsl:copy-of select="'A67'"/>
			</xsl:when>
			<xsl:when test="$input='A68'">
				<xsl:copy-of select="'A68'"/>
			</xsl:when>
			<xsl:when test="$input='A69'">
				<xsl:copy-of select="'A69'"/>
			</xsl:when>
			<xsl:when test="$input='A7'">
				<xsl:copy-of select="'A7'"/>
			</xsl:when>
			<xsl:when test="$input='A70'">
				<xsl:copy-of select="'A70'"/>
			</xsl:when>
			<xsl:when test="$input='A71'">
				<xsl:copy-of select="'A71'"/>
			</xsl:when>
			<xsl:when test="$input='A73'">
				<xsl:copy-of select="'A73'"/>
			</xsl:when>
			<xsl:when test="$input='A74'">
				<xsl:copy-of select="'A74'"/>
			</xsl:when>
			<xsl:when test="$input='A75'">
				<xsl:copy-of select="'A75'"/>
			</xsl:when>
			<xsl:when test="$input='A76'">
				<xsl:copy-of select="'A76'"/>
			</xsl:when>
			<xsl:when test="$input='A77'">
				<xsl:copy-of select="'A77'"/>
			</xsl:when>
			<xsl:when test="$input='A78'">
				<xsl:copy-of select="'A78'"/>
			</xsl:when>
			<xsl:when test="$input='A79'">
				<xsl:copy-of select="'A79'"/>
			</xsl:when>
			<xsl:when test="$input='A8'">
				<xsl:copy-of select="'A8'"/>
			</xsl:when>
			<xsl:when test="$input='A80'">
				<xsl:copy-of select="'A80'"/>
			</xsl:when>
			<xsl:when test="$input='A81'">
				<xsl:copy-of select="'A81'"/>
			</xsl:when>
			<xsl:when test="$input='A82'">
				<xsl:copy-of select="'A82'"/>
			</xsl:when>
			<xsl:when test="$input='A83'">
				<xsl:copy-of select="'A83'"/>
			</xsl:when>
			<xsl:when test="$input='A84'">
				<xsl:copy-of select="'A84'"/>
			</xsl:when>
			<xsl:when test="$input='A85'">
				<xsl:copy-of select="'A85'"/>
			</xsl:when>
			<xsl:when test="$input='A86'">
				<xsl:copy-of select="'A86'"/>
			</xsl:when>
			<xsl:when test="$input='A87'">
				<xsl:copy-of select="'A87'"/>
			</xsl:when>
			<xsl:when test="$input='A88'">
				<xsl:copy-of select="'A88'"/>
			</xsl:when>
			<xsl:when test="$input='A89'">
				<xsl:copy-of select="'A89'"/>
			</xsl:when>
			<xsl:when test="$input='A9'">
				<xsl:copy-of select="'A9'"/>
			</xsl:when>
			<xsl:when test="$input='A90'">
				<xsl:copy-of select="'A90'"/>
			</xsl:when>
			<xsl:when test="$input='A91'">
				<xsl:copy-of select="'A91'"/>
			</xsl:when>
			<xsl:when test="$input='A93'">
				<xsl:copy-of select="'A93'"/>
			</xsl:when>
			<xsl:when test="$input='A94'">
				<xsl:copy-of select="'A94'"/>
			</xsl:when>
			<xsl:when test="$input='A95'">
				<xsl:copy-of select="'A95'"/>
			</xsl:when>
			<xsl:when test="$input='A96'">
				<xsl:copy-of select="'A96'"/>
			</xsl:when>
			<xsl:when test="$input='A97'">
				<xsl:copy-of select="'A97'"/>
			</xsl:when>
			<xsl:when test="$input='A98'">
				<xsl:copy-of select="'A98'"/>
			</xsl:when>
			<xsl:when test="$input='A99'">
				<xsl:copy-of select="'A99'"/>
			</xsl:when>
			<xsl:when test="$input='AA'">
				<xsl:copy-of select="'AA'"/>
			</xsl:when>
			<xsl:when test="$input='AB'">
				<xsl:copy-of select="'AB'"/>
			</xsl:when>
			<xsl:when test="$input='ACR'">
				<xsl:copy-of select="'ACR'"/>
			</xsl:when>
			<xsl:when test="$input='ACT'">
				<xsl:copy-of select="'ACT'"/>
			</xsl:when>
			<xsl:when test="$input='AD'">
				<xsl:copy-of select="'AD'"/>
			</xsl:when>
			<xsl:when test="$input='AE'">
				<xsl:copy-of select="'AE'"/>
			</xsl:when>
			<xsl:when test="$input='AH'">
				<xsl:copy-of select="'AH'"/>
			</xsl:when>
			<xsl:when test="$input='AI'">
				<xsl:copy-of select="'AI'"/>
			</xsl:when>
			<xsl:when test="$input='AK'">
				<xsl:copy-of select="'AK'"/>
			</xsl:when>
			<xsl:when test="$input='AL'">
				<xsl:copy-of select="'AL'"/>
			</xsl:when>
			<xsl:when test="$input='AMH'">
				<xsl:copy-of select="'AMH'"/>
			</xsl:when>
			<xsl:when test="$input='AMP'">
				<xsl:copy-of select="'AMP'"/>
			</xsl:when>
			<xsl:when test="$input='ANN'">
				<xsl:copy-of select="'ANN'"/>
			</xsl:when>
			<xsl:when test="$input='APZ'">
				<xsl:copy-of select="'APZ'"/>
			</xsl:when>
			<xsl:when test="$input='AQ'">
				<xsl:copy-of select="'AQ'"/>
			</xsl:when>
			<xsl:when test="$input='ARE'">
				<xsl:copy-of select="'ARE'"/>
			</xsl:when>
			<xsl:when test="$input='AS'">
				<xsl:copy-of select="'AS'"/>
			</xsl:when>
			<xsl:when test="$input='ASM'">
				<xsl:copy-of select="'ASM'"/>
			</xsl:when>
			<xsl:when test="$input='ASU'">
				<xsl:copy-of select="'ASU'"/>
			</xsl:when>
			<xsl:when test="$input='ATM'">
				<xsl:copy-of select="'ATM'"/>
			</xsl:when>
			<xsl:when test="$input='ATT'">
				<xsl:copy-of select="'ATT'"/>
			</xsl:when>
			<xsl:when test="$input='AY'">
				<xsl:copy-of select="'AY'"/>
			</xsl:when>
			<xsl:when test="$input='AZ'">
				<xsl:copy-of select="'AZ'"/>
			</xsl:when>
			<xsl:when test="$input='B1'">
				<xsl:copy-of select="'B1'"/>
			</xsl:when>
			<xsl:when test="$input='B10'">
				<xsl:copy-of select="'B10'"/>
			</xsl:when>
			<xsl:when test="$input='B11'">
				<xsl:copy-of select="'B11'"/>
			</xsl:when>
			<xsl:when test="$input='B12'">
				<xsl:copy-of select="'B12'"/>
			</xsl:when>
			<xsl:when test="$input='B13'">
				<xsl:copy-of select="'B13'"/>
			</xsl:when>
			<xsl:when test="$input='B14'">
				<xsl:copy-of select="'B14'"/>
			</xsl:when>
			<xsl:when test="$input='B15'">
				<xsl:copy-of select="'B15'"/>
			</xsl:when>
			<xsl:when test="$input='B16'">
				<xsl:copy-of select="'B16'"/>
			</xsl:when>
			<xsl:when test="$input='B17'">
				<xsl:copy-of select="'B17'"/>
			</xsl:when>
			<xsl:when test="$input='B18'">
				<xsl:copy-of select="'B18'"/>
			</xsl:when>
			<xsl:when test="$input='B19'">
				<xsl:copy-of select="'B19'"/>
			</xsl:when>
			<xsl:when test="$input='B20'">
				<xsl:copy-of select="'B20'"/>
			</xsl:when>
			<xsl:when test="$input='B21'">
				<xsl:copy-of select="'B21'"/>
			</xsl:when>
			<xsl:when test="$input='B22'">
				<xsl:copy-of select="'B22'"/>
			</xsl:when>
			<xsl:when test="$input='B23'">
				<xsl:copy-of select="'B23'"/>
			</xsl:when>
			<xsl:when test="$input='B24'">
				<xsl:copy-of select="'B24'"/>
			</xsl:when>
			<xsl:when test="$input='B25'">
				<xsl:copy-of select="'B25'"/>
			</xsl:when>
			<xsl:when test="$input='B26'">
				<xsl:copy-of select="'B26'"/>
			</xsl:when>
			<xsl:when test="$input='B27'">
				<xsl:copy-of select="'B27'"/>
			</xsl:when>
			<xsl:when test="$input='B28'">
				<xsl:copy-of select="'B28'"/>
			</xsl:when>
			<xsl:when test="$input='B29'">
				<xsl:copy-of select="'B29'"/>
			</xsl:when>
			<xsl:when test="$input='B3'">
				<xsl:copy-of select="'B3'"/>
			</xsl:when>
			<xsl:when test="$input='B30'">
				<xsl:copy-of select="'B30'"/>
			</xsl:when>
			<xsl:when test="$input='B31'">
				<xsl:copy-of select="'B31'"/>
			</xsl:when>
			<xsl:when test="$input='B32'">
				<xsl:copy-of select="'B32'"/>
			</xsl:when>
			<xsl:when test="$input='B33'">
				<xsl:copy-of select="'B33'"/>
			</xsl:when>
			<xsl:when test="$input='B34'">
				<xsl:copy-of select="'B34'"/>
			</xsl:when>
			<xsl:when test="$input='B35'">
				<xsl:copy-of select="'B35'"/>
			</xsl:when>
			<xsl:when test="$input='B36'">
				<xsl:copy-of select="'B36'"/>
			</xsl:when>
			<xsl:when test="$input='B37'">
				<xsl:copy-of select="'B37'"/>
			</xsl:when>
			<xsl:when test="$input='B38'">
				<xsl:copy-of select="'B38'"/>
			</xsl:when>
			<xsl:when test="$input='B39'">
				<xsl:copy-of select="'B39'"/>
			</xsl:when>
			<xsl:when test="$input='B4'">
				<xsl:copy-of select="'B4'"/>
			</xsl:when>
			<xsl:when test="$input='B40'">
				<xsl:copy-of select="'B40'"/>
			</xsl:when>
			<xsl:when test="$input='B41'">
				<xsl:copy-of select="'B41'"/>
			</xsl:when>
			<xsl:when test="$input='B42'">
				<xsl:copy-of select="'B42'"/>
			</xsl:when>
			<xsl:when test="$input='B43'">
				<xsl:copy-of select="'B43'"/>
			</xsl:when>
			<xsl:when test="$input='B44'">
				<xsl:copy-of select="'B44'"/>
			</xsl:when>
			<xsl:when test="$input='B45'">
				<xsl:copy-of select="'B45'"/>
			</xsl:when>
			<xsl:when test="$input='B46'">
				<xsl:copy-of select="'B46'"/>
			</xsl:when>
			<xsl:when test="$input='B47'">
				<xsl:copy-of select="'B47'"/>
			</xsl:when>
			<xsl:when test="$input='B48'">
				<xsl:copy-of select="'B48'"/>
			</xsl:when>
			<xsl:when test="$input='B49'">
				<xsl:copy-of select="'B49'"/>
			</xsl:when>
			<xsl:when test="$input='B50'">
				<xsl:copy-of select="'B50'"/>
			</xsl:when>
			<xsl:when test="$input='B51'">
				<xsl:copy-of select="'B51'"/>
			</xsl:when>
			<xsl:when test="$input='B52'">
				<xsl:copy-of select="'B52'"/>
			</xsl:when>
			<xsl:when test="$input='B53'">
				<xsl:copy-of select="'B53'"/>
			</xsl:when>
			<xsl:when test="$input='B54'">
				<xsl:copy-of select="'B54'"/>
			</xsl:when>
			<xsl:when test="$input='B55'">
				<xsl:copy-of select="'B55'"/>
			</xsl:when>
			<xsl:when test="$input='B56'">
				<xsl:copy-of select="'B56'"/>
			</xsl:when>
			<xsl:when test="$input='B57'">
				<xsl:copy-of select="'B57'"/>
			</xsl:when>
			<xsl:when test="$input='B58'">
				<xsl:copy-of select="'B58'"/>
			</xsl:when>
			<xsl:when test="$input='B59'">
				<xsl:copy-of select="'B59'"/>
			</xsl:when>
			<xsl:when test="$input='B60'">
				<xsl:copy-of select="'B60'"/>
			</xsl:when>
			<xsl:when test="$input='B61'">
				<xsl:copy-of select="'B61'"/>
			</xsl:when>
			<xsl:when test="$input='B62'">
				<xsl:copy-of select="'B62'"/>
			</xsl:when>
			<xsl:when test="$input='B63'">
				<xsl:copy-of select="'B63'"/>
			</xsl:when>
			<xsl:when test="$input='B64'">
				<xsl:copy-of select="'B64'"/>
			</xsl:when>
			<xsl:when test="$input='B65'">
				<xsl:copy-of select="'B65'"/>
			</xsl:when>
			<xsl:when test="$input='B66'">
				<xsl:copy-of select="'B66'"/>
			</xsl:when>
			<xsl:when test="$input='B67'">
				<xsl:copy-of select="'B67'"/>
			</xsl:when>
			<xsl:when test="$input='B68'">
				<xsl:copy-of select="'B68'"/>
			</xsl:when>
			<xsl:when test="$input='B69'">
				<xsl:copy-of select="'B69'"/>
			</xsl:when>
			<xsl:when test="$input='B7'">
				<xsl:copy-of select="'B7'"/>
			</xsl:when>
			<xsl:when test="$input='B70'">
				<xsl:copy-of select="'B70'"/>
			</xsl:when>
			<xsl:when test="$input='B71'">
				<xsl:copy-of select="'B71'"/>
			</xsl:when>
			<xsl:when test="$input='B72'">
				<xsl:copy-of select="'B72'"/>
			</xsl:when>
			<xsl:when test="$input='B73'">
				<xsl:copy-of select="'B73'"/>
			</xsl:when>
			<xsl:when test="$input='B74'">
				<xsl:copy-of select="'B74'"/>
			</xsl:when>
			<xsl:when test="$input='B75'">
				<xsl:copy-of select="'B75'"/>
			</xsl:when>
			<xsl:when test="$input='B76'">
				<xsl:copy-of select="'B76'"/>
			</xsl:when>
			<xsl:when test="$input='B77'">
				<xsl:copy-of select="'B77'"/>
			</xsl:when>
			<xsl:when test="$input='B78'">
				<xsl:copy-of select="'B78'"/>
			</xsl:when>
			<xsl:when test="$input='B79'">
				<xsl:copy-of select="'B79'"/>
			</xsl:when>
			<xsl:when test="$input='B8'">
				<xsl:copy-of select="'B8'"/>
			</xsl:when>
			<xsl:when test="$input='B80'">
				<xsl:copy-of select="'B80'"/>
			</xsl:when>
			<xsl:when test="$input='B81'">
				<xsl:copy-of select="'B81'"/>
			</xsl:when>
			<xsl:when test="$input='B82'">
				<xsl:copy-of select="'B82'"/>
			</xsl:when>
			<xsl:when test="$input='B83'">
				<xsl:copy-of select="'B83'"/>
			</xsl:when>
			<xsl:when test="$input='B84'">
				<xsl:copy-of select="'B84'"/>
			</xsl:when>
			<xsl:when test="$input='B85'">
				<xsl:copy-of select="'B85'"/>
			</xsl:when>
			<xsl:when test="$input='B86'">
				<xsl:copy-of select="'B86'"/>
			</xsl:when>
			<xsl:when test="$input='B87'">
				<xsl:copy-of select="'B87'"/>
			</xsl:when>
			<xsl:when test="$input='B88'">
				<xsl:copy-of select="'B88'"/>
			</xsl:when>
			<xsl:when test="$input='B89'">
				<xsl:copy-of select="'B89'"/>
			</xsl:when>
			<xsl:when test="$input='B90'">
				<xsl:copy-of select="'B90'"/>
			</xsl:when>
			<xsl:when test="$input='B91'">
				<xsl:copy-of select="'B91'"/>
			</xsl:when>
			<xsl:when test="$input='B92'">
				<xsl:copy-of select="'B92'"/>
			</xsl:when>
			<xsl:when test="$input='B93'">
				<xsl:copy-of select="'B93'"/>
			</xsl:when>
			<xsl:when test="$input='B94'">
				<xsl:copy-of select="'B94'"/>
			</xsl:when>
			<xsl:when test="$input='B95'">
				<xsl:copy-of select="'B95'"/>
			</xsl:when>
			<xsl:when test="$input='B96'">
				<xsl:copy-of select="'B96'"/>
			</xsl:when>
			<xsl:when test="$input='B97'">
				<xsl:copy-of select="'B97'"/>
			</xsl:when>
			<xsl:when test="$input='B98'">
				<xsl:copy-of select="'B98'"/>
			</xsl:when>
			<xsl:when test="$input='B99'">
				<xsl:copy-of select="'B99'"/>
			</xsl:when>
			<xsl:when test="$input='BAR'">
				<xsl:copy-of select="'BAR'"/>
			</xsl:when>
			<xsl:when test="$input='BB'">
				<xsl:copy-of select="'BB'"/>
			</xsl:when>
			<xsl:when test="$input='BFT'">
				<xsl:copy-of select="'BFT'"/>
			</xsl:when>
			<xsl:when test="$input='BHP'">
				<xsl:copy-of select="'BHP'"/>
			</xsl:when>
			<xsl:when test="$input='BIL'">
				<xsl:copy-of select="'BIL'"/>
			</xsl:when>
			<xsl:when test="$input='BLD'">
				<xsl:copy-of select="'BLD'"/>
			</xsl:when>
			<xsl:when test="$input='BLL'">
				<xsl:copy-of select="'BLL'"/>
			</xsl:when>
			<xsl:when test="$input='BP'">
				<xsl:copy-of select="'BP'"/>
			</xsl:when>
			<xsl:when test="$input='BQL'">
				<xsl:copy-of select="'BQL'"/>
			</xsl:when>
			<xsl:when test="$input='BTU'">
				<xsl:copy-of select="'BTU'"/>
			</xsl:when>
			<xsl:when test="$input='BUA'">
				<xsl:copy-of select="'BUA'"/>
			</xsl:when>
			<xsl:when test="$input='BUI'">
				<xsl:copy-of select="'BUI'"/>
			</xsl:when>
			<xsl:when test="$input='C0'">
				<xsl:copy-of select="'C0'"/>
			</xsl:when>
			<xsl:when test="$input='C10'">
				<xsl:copy-of select="'C10'"/>
			</xsl:when>
			<xsl:when test="$input='C11'">
				<xsl:copy-of select="'C11'"/>
			</xsl:when>
			<xsl:when test="$input='C12'">
				<xsl:copy-of select="'C12'"/>
			</xsl:when>
			<xsl:when test="$input='C13'">
				<xsl:copy-of select="'C13'"/>
			</xsl:when>
			<xsl:when test="$input='C14'">
				<xsl:copy-of select="'C14'"/>
			</xsl:when>
			<xsl:when test="$input='C15'">
				<xsl:copy-of select="'C15'"/>
			</xsl:when>
			<xsl:when test="$input='C16'">
				<xsl:copy-of select="'C16'"/>
			</xsl:when>
			<xsl:when test="$input='C17'">
				<xsl:copy-of select="'C17'"/>
			</xsl:when>
			<xsl:when test="$input='C18'">
				<xsl:copy-of select="'C18'"/>
			</xsl:when>
			<xsl:when test="$input='C19'">
				<xsl:copy-of select="'C19'"/>
			</xsl:when>
			<xsl:when test="$input='C20'">
				<xsl:copy-of select="'C20'"/>
			</xsl:when>
			<xsl:when test="$input='C21'">
				<xsl:copy-of select="'C21'"/>
			</xsl:when>
			<xsl:when test="$input='C22'">
				<xsl:copy-of select="'C22'"/>
			</xsl:when>
			<xsl:when test="$input='C23'">
				<xsl:copy-of select="'C23'"/>
			</xsl:when>
			<xsl:when test="$input='C24'">
				<xsl:copy-of select="'C24'"/>
			</xsl:when>
			<xsl:when test="$input='C25'">
				<xsl:copy-of select="'C25'"/>
			</xsl:when>
			<xsl:when test="$input='C26'">
				<xsl:copy-of select="'C26'"/>
			</xsl:when>
			<xsl:when test="$input='C27'">
				<xsl:copy-of select="'C27'"/>
			</xsl:when>
			<xsl:when test="$input='C28'">
				<xsl:copy-of select="'C28'"/>
			</xsl:when>
			<xsl:when test="$input='C29'">
				<xsl:copy-of select="'C29'"/>
			</xsl:when>
			<xsl:when test="$input='C3'">
				<xsl:copy-of select="'C3'"/>
			</xsl:when>
			<xsl:when test="$input='C30'">
				<xsl:copy-of select="'C30'"/>
			</xsl:when>
			<xsl:when test="$input='C31'">
				<xsl:copy-of select="'C31'"/>
			</xsl:when>
			<xsl:when test="$input='C32'">
				<xsl:copy-of select="'C32'"/>
			</xsl:when>
			<xsl:when test="$input='C33'">
				<xsl:copy-of select="'C33'"/>
			</xsl:when>
			<xsl:when test="$input='C34'">
				<xsl:copy-of select="'C34'"/>
			</xsl:when>
			<xsl:when test="$input='C35'">
				<xsl:copy-of select="'C35'"/>
			</xsl:when>
			<xsl:when test="$input='C36'">
				<xsl:copy-of select="'C36'"/>
			</xsl:when>
			<xsl:when test="$input='C37'">
				<xsl:copy-of select="'C37'"/>
			</xsl:when>
			<xsl:when test="$input='C38'">
				<xsl:copy-of select="'C38'"/>
			</xsl:when>
			<xsl:when test="$input='C39'">
				<xsl:copy-of select="'C39'"/>
			</xsl:when>
			<xsl:when test="$input='C40'">
				<xsl:copy-of select="'C40'"/>
			</xsl:when>
			<xsl:when test="$input='C41'">
				<xsl:copy-of select="'C41'"/>
			</xsl:when>
			<xsl:when test="$input='C42'">
				<xsl:copy-of select="'C42'"/>
			</xsl:when>
			<xsl:when test="$input='C43'">
				<xsl:copy-of select="'C43'"/>
			</xsl:when>
			<xsl:when test="$input='C44'">
				<xsl:copy-of select="'C44'"/>
			</xsl:when>
			<xsl:when test="$input='C45'">
				<xsl:copy-of select="'C45'"/>
			</xsl:when>
			<xsl:when test="$input='C46'">
				<xsl:copy-of select="'C46'"/>
			</xsl:when>
			<xsl:when test="$input='C47'">
				<xsl:copy-of select="'C47'"/>
			</xsl:when>
			<xsl:when test="$input='C48'">
				<xsl:copy-of select="'C48'"/>
			</xsl:when>
			<xsl:when test="$input='C49'">
				<xsl:copy-of select="'C49'"/>
			</xsl:when>
			<xsl:when test="$input='C50'">
				<xsl:copy-of select="'C50'"/>
			</xsl:when>
			<xsl:when test="$input='C51'">
				<xsl:copy-of select="'C51'"/>
			</xsl:when>
			<xsl:when test="$input='C52'">
				<xsl:copy-of select="'C52'"/>
			</xsl:when>
			<xsl:when test="$input='C53'">
				<xsl:copy-of select="'C53'"/>
			</xsl:when>
			<xsl:when test="$input='C54'">
				<xsl:copy-of select="'C54'"/>
			</xsl:when>
			<xsl:when test="$input='C55'">
				<xsl:copy-of select="'C55'"/>
			</xsl:when>
			<xsl:when test="$input='C56'">
				<xsl:copy-of select="'C56'"/>
			</xsl:when>
			<xsl:when test="$input='C57'">
				<xsl:copy-of select="'C57'"/>
			</xsl:when>
			<xsl:when test="$input='C58'">
				<xsl:copy-of select="'C58'"/>
			</xsl:when>
			<xsl:when test="$input='C59'">
				<xsl:copy-of select="'C59'"/>
			</xsl:when>
			<xsl:when test="$input='C60'">
				<xsl:copy-of select="'C60'"/>
			</xsl:when>
			<xsl:when test="$input='C61'">
				<xsl:copy-of select="'C61'"/>
			</xsl:when>
			<xsl:when test="$input='C62'">
				<xsl:copy-of select="'C62'"/>
			</xsl:when>
			<xsl:when test="$input='C63'">
				<xsl:copy-of select="'C63'"/>
			</xsl:when>
			<xsl:when test="$input='C64'">
				<xsl:copy-of select="'C64'"/>
			</xsl:when>
			<xsl:when test="$input='C65'">
				<xsl:copy-of select="'C65'"/>
			</xsl:when>
			<xsl:when test="$input='C66'">
				<xsl:copy-of select="'C66'"/>
			</xsl:when>
			<xsl:when test="$input='C67'">
				<xsl:copy-of select="'C67'"/>
			</xsl:when>
			<xsl:when test="$input='C68'">
				<xsl:copy-of select="'C68'"/>
			</xsl:when>
			<xsl:when test="$input='C69'">
				<xsl:copy-of select="'C69'"/>
			</xsl:when>
			<xsl:when test="$input='C7'">
				<xsl:copy-of select="'C7'"/>
			</xsl:when>
			<xsl:when test="$input='C70'">
				<xsl:copy-of select="'C70'"/>
			</xsl:when>
			<xsl:when test="$input='C71'">
				<xsl:copy-of select="'C71'"/>
			</xsl:when>
			<xsl:when test="$input='C72'">
				<xsl:copy-of select="'C72'"/>
			</xsl:when>
			<xsl:when test="$input='C73'">
				<xsl:copy-of select="'C73'"/>
			</xsl:when>
			<xsl:when test="$input='C74'">
				<xsl:copy-of select="'C74'"/>
			</xsl:when>
			<xsl:when test="$input='C75'">
				<xsl:copy-of select="'C75'"/>
			</xsl:when>
			<xsl:when test="$input='C76'">
				<xsl:copy-of select="'C76'"/>
			</xsl:when>
			<xsl:when test="$input='C78'">
				<xsl:copy-of select="'C78'"/>
			</xsl:when>
			<xsl:when test="$input='C79'">
				<xsl:copy-of select="'C79'"/>
			</xsl:when>
			<xsl:when test="$input='C8'">
				<xsl:copy-of select="'C8'"/>
			</xsl:when>
			<xsl:when test="$input='C80'">
				<xsl:copy-of select="'C80'"/>
			</xsl:when>
			<xsl:when test="$input='C81'">
				<xsl:copy-of select="'C81'"/>
			</xsl:when>
			<xsl:when test="$input='C82'">
				<xsl:copy-of select="'C82'"/>
			</xsl:when>
			<xsl:when test="$input='C83'">
				<xsl:copy-of select="'C83'"/>
			</xsl:when>
			<xsl:when test="$input='C84'">
				<xsl:copy-of select="'C84'"/>
			</xsl:when>
			<xsl:when test="$input='C85'">
				<xsl:copy-of select="'C85'"/>
			</xsl:when>
			<xsl:when test="$input='C86'">
				<xsl:copy-of select="'C86'"/>
			</xsl:when>
			<xsl:when test="$input='C87'">
				<xsl:copy-of select="'C87'"/>
			</xsl:when>
			<xsl:when test="$input='C88'">
				<xsl:copy-of select="'C88'"/>
			</xsl:when>
			<xsl:when test="$input='C89'">
				<xsl:copy-of select="'C89'"/>
			</xsl:when>
			<xsl:when test="$input='C9'">
				<xsl:copy-of select="'C9'"/>
			</xsl:when>
			<xsl:when test="$input='C90'">
				<xsl:copy-of select="'C90'"/>
			</xsl:when>
			<xsl:when test="$input='C91'">
				<xsl:copy-of select="'C91'"/>
			</xsl:when>
			<xsl:when test="$input='C92'">
				<xsl:copy-of select="'C92'"/>
			</xsl:when>
			<xsl:when test="$input='C93'">
				<xsl:copy-of select="'C93'"/>
			</xsl:when>
			<xsl:when test="$input='C94'">
				<xsl:copy-of select="'C94'"/>
			</xsl:when>
			<xsl:when test="$input='C95'">
				<xsl:copy-of select="'C95'"/>
			</xsl:when>
			<xsl:when test="$input='C96'">
				<xsl:copy-of select="'C96'"/>
			</xsl:when>
			<xsl:when test="$input='C97'">
				<xsl:copy-of select="'C97'"/>
			</xsl:when>
			<xsl:when test="$input='C99'">
				<xsl:copy-of select="'C99'"/>
			</xsl:when>
			<xsl:when test="$input='CCT'">
				<xsl:copy-of select="'CCT'"/>
			</xsl:when>
			<xsl:when test="$input='CDL'">
				<xsl:copy-of select="'CDL'"/>
			</xsl:when>
			<xsl:when test="$input='CEL'">
				<xsl:copy-of select="'CEL'"/>
			</xsl:when>
			<xsl:when test="$input='CEN'">
				<xsl:copy-of select="'CEN'"/>
			</xsl:when>
			<xsl:when test="$input='CG'">
				<xsl:copy-of select="'CG'"/>
			</xsl:when>
			<xsl:when test="$input='CGM'">
				<xsl:copy-of select="'CGM'"/>
			</xsl:when>
			<xsl:when test="$input='CKG'">
				<xsl:copy-of select="'CKG'"/>
			</xsl:when>
			<xsl:when test="$input='CLF'">
				<xsl:copy-of select="'CLF'"/>
			</xsl:when>
			<xsl:when test="$input='CLT'">
				<xsl:copy-of select="'CLT'"/>
			</xsl:when>
			<xsl:when test="$input='CMK'">
				<xsl:copy-of select="'CMK'"/>
			</xsl:when>
			<xsl:when test="$input='CMQ'">
				<xsl:copy-of select="'CMQ'"/>
			</xsl:when>
			<xsl:when test="$input='CMT'">
				<xsl:copy-of select="'CMT'"/>
			</xsl:when>
			<xsl:when test="$input='CNP'">
				<xsl:copy-of select="'CNP'"/>
			</xsl:when>
			<xsl:when test="$input='CNT'">
				<xsl:copy-of select="'CNT'"/>
			</xsl:when>
			<xsl:when test="$input='COU'">
				<xsl:copy-of select="'COU'"/>
			</xsl:when>
			<xsl:when test="$input='CTG'">
				<xsl:copy-of select="'CTG'"/>
			</xsl:when>
			<xsl:when test="$input='CTM'">
				<xsl:copy-of select="'CTM'"/>
			</xsl:when>
			<xsl:when test="$input='CTN'">
				<xsl:copy-of select="'CTN'"/>
			</xsl:when>
			<xsl:when test="$input='CUR'">
				<xsl:copy-of select="'CUR'"/>
			</xsl:when>
			<xsl:when test="$input='CWA'">
				<xsl:copy-of select="'CWA'"/>
			</xsl:when>
			<xsl:when test="$input='CWI'">
				<xsl:copy-of select="'CWI'"/>
			</xsl:when>
			<xsl:when test="$input='D03'">
				<xsl:copy-of select="'D03'"/>
			</xsl:when>
			<xsl:when test="$input='D04'">
				<xsl:copy-of select="'D04'"/>
			</xsl:when>
			<xsl:when test="$input='D1'">
				<xsl:copy-of select="'D1'"/>
			</xsl:when>
			<xsl:when test="$input='D10'">
				<xsl:copy-of select="'D10'"/>
			</xsl:when>
			<xsl:when test="$input='D11'">
				<xsl:copy-of select="'D11'"/>
			</xsl:when>
			<xsl:when test="$input='D12'">
				<xsl:copy-of select="'D12'"/>
			</xsl:when>
			<xsl:when test="$input='D13'">
				<xsl:copy-of select="'D13'"/>
			</xsl:when>
			<xsl:when test="$input='D15'">
				<xsl:copy-of select="'D15'"/>
			</xsl:when>
			<xsl:when test="$input='D16'">
				<xsl:copy-of select="'D16'"/>
			</xsl:when>
			<xsl:when test="$input='D17'">
				<xsl:copy-of select="'D17'"/>
			</xsl:when>
			<xsl:when test="$input='D18'">
				<xsl:copy-of select="'D18'"/>
			</xsl:when>
			<xsl:when test="$input='D19'">
				<xsl:copy-of select="'D19'"/>
			</xsl:when>
			<xsl:when test="$input='D2'">
				<xsl:copy-of select="'D2'"/>
			</xsl:when>
			<xsl:when test="$input='D20'">
				<xsl:copy-of select="'D20'"/>
			</xsl:when>
			<xsl:when test="$input='D21'">
				<xsl:copy-of select="'D21'"/>
			</xsl:when>
			<xsl:when test="$input='D22'">
				<xsl:copy-of select="'D22'"/>
			</xsl:when>
			<xsl:when test="$input='D23'">
				<xsl:copy-of select="'D23'"/>
			</xsl:when>
			<xsl:when test="$input='D24'">
				<xsl:copy-of select="'D24'"/>
			</xsl:when>
			<xsl:when test="$input='D25'">
				<xsl:copy-of select="'D25'"/>
			</xsl:when>
			<xsl:when test="$input='D26'">
				<xsl:copy-of select="'D26'"/>
			</xsl:when>
			<xsl:when test="$input='D27'">
				<xsl:copy-of select="'D27'"/>
			</xsl:when>
			<xsl:when test="$input='D29'">
				<xsl:copy-of select="'D29'"/>
			</xsl:when>
			<xsl:when test="$input='D30'">
				<xsl:copy-of select="'D30'"/>
			</xsl:when>
			<xsl:when test="$input='D31'">
				<xsl:copy-of select="'D31'"/>
			</xsl:when>
			<xsl:when test="$input='D32'">
				<xsl:copy-of select="'D32'"/>
			</xsl:when>
			<xsl:when test="$input='D33'">
				<xsl:copy-of select="'D33'"/>
			</xsl:when>
			<xsl:when test="$input='D34'">
				<xsl:copy-of select="'D34'"/>
			</xsl:when>
			<xsl:when test="$input='D35'">
				<xsl:copy-of select="'D35'"/>
			</xsl:when>
			<xsl:when test="$input='D36'">
				<xsl:copy-of select="'D36'"/>
			</xsl:when>
			<xsl:when test="$input='D37'">
				<xsl:copy-of select="'D37'"/>
			</xsl:when>
			<xsl:when test="$input='D38'">
				<xsl:copy-of select="'D38'"/>
			</xsl:when>
			<xsl:when test="$input='D39'">
				<xsl:copy-of select="'D39'"/>
			</xsl:when>
			<xsl:when test="$input='D41'">
				<xsl:copy-of select="'D41'"/>
			</xsl:when>
			<xsl:when test="$input='D42'">
				<xsl:copy-of select="'D42'"/>
			</xsl:when>
			<xsl:when test="$input='D43'">
				<xsl:copy-of select="'D43'"/>
			</xsl:when>
			<xsl:when test="$input='D44'">
				<xsl:copy-of select="'D44'"/>
			</xsl:when>
			<xsl:when test="$input='D45'">
				<xsl:copy-of select="'D45'"/>
			</xsl:when>
			<xsl:when test="$input='D46'">
				<xsl:copy-of select="'D46'"/>
			</xsl:when>
			<xsl:when test="$input='D47'">
				<xsl:copy-of select="'D47'"/>
			</xsl:when>
			<xsl:when test="$input='D48'">
				<xsl:copy-of select="'D48'"/>
			</xsl:when>
			<xsl:when test="$input='D49'">
				<xsl:copy-of select="'D49'"/>
			</xsl:when>
			<xsl:when test="$input='D5'">
				<xsl:copy-of select="'D5'"/>
			</xsl:when>
			<xsl:when test="$input='D50'">
				<xsl:copy-of select="'D50'"/>
			</xsl:when>
			<xsl:when test="$input='D51'">
				<xsl:copy-of select="'D51'"/>
			</xsl:when>
			<xsl:when test="$input='D52'">
				<xsl:copy-of select="'D52'"/>
			</xsl:when>
			<xsl:when test="$input='D53'">
				<xsl:copy-of select="'D53'"/>
			</xsl:when>
			<xsl:when test="$input='D54'">
				<xsl:copy-of select="'D54'"/>
			</xsl:when>
			<xsl:when test="$input='D55'">
				<xsl:copy-of select="'D55'"/>
			</xsl:when>
			<xsl:when test="$input='D56'">
				<xsl:copy-of select="'D56'"/>
			</xsl:when>
			<xsl:when test="$input='D57'">
				<xsl:copy-of select="'D57'"/>
			</xsl:when>
			<xsl:when test="$input='D58'">
				<xsl:copy-of select="'D58'"/>
			</xsl:when>
			<xsl:when test="$input='D59'">
				<xsl:copy-of select="'D59'"/>
			</xsl:when>
			<xsl:when test="$input='D6'">
				<xsl:copy-of select="'D6'"/>
			</xsl:when>
			<xsl:when test="$input='D60'">
				<xsl:copy-of select="'D60'"/>
			</xsl:when>
			<xsl:when test="$input='D61'">
				<xsl:copy-of select="'D61'"/>
			</xsl:when>
			<xsl:when test="$input='D62'">
				<xsl:copy-of select="'D62'"/>
			</xsl:when>
			<xsl:when test="$input='D63'">
				<xsl:copy-of select="'D63'"/>
			</xsl:when>
			<xsl:when test="$input='D65'">
				<xsl:copy-of select="'D65'"/>
			</xsl:when>
			<xsl:when test="$input='D68'">
				<xsl:copy-of select="'D68'"/>
			</xsl:when>
			<xsl:when test="$input='D69'">
				<xsl:copy-of select="'D69'"/>
			</xsl:when>
			<xsl:when test="$input='D70'">
				<xsl:copy-of select="'D70'"/>
			</xsl:when>
			<xsl:when test="$input='D71'">
				<xsl:copy-of select="'D71'"/>
			</xsl:when>
			<xsl:when test="$input='D72'">
				<xsl:copy-of select="'D72'"/>
			</xsl:when>
			<xsl:when test="$input='D73'">
				<xsl:copy-of select="'D73'"/>
			</xsl:when>
			<xsl:when test="$input='D74'">
				<xsl:copy-of select="'D74'"/>
			</xsl:when>
			<xsl:when test="$input='D75'">
				<xsl:copy-of select="'D75'"/>
			</xsl:when>
			<xsl:when test="$input='D76'">
				<xsl:copy-of select="'D76'"/>
			</xsl:when>
			<xsl:when test="$input='D77'">
				<xsl:copy-of select="'D77'"/>
			</xsl:when>
			<xsl:when test="$input='D78'">
				<xsl:copy-of select="'D78'"/>
			</xsl:when>
			<xsl:when test="$input='D80'">
				<xsl:copy-of select="'D80'"/>
			</xsl:when>
			<xsl:when test="$input='D81'">
				<xsl:copy-of select="'D81'"/>
			</xsl:when>
			<xsl:when test="$input='D82'">
				<xsl:copy-of select="'D82'"/>
			</xsl:when>
			<xsl:when test="$input='D83'">
				<xsl:copy-of select="'D83'"/>
			</xsl:when>
			<xsl:when test="$input='D85'">
				<xsl:copy-of select="'D85'"/>
			</xsl:when>
			<xsl:when test="$input='D86'">
				<xsl:copy-of select="'D86'"/>
			</xsl:when>
			<xsl:when test="$input='D87'">
				<xsl:copy-of select="'D87'"/>
			</xsl:when>
			<xsl:when test="$input='D88'">
				<xsl:copy-of select="'D88'"/>
			</xsl:when>
			<xsl:when test="$input='D89'">
				<xsl:copy-of select="'D89'"/>
			</xsl:when>
			<xsl:when test="$input='D9'">
				<xsl:copy-of select="'D9'"/>
			</xsl:when>
			<xsl:when test="$input='D91'">
				<xsl:copy-of select="'D91'"/>
			</xsl:when>
			<xsl:when test="$input='D93'">
				<xsl:copy-of select="'D93'"/>
			</xsl:when>
			<xsl:when test="$input='D94'">
				<xsl:copy-of select="'D94'"/>
			</xsl:when>
			<xsl:when test="$input='D95'">
				<xsl:copy-of select="'D95'"/>
			</xsl:when>
			<xsl:when test="$input='DAA'">
				<xsl:copy-of select="'DAA'"/>
			</xsl:when>
			<xsl:when test="$input='DAD'">
				<xsl:copy-of select="'DAD'"/>
			</xsl:when>
			<xsl:when test="$input='DAY'">
				<xsl:copy-of select="'DAY'"/>
			</xsl:when>
			<xsl:when test="$input='DB'">
				<xsl:copy-of select="'DB'"/>
			</xsl:when>
			<xsl:when test="$input='DD'">
				<xsl:copy-of select="'DD'"/>
			</xsl:when>
			<xsl:when test="$input='DEC'">
				<xsl:copy-of select="'DEC'"/>
			</xsl:when>
			<xsl:when test="$input='DG'">
				<xsl:copy-of select="'DG'"/>
			</xsl:when>
			<xsl:when test="$input='DJ'">
				<xsl:copy-of select="'DJ'"/>
			</xsl:when>
			<xsl:when test="$input='DLT'">
				<xsl:copy-of select="'DLT'"/>
			</xsl:when>
			<xsl:when test="$input='DMA'">
				<xsl:copy-of select="'DMA'"/>
			</xsl:when>
			<xsl:when test="$input='DMK'">
				<xsl:copy-of select="'DMK'"/>
			</xsl:when>
			<xsl:when test="$input='DMO'">
				<xsl:copy-of select="'DMO'"/>
			</xsl:when>
			<xsl:when test="$input='DMQ'">
				<xsl:copy-of select="'DMQ'"/>
			</xsl:when>
			<xsl:when test="$input='DMT'">
				<xsl:copy-of select="'DMT'"/>
			</xsl:when>
			<xsl:when test="$input='DN'">
				<xsl:copy-of select="'DN'"/>
			</xsl:when>
			<xsl:when test="$input='DPC'">
				<xsl:copy-of select="'DPC'"/>
			</xsl:when>
			<xsl:when test="$input='DPR'">
				<xsl:copy-of select="'DPR'"/>
			</xsl:when>
			<xsl:when test="$input='DPT'">
				<xsl:copy-of select="'DPT'"/>
			</xsl:when>
			<xsl:when test="$input='DRA'">
				<xsl:copy-of select="'DRA'"/>
			</xsl:when>
			<xsl:when test="$input='DRI'">
				<xsl:copy-of select="'DRI'"/>
			</xsl:when>
			<xsl:when test="$input='DRL'">
				<xsl:copy-of select="'DRL'"/>
			</xsl:when>
			<xsl:when test="$input='DT'">
				<xsl:copy-of select="'DT'"/>
			</xsl:when>
			<xsl:when test="$input='DTN'">
				<xsl:copy-of select="'DTN'"/>
			</xsl:when>
			<xsl:when test="$input='DU'">
				<xsl:copy-of select="'DU'"/>
			</xsl:when>
			<xsl:when test="$input='DWT'">
				<xsl:copy-of select="'DWT'"/>
			</xsl:when>
			<xsl:when test="$input='DX'">
				<xsl:copy-of select="'DX'"/>
			</xsl:when>
			<xsl:when test="$input='DZN'">
				<xsl:copy-of select="'DZN'"/>
			</xsl:when>
			<xsl:when test="$input='DZP'">
				<xsl:copy-of select="'DZP'"/>
			</xsl:when>
			<xsl:when test="$input='E01'">
				<xsl:copy-of select="'E01'"/>
			</xsl:when>
			<xsl:when test="$input='E07'">
				<xsl:copy-of select="'E07'"/>
			</xsl:when>
			<xsl:when test="$input='E08'">
				<xsl:copy-of select="'E08'"/>
			</xsl:when>
			<xsl:when test="$input='E09'">
				<xsl:copy-of select="'E09'"/>
			</xsl:when>
			<xsl:when test="$input='E10'">
				<xsl:copy-of select="'E10'"/>
			</xsl:when>
			<xsl:when test="$input='E11'">
				<xsl:copy-of select="'E11'"/>
			</xsl:when>
			<xsl:when test="$input='E12'">
				<xsl:copy-of select="'E12'"/>
			</xsl:when>
			<xsl:when test="$input='E14'">
				<xsl:copy-of select="'E14'"/>
			</xsl:when>
			<xsl:when test="$input='E15'">
				<xsl:copy-of select="'E15'"/>
			</xsl:when>
			<xsl:when test="$input='E16'">
				<xsl:copy-of select="'E16'"/>
			</xsl:when>
			<xsl:when test="$input='E17'">
				<xsl:copy-of select="'E17'"/>
			</xsl:when>
			<xsl:when test="$input='E18'">
				<xsl:copy-of select="'E18'"/>
			</xsl:when>
			<xsl:when test="$input='E19'">
				<xsl:copy-of select="'E19'"/>
			</xsl:when>
			<xsl:when test="$input='E20'">
				<xsl:copy-of select="'E20'"/>
			</xsl:when>
			<xsl:when test="$input='E21'">
				<xsl:copy-of select="'E21'"/>
			</xsl:when>
			<xsl:when test="$input='E22'">
				<xsl:copy-of select="'E22'"/>
			</xsl:when>
			<xsl:when test="$input='E23'">
				<xsl:copy-of select="'E23'"/>
			</xsl:when>
			<xsl:when test="$input='E25'">
				<xsl:copy-of select="'E25'"/>
			</xsl:when>
			<xsl:when test="$input='E27'">
				<xsl:copy-of select="'E27'"/>
			</xsl:when>
			<xsl:when test="$input='E28'">
				<xsl:copy-of select="'E28'"/>
			</xsl:when>
			<xsl:when test="$input='E30'">
				<xsl:copy-of select="'E30'"/>
			</xsl:when>
			<xsl:when test="$input='E31'">
				<xsl:copy-of select="'E31'"/>
			</xsl:when>
			<xsl:when test="$input='E32'">
				<xsl:copy-of select="'E32'"/>
			</xsl:when>
			<xsl:when test="$input='E33'">
				<xsl:copy-of select="'E33'"/>
			</xsl:when>
			<xsl:when test="$input='E34'">
				<xsl:copy-of select="'E34'"/>
			</xsl:when>
			<xsl:when test="$input='E35'">
				<xsl:copy-of select="'E35'"/>
			</xsl:when>
			<xsl:when test="$input='E36'">
				<xsl:copy-of select="'E36'"/>
			</xsl:when>
			<xsl:when test="$input='E37'">
				<xsl:copy-of select="'E37'"/>
			</xsl:when>
			<xsl:when test="$input='E38'">
				<xsl:copy-of select="'E38'"/>
			</xsl:when>
			<xsl:when test="$input='E39'">
				<xsl:copy-of select="'E39'"/>
			</xsl:when>
			<xsl:when test="$input='E4'">
				<xsl:copy-of select="'E4'"/>
			</xsl:when>
			<xsl:when test="$input='E40'">
				<xsl:copy-of select="'E40'"/>
			</xsl:when>
			<xsl:when test="$input='E41'">
				<xsl:copy-of select="'E41'"/>
			</xsl:when>
			<xsl:when test="$input='E42'">
				<xsl:copy-of select="'E42'"/>
			</xsl:when>
			<xsl:when test="$input='E43'">
				<xsl:copy-of select="'E43'"/>
			</xsl:when>
			<xsl:when test="$input='E44'">
				<xsl:copy-of select="'E44'"/>
			</xsl:when>
			<xsl:when test="$input='E45'">
				<xsl:copy-of select="'E45'"/>
			</xsl:when>
			<xsl:when test="$input='E46'">
				<xsl:copy-of select="'E46'"/>
			</xsl:when>
			<xsl:when test="$input='E47'">
				<xsl:copy-of select="'E47'"/>
			</xsl:when>
			<xsl:when test="$input='E48'">
				<xsl:copy-of select="'E48'"/>
			</xsl:when>
			<xsl:when test="$input='E49'">
				<xsl:copy-of select="'E49'"/>
			</xsl:when>
			<xsl:when test="$input='E50'">
				<xsl:copy-of select="'E50'"/>
			</xsl:when>
			<xsl:when test="$input='E51'">
				<xsl:copy-of select="'E51'"/>
			</xsl:when>
			<xsl:when test="$input='E52'">
				<xsl:copy-of select="'E52'"/>
			</xsl:when>
			<xsl:when test="$input='E53'">
				<xsl:copy-of select="'E53'"/>
			</xsl:when>
			<xsl:when test="$input='E54'">
				<xsl:copy-of select="'E54'"/>
			</xsl:when>
			<xsl:when test="$input='E55'">
				<xsl:copy-of select="'E55'"/>
			</xsl:when>
			<xsl:when test="$input='E56'">
				<xsl:copy-of select="'E56'"/>
			</xsl:when>
			<xsl:when test="$input='E57'">
				<xsl:copy-of select="'E57'"/>
			</xsl:when>
			<xsl:when test="$input='E58'">
				<xsl:copy-of select="'E58'"/>
			</xsl:when>
			<xsl:when test="$input='E59'">
				<xsl:copy-of select="'E59'"/>
			</xsl:when>
			<xsl:when test="$input='E60'">
				<xsl:copy-of select="'E60'"/>
			</xsl:when>
			<xsl:when test="$input='E61'">
				<xsl:copy-of select="'E61'"/>
			</xsl:when>
			<xsl:when test="$input='E62'">
				<xsl:copy-of select="'E62'"/>
			</xsl:when>
			<xsl:when test="$input='E63'">
				<xsl:copy-of select="'E63'"/>
			</xsl:when>
			<xsl:when test="$input='E64'">
				<xsl:copy-of select="'E64'"/>
			</xsl:when>
			<xsl:when test="$input='E65'">
				<xsl:copy-of select="'E65'"/>
			</xsl:when>
			<xsl:when test="$input='E66'">
				<xsl:copy-of select="'E66'"/>
			</xsl:when>
			<xsl:when test="$input='E67'">
				<xsl:copy-of select="'E67'"/>
			</xsl:when>
			<xsl:when test="$input='E68'">
				<xsl:copy-of select="'E68'"/>
			</xsl:when>
			<xsl:when test="$input='E69'">
				<xsl:copy-of select="'E69'"/>
			</xsl:when>
			<xsl:when test="$input='E70'">
				<xsl:copy-of select="'E70'"/>
			</xsl:when>
			<xsl:when test="$input='E71'">
				<xsl:copy-of select="'E71'"/>
			</xsl:when>
			<xsl:when test="$input='E72'">
				<xsl:copy-of select="'E72'"/>
			</xsl:when>
			<xsl:when test="$input='E73'">
				<xsl:copy-of select="'E73'"/>
			</xsl:when>
			<xsl:when test="$input='E74'">
				<xsl:copy-of select="'E74'"/>
			</xsl:when>
			<xsl:when test="$input='E75'">
				<xsl:copy-of select="'E75'"/>
			</xsl:when>
			<xsl:when test="$input='E76'">
				<xsl:copy-of select="'E76'"/>
			</xsl:when>
			<xsl:when test="$input='E77'">
				<xsl:copy-of select="'E77'"/>
			</xsl:when>
			<xsl:when test="$input='E78'">
				<xsl:copy-of select="'E78'"/>
			</xsl:when>
			<xsl:when test="$input='E79'">
				<xsl:copy-of select="'E79'"/>
			</xsl:when>
			<xsl:when test="$input='E80'">
				<xsl:copy-of select="'E80'"/>
			</xsl:when>
			<xsl:when test="$input='E81'">
				<xsl:copy-of select="'E81'"/>
			</xsl:when>
			<xsl:when test="$input='E82'">
				<xsl:copy-of select="'E82'"/>
			</xsl:when>
			<xsl:when test="$input='E83'">
				<xsl:copy-of select="'E83'"/>
			</xsl:when>
			<xsl:when test="$input='E84'">
				<xsl:copy-of select="'E84'"/>
			</xsl:when>
			<xsl:when test="$input='E85'">
				<xsl:copy-of select="'E85'"/>
			</xsl:when>
			<xsl:when test="$input='E86'">
				<xsl:copy-of select="'E86'"/>
			</xsl:when>
			<xsl:when test="$input='E87'">
				<xsl:copy-of select="'E87'"/>
			</xsl:when>
			<xsl:when test="$input='E88'">
				<xsl:copy-of select="'E88'"/>
			</xsl:when>
			<xsl:when test="$input='E89'">
				<xsl:copy-of select="'E89'"/>
			</xsl:when>
			<xsl:when test="$input='E90'">
				<xsl:copy-of select="'E90'"/>
			</xsl:when>
			<xsl:when test="$input='E91'">
				<xsl:copy-of select="'E91'"/>
			</xsl:when>
			<xsl:when test="$input='E92'">
				<xsl:copy-of select="'E92'"/>
			</xsl:when>
			<xsl:when test="$input='E93'">
				<xsl:copy-of select="'E93'"/>
			</xsl:when>
			<xsl:when test="$input='E94'">
				<xsl:copy-of select="'E94'"/>
			</xsl:when>
			<xsl:when test="$input='E95'">
				<xsl:copy-of select="'E95'"/>
			</xsl:when>
			<xsl:when test="$input='E96'">
				<xsl:copy-of select="'E96'"/>
			</xsl:when>
			<xsl:when test="$input='E97'">
				<xsl:copy-of select="'E97'"/>
			</xsl:when>
			<xsl:when test="$input='E98'">
				<xsl:copy-of select="'E98'"/>
			</xsl:when>
			<xsl:when test="$input='E99'">
				<xsl:copy-of select="'E99'"/>
			</xsl:when>
			<xsl:when test="$input='EA'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='EB'">
				<xsl:copy-of select="'EB'"/>
			</xsl:when>
			<xsl:when test="$input='EQ'">
				<xsl:copy-of select="'EQ'"/>
			</xsl:when>
			<xsl:when test="$input='F01'">
				<xsl:copy-of select="'F01'"/>
			</xsl:when>
			<xsl:when test="$input='F02'">
				<xsl:copy-of select="'F02'"/>
			</xsl:when>
			<xsl:when test="$input='F03'">
				<xsl:copy-of select="'F03'"/>
			</xsl:when>
			<xsl:when test="$input='F04'">
				<xsl:copy-of select="'F04'"/>
			</xsl:when>
			<xsl:when test="$input='F05'">
				<xsl:copy-of select="'F05'"/>
			</xsl:when>
			<xsl:when test="$input='F06'">
				<xsl:copy-of select="'F06'"/>
			</xsl:when>
			<xsl:when test="$input='F07'">
				<xsl:copy-of select="'F07'"/>
			</xsl:when>
			<xsl:when test="$input='F08'">
				<xsl:copy-of select="'F08'"/>
			</xsl:when>
			<xsl:when test="$input='F10'">
				<xsl:copy-of select="'F10'"/>
			</xsl:when>
			<xsl:when test="$input='F11'">
				<xsl:copy-of select="'F11'"/>
			</xsl:when>
			<xsl:when test="$input='F12'">
				<xsl:copy-of select="'F12'"/>
			</xsl:when>
			<xsl:when test="$input='F13'">
				<xsl:copy-of select="'F13'"/>
			</xsl:when>
			<xsl:when test="$input='F14'">
				<xsl:copy-of select="'F14'"/>
			</xsl:when>
			<xsl:when test="$input='F15'">
				<xsl:copy-of select="'F15'"/>
			</xsl:when>
			<xsl:when test="$input='F16'">
				<xsl:copy-of select="'F16'"/>
			</xsl:when>
			<xsl:when test="$input='F17'">
				<xsl:copy-of select="'F17'"/>
			</xsl:when>
			<xsl:when test="$input='F18'">
				<xsl:copy-of select="'F18'"/>
			</xsl:when>
			<xsl:when test="$input='F19'">
				<xsl:copy-of select="'F19'"/>
			</xsl:when>
			<xsl:when test="$input='F20'">
				<xsl:copy-of select="'F20'"/>
			</xsl:when>
			<xsl:when test="$input='F21'">
				<xsl:copy-of select="'F21'"/>
			</xsl:when>
			<xsl:when test="$input='F22'">
				<xsl:copy-of select="'F22'"/>
			</xsl:when>
			<xsl:when test="$input='F23'">
				<xsl:copy-of select="'F23'"/>
			</xsl:when>
			<xsl:when test="$input='F24'">
				<xsl:copy-of select="'F24'"/>
			</xsl:when>
			<xsl:when test="$input='F25'">
				<xsl:copy-of select="'F25'"/>
			</xsl:when>
			<xsl:when test="$input='F26'">
				<xsl:copy-of select="'F26'"/>
			</xsl:when>
			<xsl:when test="$input='F27'">
				<xsl:copy-of select="'F27'"/>
			</xsl:when>
			<xsl:when test="$input='F28'">
				<xsl:copy-of select="'F28'"/>
			</xsl:when>
			<xsl:when test="$input='F29'">
				<xsl:copy-of select="'F29'"/>
			</xsl:when>
			<xsl:when test="$input='F30'">
				<xsl:copy-of select="'F30'"/>
			</xsl:when>
			<xsl:when test="$input='F31'">
				<xsl:copy-of select="'F31'"/>
			</xsl:when>
			<xsl:when test="$input='F32'">
				<xsl:copy-of select="'F32'"/>
			</xsl:when>
			<xsl:when test="$input='F33'">
				<xsl:copy-of select="'F33'"/>
			</xsl:when>
			<xsl:when test="$input='F34'">
				<xsl:copy-of select="'F34'"/>
			</xsl:when>
			<xsl:when test="$input='F35'">
				<xsl:copy-of select="'F35'"/>
			</xsl:when>
			<xsl:when test="$input='F36'">
				<xsl:copy-of select="'F36'"/>
			</xsl:when>
			<xsl:when test="$input='F37'">
				<xsl:copy-of select="'F37'"/>
			</xsl:when>
			<xsl:when test="$input='F38'">
				<xsl:copy-of select="'F38'"/>
			</xsl:when>
			<xsl:when test="$input='F39'">
				<xsl:copy-of select="'F39'"/>
			</xsl:when>
			<xsl:when test="$input='F40'">
				<xsl:copy-of select="'F40'"/>
			</xsl:when>
			<xsl:when test="$input='F41'">
				<xsl:copy-of select="'F41'"/>
			</xsl:when>
			<xsl:when test="$input='F42'">
				<xsl:copy-of select="'F42'"/>
			</xsl:when>
			<xsl:when test="$input='F43'">
				<xsl:copy-of select="'F43'"/>
			</xsl:when>
			<xsl:when test="$input='F44'">
				<xsl:copy-of select="'F44'"/>
			</xsl:when>
			<xsl:when test="$input='F45'">
				<xsl:copy-of select="'F45'"/>
			</xsl:when>
			<xsl:when test="$input='F46'">
				<xsl:copy-of select="'F46'"/>
			</xsl:when>
			<xsl:when test="$input='F47'">
				<xsl:copy-of select="'F47'"/>
			</xsl:when>
			<xsl:when test="$input='F48'">
				<xsl:copy-of select="'F48'"/>
			</xsl:when>
			<xsl:when test="$input='F49'">
				<xsl:copy-of select="'F49'"/>
			</xsl:when>
			<xsl:when test="$input='F50'">
				<xsl:copy-of select="'F50'"/>
			</xsl:when>
			<xsl:when test="$input='F51'">
				<xsl:copy-of select="'F51'"/>
			</xsl:when>
			<xsl:when test="$input='F52'">
				<xsl:copy-of select="'F52'"/>
			</xsl:when>
			<xsl:when test="$input='F53'">
				<xsl:copy-of select="'F53'"/>
			</xsl:when>
			<xsl:when test="$input='F54'">
				<xsl:copy-of select="'F54'"/>
			</xsl:when>
			<xsl:when test="$input='F55'">
				<xsl:copy-of select="'F55'"/>
			</xsl:when>
			<xsl:when test="$input='F56'">
				<xsl:copy-of select="'F56'"/>
			</xsl:when>
			<xsl:when test="$input='F57'">
				<xsl:copy-of select="'F57'"/>
			</xsl:when>
			<xsl:when test="$input='F58'">
				<xsl:copy-of select="'F58'"/>
			</xsl:when>
			<xsl:when test="$input='F59'">
				<xsl:copy-of select="'F59'"/>
			</xsl:when>
			<xsl:when test="$input='F60'">
				<xsl:copy-of select="'F60'"/>
			</xsl:when>
			<xsl:when test="$input='F61'">
				<xsl:copy-of select="'F61'"/>
			</xsl:when>
			<xsl:when test="$input='F62'">
				<xsl:copy-of select="'F62'"/>
			</xsl:when>
			<xsl:when test="$input='F63'">
				<xsl:copy-of select="'F63'"/>
			</xsl:when>
			<xsl:when test="$input='F64'">
				<xsl:copy-of select="'F64'"/>
			</xsl:when>
			<xsl:when test="$input='F65'">
				<xsl:copy-of select="'F65'"/>
			</xsl:when>
			<xsl:when test="$input='F66'">
				<xsl:copy-of select="'F66'"/>
			</xsl:when>
			<xsl:when test="$input='F67'">
				<xsl:copy-of select="'F67'"/>
			</xsl:when>
			<xsl:when test="$input='F68'">
				<xsl:copy-of select="'F68'"/>
			</xsl:when>
			<xsl:when test="$input='F69'">
				<xsl:copy-of select="'F69'"/>
			</xsl:when>
			<xsl:when test="$input='F70'">
				<xsl:copy-of select="'F70'"/>
			</xsl:when>
			<xsl:when test="$input='F71'">
				<xsl:copy-of select="'F71'"/>
			</xsl:when>
			<xsl:when test="$input='F72'">
				<xsl:copy-of select="'F72'"/>
			</xsl:when>
			<xsl:when test="$input='F73'">
				<xsl:copy-of select="'F73'"/>
			</xsl:when>
			<xsl:when test="$input='F74'">
				<xsl:copy-of select="'F74'"/>
			</xsl:when>
			<xsl:when test="$input='F75'">
				<xsl:copy-of select="'F75'"/>
			</xsl:when>
			<xsl:when test="$input='F76'">
				<xsl:copy-of select="'F76'"/>
			</xsl:when>
			<xsl:when test="$input='F77'">
				<xsl:copy-of select="'F77'"/>
			</xsl:when>
			<xsl:when test="$input='F78'">
				<xsl:copy-of select="'F78'"/>
			</xsl:when>
			<xsl:when test="$input='F79'">
				<xsl:copy-of select="'F79'"/>
			</xsl:when>
			<xsl:when test="$input='F80'">
				<xsl:copy-of select="'F80'"/>
			</xsl:when>
			<xsl:when test="$input='F81'">
				<xsl:copy-of select="'F81'"/>
			</xsl:when>
			<xsl:when test="$input='F82'">
				<xsl:copy-of select="'F82'"/>
			</xsl:when>
			<xsl:when test="$input='F83'">
				<xsl:copy-of select="'F83'"/>
			</xsl:when>
			<xsl:when test="$input='F84'">
				<xsl:copy-of select="'F84'"/>
			</xsl:when>
			<xsl:when test="$input='F85'">
				<xsl:copy-of select="'F85'"/>
			</xsl:when>
			<xsl:when test="$input='F86'">
				<xsl:copy-of select="'F86'"/>
			</xsl:when>
			<xsl:when test="$input='F87'">
				<xsl:copy-of select="'F87'"/>
			</xsl:when>
			<xsl:when test="$input='F88'">
				<xsl:copy-of select="'F88'"/>
			</xsl:when>
			<xsl:when test="$input='F89'">
				<xsl:copy-of select="'F89'"/>
			</xsl:when>
			<xsl:when test="$input='F90'">
				<xsl:copy-of select="'F90'"/>
			</xsl:when>
			<xsl:when test="$input='F91'">
				<xsl:copy-of select="'F91'"/>
			</xsl:when>
			<xsl:when test="$input='F92'">
				<xsl:copy-of select="'F92'"/>
			</xsl:when>
			<xsl:when test="$input='F93'">
				<xsl:copy-of select="'F93'"/>
			</xsl:when>
			<xsl:when test="$input='F94'">
				<xsl:copy-of select="'F94'"/>
			</xsl:when>
			<xsl:when test="$input='F95'">
				<xsl:copy-of select="'F95'"/>
			</xsl:when>
			<xsl:when test="$input='F96'">
				<xsl:copy-of select="'F96'"/>
			</xsl:when>
			<xsl:when test="$input='F97'">
				<xsl:copy-of select="'F97'"/>
			</xsl:when>
			<xsl:when test="$input='F98'">
				<xsl:copy-of select="'F98'"/>
			</xsl:when>
			<xsl:when test="$input='F99'">
				<xsl:copy-of select="'F99'"/>
			</xsl:when>
			<xsl:when test="$input='FAH'">
				<xsl:copy-of select="'FAH'"/>
			</xsl:when>
			<xsl:when test="$input='FAR'">
				<xsl:copy-of select="'FAR'"/>
			</xsl:when>
			<xsl:when test="$input='FBM'">
				<xsl:copy-of select="'FBM'"/>
			</xsl:when>
			<xsl:when test="$input='FC'">
				<xsl:copy-of select="'FC'"/>
			</xsl:when>
			<xsl:when test="$input='FF'">
				<xsl:copy-of select="'FF'"/>
			</xsl:when>
			<xsl:when test="$input='FH'">
				<xsl:copy-of select="'FH'"/>
			</xsl:when>
			<xsl:when test="$input='FIT'">
				<xsl:copy-of select="'FIT'"/>
			</xsl:when>
			<xsl:when test="$input='FL'">
				<xsl:copy-of select="'FL'"/>
			</xsl:when>
			<xsl:when test="$input='FOT'">
				<xsl:copy-of select="'FOT'"/>
			</xsl:when>
			<xsl:when test="$input='FP'">
				<xsl:copy-of select="'FP'"/>
			</xsl:when>
			<xsl:when test="$input='FR'">
				<xsl:copy-of select="'FR'"/>
			</xsl:when>
			<xsl:when test="$input='FS'">
				<xsl:copy-of select="'FS'"/>
			</xsl:when>
			<xsl:when test="$input='FTK'">
				<xsl:copy-of select="'FTK'"/>
			</xsl:when>
			<xsl:when test="$input='FTQ'">
				<xsl:copy-of select="'FTQ'"/>
			</xsl:when>
			<xsl:when test="$input='G01'">
				<xsl:copy-of select="'G01'"/>
			</xsl:when>
			<xsl:when test="$input='G04'">
				<xsl:copy-of select="'G04'"/>
			</xsl:when>
			<xsl:when test="$input='G05'">
				<xsl:copy-of select="'G05'"/>
			</xsl:when>
			<xsl:when test="$input='G06'">
				<xsl:copy-of select="'G06'"/>
			</xsl:when>
			<xsl:when test="$input='G08'">
				<xsl:copy-of select="'G08'"/>
			</xsl:when>
			<xsl:when test="$input='G09'">
				<xsl:copy-of select="'G09'"/>
			</xsl:when>
			<xsl:when test="$input='G10'">
				<xsl:copy-of select="'G10'"/>
			</xsl:when>
			<xsl:when test="$input='G11'">
				<xsl:copy-of select="'G11'"/>
			</xsl:when>
			<xsl:when test="$input='G12'">
				<xsl:copy-of select="'G12'"/>
			</xsl:when>
			<xsl:when test="$input='G13'">
				<xsl:copy-of select="'G13'"/>
			</xsl:when>
			<xsl:when test="$input='G14'">
				<xsl:copy-of select="'G14'"/>
			</xsl:when>
			<xsl:when test="$input='G15'">
				<xsl:copy-of select="'G15'"/>
			</xsl:when>
			<xsl:when test="$input='G16'">
				<xsl:copy-of select="'G16'"/>
			</xsl:when>
			<xsl:when test="$input='G17'">
				<xsl:copy-of select="'G17'"/>
			</xsl:when>
			<xsl:when test="$input='G18'">
				<xsl:copy-of select="'G18'"/>
			</xsl:when>
			<xsl:when test="$input='G19'">
				<xsl:copy-of select="'G19'"/>
			</xsl:when>
			<xsl:when test="$input='G2'">
				<xsl:copy-of select="'G2'"/>
			</xsl:when>
			<xsl:when test="$input='G20'">
				<xsl:copy-of select="'G20'"/>
			</xsl:when>
			<xsl:when test="$input='G21'">
				<xsl:copy-of select="'G21'"/>
			</xsl:when>
			<xsl:when test="$input='G23'">
				<xsl:copy-of select="'G23'"/>
			</xsl:when>
			<xsl:when test="$input='G24'">
				<xsl:copy-of select="'G24'"/>
			</xsl:when>
			<xsl:when test="$input='G25'">
				<xsl:copy-of select="'G25'"/>
			</xsl:when>
			<xsl:when test="$input='G26'">
				<xsl:copy-of select="'G26'"/>
			</xsl:when>
			<xsl:when test="$input='G27'">
				<xsl:copy-of select="'G27'"/>
			</xsl:when>
			<xsl:when test="$input='G28'">
				<xsl:copy-of select="'G28'"/>
			</xsl:when>
			<xsl:when test="$input='G29'">
				<xsl:copy-of select="'G29'"/>
			</xsl:when>
			<xsl:when test="$input='G3'">
				<xsl:copy-of select="'G3'"/>
			</xsl:when>
			<xsl:when test="$input='G30'">
				<xsl:copy-of select="'G30'"/>
			</xsl:when>
			<xsl:when test="$input='G31'">
				<xsl:copy-of select="'G31'"/>
			</xsl:when>
			<xsl:when test="$input='G32'">
				<xsl:copy-of select="'G32'"/>
			</xsl:when>
			<xsl:when test="$input='G33'">
				<xsl:copy-of select="'G33'"/>
			</xsl:when>
			<xsl:when test="$input='G34'">
				<xsl:copy-of select="'G34'"/>
			</xsl:when>
			<xsl:when test="$input='G35'">
				<xsl:copy-of select="'G35'"/>
			</xsl:when>
			<xsl:when test="$input='G36'">
				<xsl:copy-of select="'G36'"/>
			</xsl:when>
			<xsl:when test="$input='G37'">
				<xsl:copy-of select="'G37'"/>
			</xsl:when>
			<xsl:when test="$input='G38'">
				<xsl:copy-of select="'G38'"/>
			</xsl:when>
			<xsl:when test="$input='G39'">
				<xsl:copy-of select="'G39'"/>
			</xsl:when>
			<xsl:when test="$input='G40'">
				<xsl:copy-of select="'G40'"/>
			</xsl:when>
			<xsl:when test="$input='G41'">
				<xsl:copy-of select="'G41'"/>
			</xsl:when>
			<xsl:when test="$input='G42'">
				<xsl:copy-of select="'G42'"/>
			</xsl:when>
			<xsl:when test="$input='G43'">
				<xsl:copy-of select="'G43'"/>
			</xsl:when>
			<xsl:when test="$input='G44'">
				<xsl:copy-of select="'G44'"/>
			</xsl:when>
			<xsl:when test="$input='G45'">
				<xsl:copy-of select="'G45'"/>
			</xsl:when>
			<xsl:when test="$input='G46'">
				<xsl:copy-of select="'G46'"/>
			</xsl:when>
			<xsl:when test="$input='G47'">
				<xsl:copy-of select="'G47'"/>
			</xsl:when>
			<xsl:when test="$input='G48'">
				<xsl:copy-of select="'G48'"/>
			</xsl:when>
			<xsl:when test="$input='G49'">
				<xsl:copy-of select="'G49'"/>
			</xsl:when>
			<xsl:when test="$input='G50'">
				<xsl:copy-of select="'G50'"/>
			</xsl:when>
			<xsl:when test="$input='G51'">
				<xsl:copy-of select="'G51'"/>
			</xsl:when>
			<xsl:when test="$input='G52'">
				<xsl:copy-of select="'G52'"/>
			</xsl:when>
			<xsl:when test="$input='G53'">
				<xsl:copy-of select="'G53'"/>
			</xsl:when>
			<xsl:when test="$input='G54'">
				<xsl:copy-of select="'G54'"/>
			</xsl:when>
			<xsl:when test="$input='G55'">
				<xsl:copy-of select="'G55'"/>
			</xsl:when>
			<xsl:when test="$input='G56'">
				<xsl:copy-of select="'G56'"/>
			</xsl:when>
			<xsl:when test="$input='G57'">
				<xsl:copy-of select="'G57'"/>
			</xsl:when>
			<xsl:when test="$input='G58'">
				<xsl:copy-of select="'G58'"/>
			</xsl:when>
			<xsl:when test="$input='G59'">
				<xsl:copy-of select="'G59'"/>
			</xsl:when>
			<xsl:when test="$input='G60'">
				<xsl:copy-of select="'G60'"/>
			</xsl:when>
			<xsl:when test="$input='G61'">
				<xsl:copy-of select="'G61'"/>
			</xsl:when>
			<xsl:when test="$input='G62'">
				<xsl:copy-of select="'G62'"/>
			</xsl:when>
			<xsl:when test="$input='G63'">
				<xsl:copy-of select="'G63'"/>
			</xsl:when>
			<xsl:when test="$input='G64'">
				<xsl:copy-of select="'G64'"/>
			</xsl:when>
			<xsl:when test="$input='G65'">
				<xsl:copy-of select="'G65'"/>
			</xsl:when>
			<xsl:when test="$input='G66'">
				<xsl:copy-of select="'G66'"/>
			</xsl:when>
			<xsl:when test="$input='G67'">
				<xsl:copy-of select="'G67'"/>
			</xsl:when>
			<xsl:when test="$input='G68'">
				<xsl:copy-of select="'G68'"/>
			</xsl:when>
			<xsl:when test="$input='G69'">
				<xsl:copy-of select="'G69'"/>
			</xsl:when>
			<xsl:when test="$input='G70'">
				<xsl:copy-of select="'G70'"/>
			</xsl:when>
			<xsl:when test="$input='G71'">
				<xsl:copy-of select="'G71'"/>
			</xsl:when>
			<xsl:when test="$input='G72'">
				<xsl:copy-of select="'G72'"/>
			</xsl:when>
			<xsl:when test="$input='G73'">
				<xsl:copy-of select="'G73'"/>
			</xsl:when>
			<xsl:when test="$input='G74'">
				<xsl:copy-of select="'G74'"/>
			</xsl:when>
			<xsl:when test="$input='G75'">
				<xsl:copy-of select="'G75'"/>
			</xsl:when>
			<xsl:when test="$input='G76'">
				<xsl:copy-of select="'G76'"/>
			</xsl:when>
			<xsl:when test="$input='G77'">
				<xsl:copy-of select="'G77'"/>
			</xsl:when>
			<xsl:when test="$input='G78'">
				<xsl:copy-of select="'G78'"/>
			</xsl:when>
			<xsl:when test="$input='G79'">
				<xsl:copy-of select="'G79'"/>
			</xsl:when>
			<xsl:when test="$input='G80'">
				<xsl:copy-of select="'G80'"/>
			</xsl:when>
			<xsl:when test="$input='G81'">
				<xsl:copy-of select="'G81'"/>
			</xsl:when>
			<xsl:when test="$input='G82'">
				<xsl:copy-of select="'G82'"/>
			</xsl:when>
			<xsl:when test="$input='G83'">
				<xsl:copy-of select="'G83'"/>
			</xsl:when>
			<xsl:when test="$input='G84'">
				<xsl:copy-of select="'G84'"/>
			</xsl:when>
			<xsl:when test="$input='G85'">
				<xsl:copy-of select="'G85'"/>
			</xsl:when>
			<xsl:when test="$input='G86'">
				<xsl:copy-of select="'G86'"/>
			</xsl:when>
			<xsl:when test="$input='G87'">
				<xsl:copy-of select="'G87'"/>
			</xsl:when>
			<xsl:when test="$input='G88'">
				<xsl:copy-of select="'G88'"/>
			</xsl:when>
			<xsl:when test="$input='G89'">
				<xsl:copy-of select="'G89'"/>
			</xsl:when>
			<xsl:when test="$input='G90'">
				<xsl:copy-of select="'G90'"/>
			</xsl:when>
			<xsl:when test="$input='G91'">
				<xsl:copy-of select="'G91'"/>
			</xsl:when>
			<xsl:when test="$input='G92'">
				<xsl:copy-of select="'G92'"/>
			</xsl:when>
			<xsl:when test="$input='G93'">
				<xsl:copy-of select="'G93'"/>
			</xsl:when>
			<xsl:when test="$input='G94'">
				<xsl:copy-of select="'G94'"/>
			</xsl:when>
			<xsl:when test="$input='G95'">
				<xsl:copy-of select="'G95'"/>
			</xsl:when>
			<xsl:when test="$input='G96'">
				<xsl:copy-of select="'G96'"/>
			</xsl:when>
			<xsl:when test="$input='G97'">
				<xsl:copy-of select="'G97'"/>
			</xsl:when>
			<xsl:when test="$input='G98'">
				<xsl:copy-of select="'G98'"/>
			</xsl:when>
			<xsl:when test="$input='G99'">
				<xsl:copy-of select="'G99'"/>
			</xsl:when>
			<xsl:when test="$input='GB'">
				<xsl:copy-of select="'GB'"/>
			</xsl:when>
			<xsl:when test="$input='GBQ'">
				<xsl:copy-of select="'GBQ'"/>
			</xsl:when>
			<xsl:when test="$input='GDW'">
				<xsl:copy-of select="'GDW'"/>
			</xsl:when>
			<xsl:when test="$input='GE'">
				<xsl:copy-of select="'GE'"/>
			</xsl:when>
			<xsl:when test="$input='GF'">
				<xsl:copy-of select="'GF'"/>
			</xsl:when>
			<xsl:when test="$input='GFI'">
				<xsl:copy-of select="'GFI'"/>
			</xsl:when>
			<xsl:when test="$input='GGR'">
				<xsl:copy-of select="'GGR'"/>
			</xsl:when>
			<xsl:when test="$input='GIA'">
				<xsl:copy-of select="'GIA'"/>
			</xsl:when>
			<xsl:when test="$input='GIC'">
				<xsl:copy-of select="'GIC'"/>
			</xsl:when>
			<xsl:when test="$input='GII'">
				<xsl:copy-of select="'GII'"/>
			</xsl:when>
			<xsl:when test="$input='GIP'">
				<xsl:copy-of select="'GIP'"/>
			</xsl:when>
			<xsl:when test="$input='GJ'">
				<xsl:copy-of select="'GJ'"/>
			</xsl:when>
			<xsl:when test="$input='GL'">
				<xsl:copy-of select="'GL'"/>
			</xsl:when>
			<xsl:when test="$input='GLD'">
				<xsl:copy-of select="'GLD'"/>
			</xsl:when>
			<xsl:when test="$input='GLI'">
				<xsl:copy-of select="'GLI'"/>
			</xsl:when>
			<xsl:when test="$input='GLL'">
				<xsl:copy-of select="'GLL'"/>
			</xsl:when>
			<xsl:when test="$input='GM'">
				<xsl:copy-of select="'GM'"/>
			</xsl:when>
			<xsl:when test="$input='GO'">
				<xsl:copy-of select="'GO'"/>
			</xsl:when>
			<xsl:when test="$input='GP'">
				<xsl:copy-of select="'GP'"/>
			</xsl:when>
			<xsl:when test="$input='GQ'">
				<xsl:copy-of select="'GQ'"/>
			</xsl:when>
			<xsl:when test="$input='GRM'">
				<xsl:copy-of select="'GRM'"/>
			</xsl:when>
			<xsl:when test="$input='GRN'">
				<xsl:copy-of select="'GRN'"/>
			</xsl:when>
			<xsl:when test="$input='GRO'">
				<xsl:copy-of select="'GRO'"/>
			</xsl:when>
			<xsl:when test="$input='GRT'">
				<xsl:copy-of select="'GRT'"/>
			</xsl:when>
			<xsl:when test="$input='GT'">
				<xsl:copy-of select="'GT'"/>
			</xsl:when>
			<xsl:when test="$input='GV'">
				<xsl:copy-of select="'GV'"/>
			</xsl:when>
			<xsl:when test="$input='GWH'">
				<xsl:copy-of select="'GWH'"/>
			</xsl:when>
			<xsl:when test="$input='H03'">
				<xsl:copy-of select="'H03'"/>
			</xsl:when>
			<xsl:when test="$input='H04'">
				<xsl:copy-of select="'H04'"/>
			</xsl:when>
			<xsl:when test="$input='H05'">
				<xsl:copy-of select="'H05'"/>
			</xsl:when>
			<xsl:when test="$input='H06'">
				<xsl:copy-of select="'H06'"/>
			</xsl:when>
			<xsl:when test="$input='H07'">
				<xsl:copy-of select="'H07'"/>
			</xsl:when>
			<xsl:when test="$input='H08'">
				<xsl:copy-of select="'H08'"/>
			</xsl:when>
			<xsl:when test="$input='H09'">
				<xsl:copy-of select="'H09'"/>
			</xsl:when>
			<xsl:when test="$input='H10'">
				<xsl:copy-of select="'H10'"/>
			</xsl:when>
			<xsl:when test="$input='H11'">
				<xsl:copy-of select="'H11'"/>
			</xsl:when>
			<xsl:when test="$input='H12'">
				<xsl:copy-of select="'H12'"/>
			</xsl:when>
			<xsl:when test="$input='H13'">
				<xsl:copy-of select="'H13'"/>
			</xsl:when>
			<xsl:when test="$input='H14'">
				<xsl:copy-of select="'H14'"/>
			</xsl:when>
			<xsl:when test="$input='H15'">
				<xsl:copy-of select="'H15'"/>
			</xsl:when>
			<xsl:when test="$input='H16'">
				<xsl:copy-of select="'H16'"/>
			</xsl:when>
			<xsl:when test="$input='H18'">
				<xsl:copy-of select="'H18'"/>
			</xsl:when>
			<xsl:when test="$input='H19'">
				<xsl:copy-of select="'H19'"/>
			</xsl:when>
			<xsl:when test="$input='H20'">
				<xsl:copy-of select="'H20'"/>
			</xsl:when>
			<xsl:when test="$input='H21'">
				<xsl:copy-of select="'H21'"/>
			</xsl:when>
			<xsl:when test="$input='H22'">
				<xsl:copy-of select="'H22'"/>
			</xsl:when>
			<xsl:when test="$input='H23'">
				<xsl:copy-of select="'H23'"/>
			</xsl:when>
			<xsl:when test="$input='H24'">
				<xsl:copy-of select="'H24'"/>
			</xsl:when>
			<xsl:when test="$input='H25'">
				<xsl:copy-of select="'H25'"/>
			</xsl:when>
			<xsl:when test="$input='H26'">
				<xsl:copy-of select="'H26'"/>
			</xsl:when>
			<xsl:when test="$input='H27'">
				<xsl:copy-of select="'H27'"/>
			</xsl:when>
			<xsl:when test="$input='H28'">
				<xsl:copy-of select="'H28'"/>
			</xsl:when>
			<xsl:when test="$input='H29'">
				<xsl:copy-of select="'H29'"/>
			</xsl:when>
			<xsl:when test="$input='H30'">
				<xsl:copy-of select="'H30'"/>
			</xsl:when>
			<xsl:when test="$input='H31'">
				<xsl:copy-of select="'H31'"/>
			</xsl:when>
			<xsl:when test="$input='H32'">
				<xsl:copy-of select="'H32'"/>
			</xsl:when>
			<xsl:when test="$input='H33'">
				<xsl:copy-of select="'H33'"/>
			</xsl:when>
			<xsl:when test="$input='H34'">
				<xsl:copy-of select="'H34'"/>
			</xsl:when>
			<xsl:when test="$input='H35'">
				<xsl:copy-of select="'H35'"/>
			</xsl:when>
			<xsl:when test="$input='H36'">
				<xsl:copy-of select="'H36'"/>
			</xsl:when>
			<xsl:when test="$input='H37'">
				<xsl:copy-of select="'H37'"/>
			</xsl:when>
			<xsl:when test="$input='H38'">
				<xsl:copy-of select="'H38'"/>
			</xsl:when>
			<xsl:when test="$input='H39'">
				<xsl:copy-of select="'H39'"/>
			</xsl:when>
			<xsl:when test="$input='H40'">
				<xsl:copy-of select="'H40'"/>
			</xsl:when>
			<xsl:when test="$input='H41'">
				<xsl:copy-of select="'H41'"/>
			</xsl:when>
			<xsl:when test="$input='H42'">
				<xsl:copy-of select="'H42'"/>
			</xsl:when>
			<xsl:when test="$input='H43'">
				<xsl:copy-of select="'H43'"/>
			</xsl:when>
			<xsl:when test="$input='H44'">
				<xsl:copy-of select="'H44'"/>
			</xsl:when>
			<xsl:when test="$input='H45'">
				<xsl:copy-of select="'H45'"/>
			</xsl:when>
			<xsl:when test="$input='H46'">
				<xsl:copy-of select="'H46'"/>
			</xsl:when>
			<xsl:when test="$input='H47'">
				<xsl:copy-of select="'H47'"/>
			</xsl:when>
			<xsl:when test="$input='H48'">
				<xsl:copy-of select="'H48'"/>
			</xsl:when>
			<xsl:when test="$input='H49'">
				<xsl:copy-of select="'H49'"/>
			</xsl:when>
			<xsl:when test="$input='H50'">
				<xsl:copy-of select="'H50'"/>
			</xsl:when>
			<xsl:when test="$input='H51'">
				<xsl:copy-of select="'H51'"/>
			</xsl:when>
			<xsl:when test="$input='H52'">
				<xsl:copy-of select="'H52'"/>
			</xsl:when>
			<xsl:when test="$input='H53'">
				<xsl:copy-of select="'H53'"/>
			</xsl:when>
			<xsl:when test="$input='H54'">
				<xsl:copy-of select="'H54'"/>
			</xsl:when>
			<xsl:when test="$input='H55'">
				<xsl:copy-of select="'H55'"/>
			</xsl:when>
			<xsl:when test="$input='H56'">
				<xsl:copy-of select="'H56'"/>
			</xsl:when>
			<xsl:when test="$input='H57'">
				<xsl:copy-of select="'H57'"/>
			</xsl:when>
			<xsl:when test="$input='H58'">
				<xsl:copy-of select="'H58'"/>
			</xsl:when>
			<xsl:when test="$input='H59'">
				<xsl:copy-of select="'H59'"/>
			</xsl:when>
			<xsl:when test="$input='H60'">
				<xsl:copy-of select="'H60'"/>
			</xsl:when>
			<xsl:when test="$input='H61'">
				<xsl:copy-of select="'H61'"/>
			</xsl:when>
			<xsl:when test="$input='H62'">
				<xsl:copy-of select="'H62'"/>
			</xsl:when>
			<xsl:when test="$input='H63'">
				<xsl:copy-of select="'H63'"/>
			</xsl:when>
			<xsl:when test="$input='H64'">
				<xsl:copy-of select="'H64'"/>
			</xsl:when>
			<xsl:when test="$input='H65'">
				<xsl:copy-of select="'H65'"/>
			</xsl:when>
			<xsl:when test="$input='H66'">
				<xsl:copy-of select="'H66'"/>
			</xsl:when>
			<xsl:when test="$input='H67'">
				<xsl:copy-of select="'H67'"/>
			</xsl:when>
			<xsl:when test="$input='H68'">
				<xsl:copy-of select="'H68'"/>
			</xsl:when>
			<xsl:when test="$input='H69'">
				<xsl:copy-of select="'H69'"/>
			</xsl:when>
			<xsl:when test="$input='H70'">
				<xsl:copy-of select="'H70'"/>
			</xsl:when>
			<xsl:when test="$input='H71'">
				<xsl:copy-of select="'H71'"/>
			</xsl:when>
			<xsl:when test="$input='H72'">
				<xsl:copy-of select="'H72'"/>
			</xsl:when>
			<xsl:when test="$input='H73'">
				<xsl:copy-of select="'H73'"/>
			</xsl:when>
			<xsl:when test="$input='H74'">
				<xsl:copy-of select="'H74'"/>
			</xsl:when>
			<xsl:when test="$input='H75'">
				<xsl:copy-of select="'H75'"/>
			</xsl:when>
			<xsl:when test="$input='H76'">
				<xsl:copy-of select="'H76'"/>
			</xsl:when>
			<xsl:when test="$input='H77'">
				<xsl:copy-of select="'H77'"/>
			</xsl:when>
			<xsl:when test="$input='H78'">
				<xsl:copy-of select="'H78'"/>
			</xsl:when>
			<xsl:when test="$input='H79'">
				<xsl:copy-of select="'H79'"/>
			</xsl:when>
			<xsl:when test="$input='H80'">
				<xsl:copy-of select="'H80'"/>
			</xsl:when>
			<xsl:when test="$input='H81'">
				<xsl:copy-of select="'H81'"/>
			</xsl:when>
			<xsl:when test="$input='H82'">
				<xsl:copy-of select="'H82'"/>
			</xsl:when>
			<xsl:when test="$input='H83'">
				<xsl:copy-of select="'H83'"/>
			</xsl:when>
			<xsl:when test="$input='H84'">
				<xsl:copy-of select="'H84'"/>
			</xsl:when>
			<xsl:when test="$input='H85'">
				<xsl:copy-of select="'H85'"/>
			</xsl:when>
			<xsl:when test="$input='H87'">
				<xsl:copy-of select="'H87'"/>
			</xsl:when>
			<xsl:when test="$input='H88'">
				<xsl:copy-of select="'H88'"/>
			</xsl:when>
			<xsl:when test="$input='H89'">
				<xsl:copy-of select="'H89'"/>
			</xsl:when>
			<xsl:when test="$input='H90'">
				<xsl:copy-of select="'H90'"/>
			</xsl:when>
			<xsl:when test="$input='H91'">
				<xsl:copy-of select="'H91'"/>
			</xsl:when>
			<xsl:when test="$input='H92'">
				<xsl:copy-of select="'H92'"/>
			</xsl:when>
			<xsl:when test="$input='H93'">
				<xsl:copy-of select="'H93'"/>
			</xsl:when>
			<xsl:when test="$input='H94'">
				<xsl:copy-of select="'H94'"/>
			</xsl:when>
			<xsl:when test="$input='H95'">
				<xsl:copy-of select="'H95'"/>
			</xsl:when>
			<xsl:when test="$input='H96'">
				<xsl:copy-of select="'H96'"/>
			</xsl:when>
			<xsl:when test="$input='H98'">
				<xsl:copy-of select="'H98'"/>
			</xsl:when>
			<xsl:when test="$input='H99'">
				<xsl:copy-of select="'H99'"/>
			</xsl:when>
			<xsl:when test="$input='HA'">
				<xsl:copy-of select="'HA'"/>
			</xsl:when>
			<xsl:when test="$input='HAR'">
				<xsl:copy-of select="'HAR'"/>
			</xsl:when>
			<xsl:when test="$input='HBA'">
				<xsl:copy-of select="'HBA'"/>
			</xsl:when>
			<xsl:when test="$input='HBX'">
				<xsl:copy-of select="'HBX'"/>
			</xsl:when>
			<xsl:when test="$input='HC'">
				<xsl:copy-of select="'HC'"/>
			</xsl:when>
			<xsl:when test="$input='HDW'">
				<xsl:copy-of select="'HDW'"/>
			</xsl:when>
			<xsl:when test="$input='HGM'">
				<xsl:copy-of select="'HGM'"/>
			</xsl:when>
			<xsl:when test="$input='HH'">
				<xsl:copy-of select="'HH'"/>
			</xsl:when>
			<xsl:when test="$input='HIU'">
				<xsl:copy-of select="'HIU'"/>
			</xsl:when>
			<xsl:when test="$input='HJ'">
				<xsl:copy-of select="'HJ'"/>
			</xsl:when>
			<xsl:when test="$input='HKM'">
				<xsl:copy-of select="'HKM'"/>
			</xsl:when>
			<xsl:when test="$input='HLT'">
				<xsl:copy-of select="'HLT'"/>
			</xsl:when>
			<xsl:when test="$input='HM'">
				<xsl:copy-of select="'HM'"/>
			</xsl:when>
			<xsl:when test="$input='HMQ'">
				<xsl:copy-of select="'HMQ'"/>
			</xsl:when>
			<xsl:when test="$input='HMT'">
				<xsl:copy-of select="'HMT'"/>
			</xsl:when>
			<xsl:when test="$input='HN'">
				<xsl:copy-of select="'HN'"/>
			</xsl:when>
			<xsl:when test="$input='HP'">
				<xsl:copy-of select="'HP'"/>
			</xsl:when>
			<xsl:when test="$input='HPA'">
				<xsl:copy-of select="'HPA'"/>
			</xsl:when>
			<xsl:when test="$input='HTZ'">
				<xsl:copy-of select="'HTZ'"/>
			</xsl:when>
			<xsl:when test="$input='HUR'">
				<xsl:copy-of select="'HUR'"/>
			</xsl:when>
			<xsl:when test="$input='IA'">
				<xsl:copy-of select="'IA'"/>
			</xsl:when>
			<xsl:when test="$input='IE'">
				<xsl:copy-of select="'IE'"/>
			</xsl:when>
			<xsl:when test="$input='INH'">
				<xsl:copy-of select="'INH'"/>
			</xsl:when>
			<xsl:when test="$input='INK'">
				<xsl:copy-of select="'INK'"/>
			</xsl:when>
			<xsl:when test="$input='INQ'">
				<xsl:copy-of select="'INQ'"/>
			</xsl:when>
			<xsl:when test="$input='ISD'">
				<xsl:copy-of select="'ISD'"/>
			</xsl:when>
			<xsl:when test="$input='IU'">
				<xsl:copy-of select="'IU'"/>
			</xsl:when>
			<xsl:when test="$input='IV'">
				<xsl:copy-of select="'IV'"/>
			</xsl:when>
			<xsl:when test="$input='J10'">
				<xsl:copy-of select="'J10'"/>
			</xsl:when>
			<xsl:when test="$input='J12'">
				<xsl:copy-of select="'J12'"/>
			</xsl:when>
			<xsl:when test="$input='J13'">
				<xsl:copy-of select="'J13'"/>
			</xsl:when>
			<xsl:when test="$input='J14'">
				<xsl:copy-of select="'J14'"/>
			</xsl:when>
			<xsl:when test="$input='J15'">
				<xsl:copy-of select="'J15'"/>
			</xsl:when>
			<xsl:when test="$input='J16'">
				<xsl:copy-of select="'J16'"/>
			</xsl:when>
			<xsl:when test="$input='J17'">
				<xsl:copy-of select="'J17'"/>
			</xsl:when>
			<xsl:when test="$input='J18'">
				<xsl:copy-of select="'J18'"/>
			</xsl:when>
			<xsl:when test="$input='J19'">
				<xsl:copy-of select="'J19'"/>
			</xsl:when>
			<xsl:when test="$input='J2'">
				<xsl:copy-of select="'J2'"/>
			</xsl:when>
			<xsl:when test="$input='J20'">
				<xsl:copy-of select="'J20'"/>
			</xsl:when>
			<xsl:when test="$input='J21'">
				<xsl:copy-of select="'J21'"/>
			</xsl:when>
			<xsl:when test="$input='J22'">
				<xsl:copy-of select="'J22'"/>
			</xsl:when>
			<xsl:when test="$input='J23'">
				<xsl:copy-of select="'J23'"/>
			</xsl:when>
			<xsl:when test="$input='J24'">
				<xsl:copy-of select="'J24'"/>
			</xsl:when>
			<xsl:when test="$input='J25'">
				<xsl:copy-of select="'J25'"/>
			</xsl:when>
			<xsl:when test="$input='J26'">
				<xsl:copy-of select="'J26'"/>
			</xsl:when>
			<xsl:when test="$input='J27'">
				<xsl:copy-of select="'J27'"/>
			</xsl:when>
			<xsl:when test="$input='J28'">
				<xsl:copy-of select="'J28'"/>
			</xsl:when>
			<xsl:when test="$input='J29'">
				<xsl:copy-of select="'J29'"/>
			</xsl:when>
			<xsl:when test="$input='J30'">
				<xsl:copy-of select="'J30'"/>
			</xsl:when>
			<xsl:when test="$input='J31'">
				<xsl:copy-of select="'J31'"/>
			</xsl:when>
			<xsl:when test="$input='J32'">
				<xsl:copy-of select="'J32'"/>
			</xsl:when>
			<xsl:when test="$input='J33'">
				<xsl:copy-of select="'J33'"/>
			</xsl:when>
			<xsl:when test="$input='J34'">
				<xsl:copy-of select="'J34'"/>
			</xsl:when>
			<xsl:when test="$input='J35'">
				<xsl:copy-of select="'J35'"/>
			</xsl:when>
			<xsl:when test="$input='J36'">
				<xsl:copy-of select="'J36'"/>
			</xsl:when>
			<xsl:when test="$input='J38'">
				<xsl:copy-of select="'J38'"/>
			</xsl:when>
			<xsl:when test="$input='J39'">
				<xsl:copy-of select="'J39'"/>
			</xsl:when>
			<xsl:when test="$input='J40'">
				<xsl:copy-of select="'J40'"/>
			</xsl:when>
			<xsl:when test="$input='J41'">
				<xsl:copy-of select="'J41'"/>
			</xsl:when>
			<xsl:when test="$input='J42'">
				<xsl:copy-of select="'J42'"/>
			</xsl:when>
			<xsl:when test="$input='J43'">
				<xsl:copy-of select="'J43'"/>
			</xsl:when>
			<xsl:when test="$input='J44'">
				<xsl:copy-of select="'J44'"/>
			</xsl:when>
			<xsl:when test="$input='J45'">
				<xsl:copy-of select="'J45'"/>
			</xsl:when>
			<xsl:when test="$input='J46'">
				<xsl:copy-of select="'J46'"/>
			</xsl:when>
			<xsl:when test="$input='J47'">
				<xsl:copy-of select="'J47'"/>
			</xsl:when>
			<xsl:when test="$input='J48'">
				<xsl:copy-of select="'J48'"/>
			</xsl:when>
			<xsl:when test="$input='J49'">
				<xsl:copy-of select="'J49'"/>
			</xsl:when>
			<xsl:when test="$input='J50'">
				<xsl:copy-of select="'J50'"/>
			</xsl:when>
			<xsl:when test="$input='J51'">
				<xsl:copy-of select="'J51'"/>
			</xsl:when>
			<xsl:when test="$input='J52'">
				<xsl:copy-of select="'J52'"/>
			</xsl:when>
			<xsl:when test="$input='J53'">
				<xsl:copy-of select="'J53'"/>
			</xsl:when>
			<xsl:when test="$input='J54'">
				<xsl:copy-of select="'J54'"/>
			</xsl:when>
			<xsl:when test="$input='J55'">
				<xsl:copy-of select="'J55'"/>
			</xsl:when>
			<xsl:when test="$input='J56'">
				<xsl:copy-of select="'J56'"/>
			</xsl:when>
			<xsl:when test="$input='J57'">
				<xsl:copy-of select="'J57'"/>
			</xsl:when>
			<xsl:when test="$input='J58'">
				<xsl:copy-of select="'J58'"/>
			</xsl:when>
			<xsl:when test="$input='J59'">
				<xsl:copy-of select="'J59'"/>
			</xsl:when>
			<xsl:when test="$input='J60'">
				<xsl:copy-of select="'J60'"/>
			</xsl:when>
			<xsl:when test="$input='J61'">
				<xsl:copy-of select="'J61'"/>
			</xsl:when>
			<xsl:when test="$input='J62'">
				<xsl:copy-of select="'J62'"/>
			</xsl:when>
			<xsl:when test="$input='J63'">
				<xsl:copy-of select="'J63'"/>
			</xsl:when>
			<xsl:when test="$input='J64'">
				<xsl:copy-of select="'J64'"/>
			</xsl:when>
			<xsl:when test="$input='J65'">
				<xsl:copy-of select="'J65'"/>
			</xsl:when>
			<xsl:when test="$input='J66'">
				<xsl:copy-of select="'J66'"/>
			</xsl:when>
			<xsl:when test="$input='J67'">
				<xsl:copy-of select="'J67'"/>
			</xsl:when>
			<xsl:when test="$input='J68'">
				<xsl:copy-of select="'J68'"/>
			</xsl:when>
			<xsl:when test="$input='J69'">
				<xsl:copy-of select="'J69'"/>
			</xsl:when>
			<xsl:when test="$input='J70'">
				<xsl:copy-of select="'J70'"/>
			</xsl:when>
			<xsl:when test="$input='J71'">
				<xsl:copy-of select="'J71'"/>
			</xsl:when>
			<xsl:when test="$input='J72'">
				<xsl:copy-of select="'J72'"/>
			</xsl:when>
			<xsl:when test="$input='J73'">
				<xsl:copy-of select="'J73'"/>
			</xsl:when>
			<xsl:when test="$input='J74'">
				<xsl:copy-of select="'J74'"/>
			</xsl:when>
			<xsl:when test="$input='J75'">
				<xsl:copy-of select="'J75'"/>
			</xsl:when>
			<xsl:when test="$input='J76'">
				<xsl:copy-of select="'J76'"/>
			</xsl:when>
			<xsl:when test="$input='J78'">
				<xsl:copy-of select="'J78'"/>
			</xsl:when>
			<xsl:when test="$input='J79'">
				<xsl:copy-of select="'J79'"/>
			</xsl:when>
			<xsl:when test="$input='J81'">
				<xsl:copy-of select="'J81'"/>
			</xsl:when>
			<xsl:when test="$input='J82'">
				<xsl:copy-of select="'J82'"/>
			</xsl:when>
			<xsl:when test="$input='J83'">
				<xsl:copy-of select="'J83'"/>
			</xsl:when>
			<xsl:when test="$input='J84'">
				<xsl:copy-of select="'J84'"/>
			</xsl:when>
			<xsl:when test="$input='J85'">
				<xsl:copy-of select="'J85'"/>
			</xsl:when>
			<xsl:when test="$input='J87'">
				<xsl:copy-of select="'J87'"/>
			</xsl:when>
			<xsl:when test="$input='J89'">
				<xsl:copy-of select="'J89'"/>
			</xsl:when>
			<xsl:when test="$input='J90'">
				<xsl:copy-of select="'J90'"/>
			</xsl:when>
			<xsl:when test="$input='J91'">
				<xsl:copy-of select="'J91'"/>
			</xsl:when>
			<xsl:when test="$input='J92'">
				<xsl:copy-of select="'J92'"/>
			</xsl:when>
			<xsl:when test="$input='J93'">
				<xsl:copy-of select="'J93'"/>
			</xsl:when>
			<xsl:when test="$input='J94'">
				<xsl:copy-of select="'J94'"/>
			</xsl:when>
			<xsl:when test="$input='J95'">
				<xsl:copy-of select="'J95'"/>
			</xsl:when>
			<xsl:when test="$input='J96'">
				<xsl:copy-of select="'J96'"/>
			</xsl:when>
			<xsl:when test="$input='J97'">
				<xsl:copy-of select="'J97'"/>
			</xsl:when>
			<xsl:when test="$input='J98'">
				<xsl:copy-of select="'J98'"/>
			</xsl:when>
			<xsl:when test="$input='J99'">
				<xsl:copy-of select="'J99'"/>
			</xsl:when>
			<xsl:when test="$input='JE'">
				<xsl:copy-of select="'JE'"/>
			</xsl:when>
			<xsl:when test="$input='JK'">
				<xsl:copy-of select="'JK'"/>
			</xsl:when>
			<xsl:when test="$input='JM'">
				<xsl:copy-of select="'JM'"/>
			</xsl:when>
			<xsl:when test="$input='JNT'">
				<xsl:copy-of select="'JNT'"/>
			</xsl:when>
			<xsl:when test="$input='JOU'">
				<xsl:copy-of select="'JOU'"/>
			</xsl:when>
			<xsl:when test="$input='JPS'">
				<xsl:copy-of select="'JPS'"/>
			</xsl:when>
			<xsl:when test="$input='JWL'">
				<xsl:copy-of select="'JWL'"/>
			</xsl:when>
			<xsl:when test="$input='K1'">
				<xsl:copy-of select="'K1'"/>
			</xsl:when>
			<xsl:when test="$input='K10'">
				<xsl:copy-of select="'K10'"/>
			</xsl:when>
			<xsl:when test="$input='K11'">
				<xsl:copy-of select="'K11'"/>
			</xsl:when>
			<xsl:when test="$input='K12'">
				<xsl:copy-of select="'K12'"/>
			</xsl:when>
			<xsl:when test="$input='K13'">
				<xsl:copy-of select="'K13'"/>
			</xsl:when>
			<xsl:when test="$input='K14'">
				<xsl:copy-of select="'K14'"/>
			</xsl:when>
			<xsl:when test="$input='K15'">
				<xsl:copy-of select="'K15'"/>
			</xsl:when>
			<xsl:when test="$input='K16'">
				<xsl:copy-of select="'K16'"/>
			</xsl:when>
			<xsl:when test="$input='K17'">
				<xsl:copy-of select="'K17'"/>
			</xsl:when>
			<xsl:when test="$input='K18'">
				<xsl:copy-of select="'K18'"/>
			</xsl:when>
			<xsl:when test="$input='K19'">
				<xsl:copy-of select="'K19'"/>
			</xsl:when>
			<xsl:when test="$input='K2'">
				<xsl:copy-of select="'K2'"/>
			</xsl:when>
			<xsl:when test="$input='K20'">
				<xsl:copy-of select="'K20'"/>
			</xsl:when>
			<xsl:when test="$input='K21'">
				<xsl:copy-of select="'K21'"/>
			</xsl:when>
			<xsl:when test="$input='K22'">
				<xsl:copy-of select="'K22'"/>
			</xsl:when>
			<xsl:when test="$input='K23'">
				<xsl:copy-of select="'K23'"/>
			</xsl:when>
			<xsl:when test="$input='K24'">
				<xsl:copy-of select="'K24'"/>
			</xsl:when>
			<xsl:when test="$input='K25'">
				<xsl:copy-of select="'K25'"/>
			</xsl:when>
			<xsl:when test="$input='K26'">
				<xsl:copy-of select="'K26'"/>
			</xsl:when>
			<xsl:when test="$input='K27'">
				<xsl:copy-of select="'K27'"/>
			</xsl:when>
			<xsl:when test="$input='K28'">
				<xsl:copy-of select="'K28'"/>
			</xsl:when>
			<xsl:when test="$input='K3'">
				<xsl:copy-of select="'K3'"/>
			</xsl:when>
			<xsl:when test="$input='K30'">
				<xsl:copy-of select="'K30'"/>
			</xsl:when>
			<xsl:when test="$input='K31'">
				<xsl:copy-of select="'K31'"/>
			</xsl:when>
			<xsl:when test="$input='K32'">
				<xsl:copy-of select="'K32'"/>
			</xsl:when>
			<xsl:when test="$input='K33'">
				<xsl:copy-of select="'K33'"/>
			</xsl:when>
			<xsl:when test="$input='K34'">
				<xsl:copy-of select="'K34'"/>
			</xsl:when>
			<xsl:when test="$input='K35'">
				<xsl:copy-of select="'K35'"/>
			</xsl:when>
			<xsl:when test="$input='K36'">
				<xsl:copy-of select="'K36'"/>
			</xsl:when>
			<xsl:when test="$input='K37'">
				<xsl:copy-of select="'K37'"/>
			</xsl:when>
			<xsl:when test="$input='K38'">
				<xsl:copy-of select="'K38'"/>
			</xsl:when>
			<xsl:when test="$input='K39'">
				<xsl:copy-of select="'K39'"/>
			</xsl:when>
			<xsl:when test="$input='K40'">
				<xsl:copy-of select="'K40'"/>
			</xsl:when>
			<xsl:when test="$input='K41'">
				<xsl:copy-of select="'K41'"/>
			</xsl:when>
			<xsl:when test="$input='K42'">
				<xsl:copy-of select="'K42'"/>
			</xsl:when>
			<xsl:when test="$input='K43'">
				<xsl:copy-of select="'K43'"/>
			</xsl:when>
			<xsl:when test="$input='K45'">
				<xsl:copy-of select="'K45'"/>
			</xsl:when>
			<xsl:when test="$input='K46'">
				<xsl:copy-of select="'K46'"/>
			</xsl:when>
			<xsl:when test="$input='K47'">
				<xsl:copy-of select="'K47'"/>
			</xsl:when>
			<xsl:when test="$input='K48'">
				<xsl:copy-of select="'K48'"/>
			</xsl:when>
			<xsl:when test="$input='K49'">
				<xsl:copy-of select="'K49'"/>
			</xsl:when>
			<xsl:when test="$input='K5'">
				<xsl:copy-of select="'K5'"/>
			</xsl:when>
			<xsl:when test="$input='K50'">
				<xsl:copy-of select="'K50'"/>
			</xsl:when>
			<xsl:when test="$input='K51'">
				<xsl:copy-of select="'K51'"/>
			</xsl:when>
			<xsl:when test="$input='K52'">
				<xsl:copy-of select="'K52'"/>
			</xsl:when>
			<xsl:when test="$input='K53'">
				<xsl:copy-of select="'K53'"/>
			</xsl:when>
			<xsl:when test="$input='K54'">
				<xsl:copy-of select="'K54'"/>
			</xsl:when>
			<xsl:when test="$input='K55'">
				<xsl:copy-of select="'K55'"/>
			</xsl:when>
			<xsl:when test="$input='K58'">
				<xsl:copy-of select="'K58'"/>
			</xsl:when>
			<xsl:when test="$input='K59'">
				<xsl:copy-of select="'K59'"/>
			</xsl:when>
			<xsl:when test="$input='K6'">
				<xsl:copy-of select="'K6'"/>
			</xsl:when>
			<xsl:when test="$input='K60'">
				<xsl:copy-of select="'K60'"/>
			</xsl:when>
			<xsl:when test="$input='K61'">
				<xsl:copy-of select="'K61'"/>
			</xsl:when>
			<xsl:when test="$input='K62'">
				<xsl:copy-of select="'K62'"/>
			</xsl:when>
			<xsl:when test="$input='K63'">
				<xsl:copy-of select="'K63'"/>
			</xsl:when>
			<xsl:when test="$input='K64'">
				<xsl:copy-of select="'K64'"/>
			</xsl:when>
			<xsl:when test="$input='K65'">
				<xsl:copy-of select="'K65'"/>
			</xsl:when>
			<xsl:when test="$input='K66'">
				<xsl:copy-of select="'K66'"/>
			</xsl:when>
			<xsl:when test="$input='K67'">
				<xsl:copy-of select="'K67'"/>
			</xsl:when>
			<xsl:when test="$input='K68'">
				<xsl:copy-of select="'K68'"/>
			</xsl:when>
			<xsl:when test="$input='K69'">
				<xsl:copy-of select="'K69'"/>
			</xsl:when>
			<xsl:when test="$input='K70'">
				<xsl:copy-of select="'K70'"/>
			</xsl:when>
			<xsl:when test="$input='K71'">
				<xsl:copy-of select="'K71'"/>
			</xsl:when>
			<xsl:when test="$input='K73'">
				<xsl:copy-of select="'K73'"/>
			</xsl:when>
			<xsl:when test="$input='K74'">
				<xsl:copy-of select="'K74'"/>
			</xsl:when>
			<xsl:when test="$input='K75'">
				<xsl:copy-of select="'K75'"/>
			</xsl:when>
			<xsl:when test="$input='K76'">
				<xsl:copy-of select="'K76'"/>
			</xsl:when>
			<xsl:when test="$input='K77'">
				<xsl:copy-of select="'K77'"/>
			</xsl:when>
			<xsl:when test="$input='K78'">
				<xsl:copy-of select="'K78'"/>
			</xsl:when>
			<xsl:when test="$input='K79'">
				<xsl:copy-of select="'K79'"/>
			</xsl:when>
			<xsl:when test="$input='K80'">
				<xsl:copy-of select="'K80'"/>
			</xsl:when>
			<xsl:when test="$input='K81'">
				<xsl:copy-of select="'K81'"/>
			</xsl:when>
			<xsl:when test="$input='K82'">
				<xsl:copy-of select="'K82'"/>
			</xsl:when>
			<xsl:when test="$input='K83'">
				<xsl:copy-of select="'K83'"/>
			</xsl:when>
			<xsl:when test="$input='K84'">
				<xsl:copy-of select="'K84'"/>
			</xsl:when>
			<xsl:when test="$input='K85'">
				<xsl:copy-of select="'K85'"/>
			</xsl:when>
			<xsl:when test="$input='K86'">
				<xsl:copy-of select="'K86'"/>
			</xsl:when>
			<xsl:when test="$input='K87'">
				<xsl:copy-of select="'K87'"/>
			</xsl:when>
			<xsl:when test="$input='K88'">
				<xsl:copy-of select="'K88'"/>
			</xsl:when>
			<xsl:when test="$input='K89'">
				<xsl:copy-of select="'K89'"/>
			</xsl:when>
			<xsl:when test="$input='K90'">
				<xsl:copy-of select="'K90'"/>
			</xsl:when>
			<xsl:when test="$input='K91'">
				<xsl:copy-of select="'K91'"/>
			</xsl:when>
			<xsl:when test="$input='K92'">
				<xsl:copy-of select="'K92'"/>
			</xsl:when>
			<xsl:when test="$input='K93'">
				<xsl:copy-of select="'K93'"/>
			</xsl:when>
			<xsl:when test="$input='K94'">
				<xsl:copy-of select="'K94'"/>
			</xsl:when>
			<xsl:when test="$input='K95'">
				<xsl:copy-of select="'K95'"/>
			</xsl:when>
			<xsl:when test="$input='K96'">
				<xsl:copy-of select="'K96'"/>
			</xsl:when>
			<xsl:when test="$input='K97'">
				<xsl:copy-of select="'K97'"/>
			</xsl:when>
			<xsl:when test="$input='K98'">
				<xsl:copy-of select="'K98'"/>
			</xsl:when>
			<xsl:when test="$input='K99'">
				<xsl:copy-of select="'K99'"/>
			</xsl:when>
			<xsl:when test="$input='KA'">
				<xsl:copy-of select="'KA'"/>
			</xsl:when>
			<xsl:when test="$input='KAT'">
				<xsl:copy-of select="'KAT'"/>
			</xsl:when>
			<xsl:when test="$input='KB'">
				<xsl:copy-of select="'KB'"/>
			</xsl:when>
			<xsl:when test="$input='KBA'">
				<xsl:copy-of select="'KBA'"/>
			</xsl:when>
			<xsl:when test="$input='KCC'">
				<xsl:copy-of select="'KCC'"/>
			</xsl:when>
			<xsl:when test="$input='KDW'">
				<xsl:copy-of select="'KDW'"/>
			</xsl:when>
			<xsl:when test="$input='KEL'">
				<xsl:copy-of select="'KEL'"/>
			</xsl:when>
			<xsl:when test="$input='KGM'">
				<xsl:copy-of select="'KGM'"/>
			</xsl:when>
			<xsl:when test="$input='KGS'">
				<xsl:copy-of select="'KGS'"/>
			</xsl:when>
			<xsl:when test="$input='KHY'">
				<xsl:copy-of select="'KHY'"/>
			</xsl:when>
			<xsl:when test="$input='KHZ'">
				<xsl:copy-of select="'KHZ'"/>
			</xsl:when>
			<xsl:when test="$input='KI'">
				<xsl:copy-of select="'KI'"/>
			</xsl:when>
			<xsl:when test="$input='KIC'">
				<xsl:copy-of select="'KIC'"/>
			</xsl:when>
			<xsl:when test="$input='KIP'">
				<xsl:copy-of select="'KIP'"/>
			</xsl:when>
			<xsl:when test="$input='KJ'">
				<xsl:copy-of select="'KJ'"/>
			</xsl:when>
			<xsl:when test="$input='KJO'">
				<xsl:copy-of select="'KJO'"/>
			</xsl:when>
			<xsl:when test="$input='KL'">
				<xsl:copy-of select="'KL'"/>
			</xsl:when>
			<xsl:when test="$input='KLK'">
				<xsl:copy-of select="'KLK'"/>
			</xsl:when>
			<xsl:when test="$input='KMA'">
				<xsl:copy-of select="'KMA'"/>
			</xsl:when>
			<xsl:when test="$input='KMH'">
				<xsl:copy-of select="'KMH'"/>
			</xsl:when>
			<xsl:when test="$input='KMK'">
				<xsl:copy-of select="'KMK'"/>
			</xsl:when>
			<xsl:when test="$input='KMQ'">
				<xsl:copy-of select="'KMQ'"/>
			</xsl:when>
			<xsl:when test="$input='KMT'">
				<xsl:copy-of select="'KMT'"/>
			</xsl:when>
			<xsl:when test="$input='KNI'">
				<xsl:copy-of select="'KNI'"/>
			</xsl:when>
			<xsl:when test="$input='KNS'">
				<xsl:copy-of select="'KNS'"/>
			</xsl:when>
			<xsl:when test="$input='KNT'">
				<xsl:copy-of select="'KNT'"/>
			</xsl:when>
			<xsl:when test="$input='KO'">
				<xsl:copy-of select="'KO'"/>
			</xsl:when>
			<xsl:when test="$input='KPA'">
				<xsl:copy-of select="'KPA'"/>
			</xsl:when>
			<xsl:when test="$input='KPH'">
				<xsl:copy-of select="'KPH'"/>
			</xsl:when>
			<xsl:when test="$input='KPO'">
				<xsl:copy-of select="'KPO'"/>
			</xsl:when>
			<xsl:when test="$input='KPP'">
				<xsl:copy-of select="'KPP'"/>
			</xsl:when>
			<xsl:when test="$input='KR'">
				<xsl:copy-of select="'KR'"/>
			</xsl:when>
			<xsl:when test="$input='KSD'">
				<xsl:copy-of select="'KSD'"/>
			</xsl:when>
			<xsl:when test="$input='KSH'">
				<xsl:copy-of select="'KSH'"/>
			</xsl:when>
			<xsl:when test="$input='KT'">
				<xsl:copy-of select="'KT'"/>
			</xsl:when>
			<xsl:when test="$input='KTN'">
				<xsl:copy-of select="'KTN'"/>
			</xsl:when>
			<xsl:when test="$input='KUR'">
				<xsl:copy-of select="'KUR'"/>
			</xsl:when>
			<xsl:when test="$input='KVA'">
				<xsl:copy-of select="'KVA'"/>
			</xsl:when>
			<xsl:when test="$input='KVR'">
				<xsl:copy-of select="'KVR'"/>
			</xsl:when>
			<xsl:when test="$input='KVT'">
				<xsl:copy-of select="'KVT'"/>
			</xsl:when>
			<xsl:when test="$input='KW'">
				<xsl:copy-of select="'KW'"/>
			</xsl:when>
			<xsl:when test="$input='KWH'">
				<xsl:copy-of select="'KWH'"/>
			</xsl:when>
			<xsl:when test="$input='KWO'">
				<xsl:copy-of select="'KWO'"/>
			</xsl:when>
			<xsl:when test="$input='KWT'">
				<xsl:copy-of select="'KWT'"/>
			</xsl:when>
			<xsl:when test="$input='KX'">
				<xsl:copy-of select="'KX'"/>
			</xsl:when>
			<xsl:when test="$input='L10'">
				<xsl:copy-of select="'L10'"/>
			</xsl:when>
			<xsl:when test="$input='L11'">
				<xsl:copy-of select="'L11'"/>
			</xsl:when>
			<xsl:when test="$input='L12'">
				<xsl:copy-of select="'L12'"/>
			</xsl:when>
			<xsl:when test="$input='L13'">
				<xsl:copy-of select="'L13'"/>
			</xsl:when>
			<xsl:when test="$input='L14'">
				<xsl:copy-of select="'L14'"/>
			</xsl:when>
			<xsl:when test="$input='L15'">
				<xsl:copy-of select="'L15'"/>
			</xsl:when>
			<xsl:when test="$input='L16'">
				<xsl:copy-of select="'L16'"/>
			</xsl:when>
			<xsl:when test="$input='L17'">
				<xsl:copy-of select="'L17'"/>
			</xsl:when>
			<xsl:when test="$input='L18'">
				<xsl:copy-of select="'L18'"/>
			</xsl:when>
			<xsl:when test="$input='L19'">
				<xsl:copy-of select="'L19'"/>
			</xsl:when>
			<xsl:when test="$input='L2'">
				<xsl:copy-of select="'L2'"/>
			</xsl:when>
			<xsl:when test="$input='L20'">
				<xsl:copy-of select="'L20'"/>
			</xsl:when>
			<xsl:when test="$input='L21'">
				<xsl:copy-of select="'L21'"/>
			</xsl:when>
			<xsl:when test="$input='L23'">
				<xsl:copy-of select="'L23'"/>
			</xsl:when>
			<xsl:when test="$input='L24'">
				<xsl:copy-of select="'L24'"/>
			</xsl:when>
			<xsl:when test="$input='L25'">
				<xsl:copy-of select="'L25'"/>
			</xsl:when>
			<xsl:when test="$input='L26'">
				<xsl:copy-of select="'L26'"/>
			</xsl:when>
			<xsl:when test="$input='L27'">
				<xsl:copy-of select="'L27'"/>
			</xsl:when>
			<xsl:when test="$input='L28'">
				<xsl:copy-of select="'L28'"/>
			</xsl:when>
			<xsl:when test="$input='L29'">
				<xsl:copy-of select="'L29'"/>
			</xsl:when>
			<xsl:when test="$input='L30'">
				<xsl:copy-of select="'L30'"/>
			</xsl:when>
			<xsl:when test="$input='L31'">
				<xsl:copy-of select="'L31'"/>
			</xsl:when>
			<xsl:when test="$input='L32'">
				<xsl:copy-of select="'L32'"/>
			</xsl:when>
			<xsl:when test="$input='L33'">
				<xsl:copy-of select="'L33'"/>
			</xsl:when>
			<xsl:when test="$input='L34'">
				<xsl:copy-of select="'L34'"/>
			</xsl:when>
			<xsl:when test="$input='L35'">
				<xsl:copy-of select="'L35'"/>
			</xsl:when>
			<xsl:when test="$input='L36'">
				<xsl:copy-of select="'L36'"/>
			</xsl:when>
			<xsl:when test="$input='L37'">
				<xsl:copy-of select="'L37'"/>
			</xsl:when>
			<xsl:when test="$input='L38'">
				<xsl:copy-of select="'L38'"/>
			</xsl:when>
			<xsl:when test="$input='L39'">
				<xsl:copy-of select="'L39'"/>
			</xsl:when>
			<xsl:when test="$input='L40'">
				<xsl:copy-of select="'L40'"/>
			</xsl:when>
			<xsl:when test="$input='L41'">
				<xsl:copy-of select="'L41'"/>
			</xsl:when>
			<xsl:when test="$input='L42'">
				<xsl:copy-of select="'L42'"/>
			</xsl:when>
			<xsl:when test="$input='L43'">
				<xsl:copy-of select="'L43'"/>
			</xsl:when>
			<xsl:when test="$input='L44'">
				<xsl:copy-of select="'L44'"/>
			</xsl:when>
			<xsl:when test="$input='L45'">
				<xsl:copy-of select="'L45'"/>
			</xsl:when>
			<xsl:when test="$input='L46'">
				<xsl:copy-of select="'L46'"/>
			</xsl:when>
			<xsl:when test="$input='L47'">
				<xsl:copy-of select="'L47'"/>
			</xsl:when>
			<xsl:when test="$input='L48'">
				<xsl:copy-of select="'L48'"/>
			</xsl:when>
			<xsl:when test="$input='L49'">
				<xsl:copy-of select="'L49'"/>
			</xsl:when>
			<xsl:when test="$input='L50'">
				<xsl:copy-of select="'L50'"/>
			</xsl:when>
			<xsl:when test="$input='L51'">
				<xsl:copy-of select="'L51'"/>
			</xsl:when>
			<xsl:when test="$input='L52'">
				<xsl:copy-of select="'L52'"/>
			</xsl:when>
			<xsl:when test="$input='L53'">
				<xsl:copy-of select="'L53'"/>
			</xsl:when>
			<xsl:when test="$input='L54'">
				<xsl:copy-of select="'L54'"/>
			</xsl:when>
			<xsl:when test="$input='L55'">
				<xsl:copy-of select="'L55'"/>
			</xsl:when>
			<xsl:when test="$input='L56'">
				<xsl:copy-of select="'L56'"/>
			</xsl:when>
			<xsl:when test="$input='L57'">
				<xsl:copy-of select="'L57'"/>
			</xsl:when>
			<xsl:when test="$input='L58'">
				<xsl:copy-of select="'L58'"/>
			</xsl:when>
			<xsl:when test="$input='L59'">
				<xsl:copy-of select="'L59'"/>
			</xsl:when>
			<xsl:when test="$input='L60'">
				<xsl:copy-of select="'L60'"/>
			</xsl:when>
			<xsl:when test="$input='L63'">
				<xsl:copy-of select="'L63'"/>
			</xsl:when>
			<xsl:when test="$input='L64'">
				<xsl:copy-of select="'L64'"/>
			</xsl:when>
			<xsl:when test="$input='L65'">
				<xsl:copy-of select="'L65'"/>
			</xsl:when>
			<xsl:when test="$input='L66'">
				<xsl:copy-of select="'L66'"/>
			</xsl:when>
			<xsl:when test="$input='L67'">
				<xsl:copy-of select="'L67'"/>
			</xsl:when>
			<xsl:when test="$input='L68'">
				<xsl:copy-of select="'L68'"/>
			</xsl:when>
			<xsl:when test="$input='L69'">
				<xsl:copy-of select="'L69'"/>
			</xsl:when>
			<xsl:when test="$input='L70'">
				<xsl:copy-of select="'L70'"/>
			</xsl:when>
			<xsl:when test="$input='L71'">
				<xsl:copy-of select="'L71'"/>
			</xsl:when>
			<xsl:when test="$input='L72'">
				<xsl:copy-of select="'L72'"/>
			</xsl:when>
			<xsl:when test="$input='L73'">
				<xsl:copy-of select="'L73'"/>
			</xsl:when>
			<xsl:when test="$input='L74'">
				<xsl:copy-of select="'L74'"/>
			</xsl:when>
			<xsl:when test="$input='L75'">
				<xsl:copy-of select="'L75'"/>
			</xsl:when>
			<xsl:when test="$input='L76'">
				<xsl:copy-of select="'L76'"/>
			</xsl:when>
			<xsl:when test="$input='L77'">
				<xsl:copy-of select="'L77'"/>
			</xsl:when>
			<xsl:when test="$input='L78'">
				<xsl:copy-of select="'L78'"/>
			</xsl:when>
			<xsl:when test="$input='L79'">
				<xsl:copy-of select="'L79'"/>
			</xsl:when>
			<xsl:when test="$input='L80'">
				<xsl:copy-of select="'L80'"/>
			</xsl:when>
			<xsl:when test="$input='L81'">
				<xsl:copy-of select="'L81'"/>
			</xsl:when>
			<xsl:when test="$input='L82'">
				<xsl:copy-of select="'L82'"/>
			</xsl:when>
			<xsl:when test="$input='L83'">
				<xsl:copy-of select="'L83'"/>
			</xsl:when>
			<xsl:when test="$input='L84'">
				<xsl:copy-of select="'L84'"/>
			</xsl:when>
			<xsl:when test="$input='L85'">
				<xsl:copy-of select="'L85'"/>
			</xsl:when>
			<xsl:when test="$input='L86'">
				<xsl:copy-of select="'L86'"/>
			</xsl:when>
			<xsl:when test="$input='L87'">
				<xsl:copy-of select="'L87'"/>
			</xsl:when>
			<xsl:when test="$input='L88'">
				<xsl:copy-of select="'L88'"/>
			</xsl:when>
			<xsl:when test="$input='L89'">
				<xsl:copy-of select="'L89'"/>
			</xsl:when>
			<xsl:when test="$input='L90'">
				<xsl:copy-of select="'L90'"/>
			</xsl:when>
			<xsl:when test="$input='L91'">
				<xsl:copy-of select="'L91'"/>
			</xsl:when>
			<xsl:when test="$input='L92'">
				<xsl:copy-of select="'L92'"/>
			</xsl:when>
			<xsl:when test="$input='L93'">
				<xsl:copy-of select="'L93'"/>
			</xsl:when>
			<xsl:when test="$input='L94'">
				<xsl:copy-of select="'L94'"/>
			</xsl:when>
			<xsl:when test="$input='L95'">
				<xsl:copy-of select="'L95'"/>
			</xsl:when>
			<xsl:when test="$input='L96'">
				<xsl:copy-of select="'L96'"/>
			</xsl:when>
			<xsl:when test="$input='L98'">
				<xsl:copy-of select="'L98'"/>
			</xsl:when>
			<xsl:when test="$input='L99'">
				<xsl:copy-of select="'L99'"/>
			</xsl:when>
			<xsl:when test="$input='LA'">
				<xsl:copy-of select="'LA'"/>
			</xsl:when>
			<xsl:when test="$input='LAC'">
				<xsl:copy-of select="'LAC'"/>
			</xsl:when>
			<xsl:when test="$input='LBR'">
				<xsl:copy-of select="'LBR'"/>
			</xsl:when>
			<xsl:when test="$input='LBT'">
				<xsl:copy-of select="'LBT'"/>
			</xsl:when>
			<xsl:when test="$input='LD'">
				<xsl:copy-of select="'LD'"/>
			</xsl:when>
			<xsl:when test="$input='LEF'">
				<xsl:copy-of select="'LEF'"/>
			</xsl:when>
			<xsl:when test="$input='LF'">
				<xsl:copy-of select="'LF'"/>
			</xsl:when>
			<xsl:when test="$input='LH'">
				<xsl:copy-of select="'LH'"/>
			</xsl:when>
			<xsl:when test="$input='LK'">
				<xsl:copy-of select="'LK'"/>
			</xsl:when>
			<xsl:when test="$input='LM'">
				<xsl:copy-of select="'LM'"/>
			</xsl:when>
			<xsl:when test="$input='LN'">
				<xsl:copy-of select="'LN'"/>
			</xsl:when>
			<xsl:when test="$input='LO'">
				<xsl:copy-of select="'LO'"/>
			</xsl:when>
			<xsl:when test="$input='LP'">
				<xsl:copy-of select="'LP'"/>
			</xsl:when>
			<xsl:when test="$input='LPA'">
				<xsl:copy-of select="'LPA'"/>
			</xsl:when>
			<xsl:when test="$input='LR'">
				<xsl:copy-of select="'LR'"/>
			</xsl:when>
			<xsl:when test="$input='LS'">
				<xsl:copy-of select="'LS'"/>
			</xsl:when>
			<xsl:when test="$input='LTN'">
				<xsl:copy-of select="'LTN'"/>
			</xsl:when>
			<xsl:when test="$input='LTR'">
				<xsl:copy-of select="'LTR'"/>
			</xsl:when>
			<xsl:when test="$input='LUB'">
				<xsl:copy-of select="'LUB'"/>
			</xsl:when>
			<xsl:when test="$input='LUM'">
				<xsl:copy-of select="'LUM'"/>
			</xsl:when>
			<xsl:when test="$input='LUX'">
				<xsl:copy-of select="'LUX'"/>
			</xsl:when>
			<xsl:when test="$input='LY'">
				<xsl:copy-of select="'LY'"/>
			</xsl:when>
			<xsl:when test="$input='M1'">
				<xsl:copy-of select="'M1'"/>
			</xsl:when>
			<xsl:when test="$input='M10'">
				<xsl:copy-of select="'M10'"/>
			</xsl:when>
			<xsl:when test="$input='M11'">
				<xsl:copy-of select="'M11'"/>
			</xsl:when>
			<xsl:when test="$input='M12'">
				<xsl:copy-of select="'M12'"/>
			</xsl:when>
			<xsl:when test="$input='M13'">
				<xsl:copy-of select="'M13'"/>
			</xsl:when>
			<xsl:when test="$input='M14'">
				<xsl:copy-of select="'M14'"/>
			</xsl:when>
			<xsl:when test="$input='M15'">
				<xsl:copy-of select="'M15'"/>
			</xsl:when>
			<xsl:when test="$input='M16'">
				<xsl:copy-of select="'M16'"/>
			</xsl:when>
			<xsl:when test="$input='M17'">
				<xsl:copy-of select="'M17'"/>
			</xsl:when>
			<xsl:when test="$input='M18'">
				<xsl:copy-of select="'M18'"/>
			</xsl:when>
			<xsl:when test="$input='M19'">
				<xsl:copy-of select="'M19'"/>
			</xsl:when>
			<xsl:when test="$input='M20'">
				<xsl:copy-of select="'M20'"/>
			</xsl:when>
			<xsl:when test="$input='M21'">
				<xsl:copy-of select="'M21'"/>
			</xsl:when>
			<xsl:when test="$input='M22'">
				<xsl:copy-of select="'M22'"/>
			</xsl:when>
			<xsl:when test="$input='M23'">
				<xsl:copy-of select="'M23'"/>
			</xsl:when>
			<xsl:when test="$input='M24'">
				<xsl:copy-of select="'M24'"/>
			</xsl:when>
			<xsl:when test="$input='M25'">
				<xsl:copy-of select="'M25'"/>
			</xsl:when>
			<xsl:when test="$input='M26'">
				<xsl:copy-of select="'M26'"/>
			</xsl:when>
			<xsl:when test="$input='M27'">
				<xsl:copy-of select="'M27'"/>
			</xsl:when>
			<xsl:when test="$input='M29'">
				<xsl:copy-of select="'M29'"/>
			</xsl:when>
			<xsl:when test="$input='M30'">
				<xsl:copy-of select="'M30'"/>
			</xsl:when>
			<xsl:when test="$input='M31'">
				<xsl:copy-of select="'M31'"/>
			</xsl:when>
			<xsl:when test="$input='M32'">
				<xsl:copy-of select="'M32'"/>
			</xsl:when>
			<xsl:when test="$input='M33'">
				<xsl:copy-of select="'M33'"/>
			</xsl:when>
			<xsl:when test="$input='M34'">
				<xsl:copy-of select="'M34'"/>
			</xsl:when>
			<xsl:when test="$input='M35'">
				<xsl:copy-of select="'M35'"/>
			</xsl:when>
			<xsl:when test="$input='M36'">
				<xsl:copy-of select="'M36'"/>
			</xsl:when>
			<xsl:when test="$input='M37'">
				<xsl:copy-of select="'M37'"/>
			</xsl:when>
			<xsl:when test="$input='M4'">
				<xsl:copy-of select="'M4'"/>
			</xsl:when>
			<xsl:when test="$input='M5'">
				<xsl:copy-of select="'M5'"/>
			</xsl:when>
			<xsl:when test="$input='M7'">
				<xsl:copy-of select="'M7'"/>
			</xsl:when>
			<xsl:when test="$input='M9'">
				<xsl:copy-of select="'M9'"/>
			</xsl:when>
			<xsl:when test="$input='MAH'">
				<xsl:copy-of select="'MAH'"/>
			</xsl:when>
			<xsl:when test="$input='MAL'">
				<xsl:copy-of select="'MAL'"/>
			</xsl:when>
			<xsl:when test="$input='MAM'">
				<xsl:copy-of select="'MAM'"/>
			</xsl:when>
			<xsl:when test="$input='MAR'">
				<xsl:copy-of select="'MAR'"/>
			</xsl:when>
			<xsl:when test="$input='MAW'">
				<xsl:copy-of select="'MAW'"/>
			</xsl:when>
			<xsl:when test="$input='MBE'">
				<xsl:copy-of select="'MBE'"/>
			</xsl:when>
			<xsl:when test="$input='MBF'">
				<xsl:copy-of select="'MBF'"/>
			</xsl:when>
			<xsl:when test="$input='MBR'">
				<xsl:copy-of select="'MBR'"/>
			</xsl:when>
			<xsl:when test="$input='MC'">
				<xsl:copy-of select="'MC'"/>
			</xsl:when>
			<xsl:when test="$input='MCU'">
				<xsl:copy-of select="'MCU'"/>
			</xsl:when>
			<xsl:when test="$input='MD'">
				<xsl:copy-of select="'MD'"/>
			</xsl:when>
			<xsl:when test="$input='MGM'">
				<xsl:copy-of select="'MGM'"/>
			</xsl:when>
			<xsl:when test="$input='MHZ'">
				<xsl:copy-of select="'MHZ'"/>
			</xsl:when>
			<xsl:when test="$input='MIK'">
				<xsl:copy-of select="'MIK'"/>
			</xsl:when>
			<xsl:when test="$input='MIL'">
				<xsl:copy-of select="'MIL'"/>
			</xsl:when>
			<xsl:when test="$input='MIN'">
				<xsl:copy-of select="'MIN'"/>
			</xsl:when>
			<xsl:when test="$input='MIO'">
				<xsl:copy-of select="'MIO'"/>
			</xsl:when>
			<xsl:when test="$input='MIU'">
				<xsl:copy-of select="'MIU'"/>
			</xsl:when>
			<xsl:when test="$input='MLD'">
				<xsl:copy-of select="'MLD'"/>
			</xsl:when>
			<xsl:when test="$input='MLT'">
				<xsl:copy-of select="'MLT'"/>
			</xsl:when>
			<xsl:when test="$input='MMK'">
				<xsl:copy-of select="'MMK'"/>
			</xsl:when>
			<xsl:when test="$input='MMQ'">
				<xsl:copy-of select="'MMQ'"/>
			</xsl:when>
			<xsl:when test="$input='MMT'">
				<xsl:copy-of select="'MMT'"/>
			</xsl:when>
			<xsl:when test="$input='MND'">
				<xsl:copy-of select="'MND'"/>
			</xsl:when>
			<xsl:when test="$input='MON'">
				<xsl:copy-of select="'MON'"/>
			</xsl:when>
			<xsl:when test="$input='MPA'">
				<xsl:copy-of select="'MPA'"/>
			</xsl:when>
			<xsl:when test="$input='MQH'">
				<xsl:copy-of select="'MQH'"/>
			</xsl:when>
			<xsl:when test="$input='MQS'">
				<xsl:copy-of select="'MQS'"/>
			</xsl:when>
			<xsl:when test="$input='MSK'">
				<xsl:copy-of select="'MSK'"/>
			</xsl:when>
			<xsl:when test="$input='MTK'">
				<xsl:copy-of select="'MTK'"/>
			</xsl:when>
			<xsl:when test="$input='MTQ'">
				<xsl:copy-of select="'MTQ'"/>
			</xsl:when>
			<xsl:when test="$input='MTR'">
				<xsl:copy-of select="'MTR'"/>
			</xsl:when>
			<xsl:when test="$input='MTS'">
				<xsl:copy-of select="'MTS'"/>
			</xsl:when>
			<xsl:when test="$input='MVA'">
				<xsl:copy-of select="'MVA'"/>
			</xsl:when>
			<xsl:when test="$input='MWH'">
				<xsl:copy-of select="'MWH'"/>
			</xsl:when>
			<xsl:when test="$input='N1'">
				<xsl:copy-of select="'N1'"/>
			</xsl:when>
			<xsl:when test="$input='N3'">
				<xsl:copy-of select="'N3'"/>
			</xsl:when>
			<xsl:when test="$input='NA'">
				<xsl:copy-of select="'NA'"/>
			</xsl:when>
			<xsl:when test="$input='NAR'">
				<xsl:copy-of select="'NAR'"/>
			</xsl:when>
			<xsl:when test="$input='NCL'">
				<xsl:copy-of select="'NCL'"/>
			</xsl:when>
			<xsl:when test="$input='NEW'">
				<xsl:copy-of select="'NEW'"/>
			</xsl:when>
			<xsl:when test="$input='NF'">
				<xsl:copy-of select="'NF'"/>
			</xsl:when>
			<xsl:when test="$input='NIL'">
				<xsl:copy-of select="'NIL'"/>
			</xsl:when>
			<xsl:when test="$input='NIU'">
				<xsl:copy-of select="'NIU'"/>
			</xsl:when>
			<xsl:when test="$input='NL'">
				<xsl:copy-of select="'NL'"/>
			</xsl:when>
			<xsl:when test="$input='NMI'">
				<xsl:copy-of select="'NMI'"/>
			</xsl:when>
			<xsl:when test="$input='NMP'">
				<xsl:copy-of select="'NMP'"/>
			</xsl:when>
			<xsl:when test="$input='NPR'">
				<xsl:copy-of select="'NPR'"/>
			</xsl:when>
			<xsl:when test="$input='NPT'">
				<xsl:copy-of select="'NPT'"/>
			</xsl:when>
			<xsl:when test="$input='NQ'">
				<xsl:copy-of select="'NQ'"/>
			</xsl:when>
			<xsl:when test="$input='NR'">
				<xsl:copy-of select="'NR'"/>
			</xsl:when>
			<xsl:when test="$input='NT'">
				<xsl:copy-of select="'NT'"/>
			</xsl:when>
			<xsl:when test="$input='NTT'">
				<xsl:copy-of select="'NTT'"/>
			</xsl:when>
			<xsl:when test="$input='NU'">
				<xsl:copy-of select="'NU'"/>
			</xsl:when>
			<xsl:when test="$input='NX'">
				<xsl:copy-of select="'NX'"/>
			</xsl:when>
			<xsl:when test="$input='OA'">
				<xsl:copy-of select="'OA'"/>
			</xsl:when>
			<xsl:when test="$input='ODE'">
				<xsl:copy-of select="'ODE'"/>
			</xsl:when>
			<xsl:when test="$input='OHM'">
				<xsl:copy-of select="'OHM'"/>
			</xsl:when>
			<xsl:when test="$input='ON'">
				<xsl:copy-of select="'ON'"/>
			</xsl:when>
			<xsl:when test="$input='ONZ'">
				<xsl:copy-of select="'ONZ'"/>
			</xsl:when>
			<xsl:when test="$input='OT'">
				<xsl:copy-of select="'OT'"/>
			</xsl:when>
			<xsl:when test="$input='OZ'">
				<xsl:copy-of select="'OZ'"/>
			</xsl:when>
			<xsl:when test="$input='OZA'">
				<xsl:copy-of select="'OZA'"/>
			</xsl:when>
			<xsl:when test="$input='OZI'">
				<xsl:copy-of select="'OZI'"/>
			</xsl:when>
			<xsl:when test="$input='P1'">
				<xsl:copy-of select="'P1'"/>
			</xsl:when>
			<xsl:when test="$input='P2'">
				<xsl:copy-of select="'P2'"/>
			</xsl:when>
			<xsl:when test="$input='P5'">
				<xsl:copy-of select="'P5'"/>
			</xsl:when>
			<xsl:when test="$input='PAL'">
				<xsl:copy-of select="'PAL'"/>
			</xsl:when>
			<xsl:when test="$input='PD'">
				<xsl:copy-of select="'PD'"/>
			</xsl:when>
			<xsl:when test="$input='PFL'">
				<xsl:copy-of select="'PFL'"/>
			</xsl:when>
			<xsl:when test="$input='PGL'">
				<xsl:copy-of select="'PGL'"/>
			</xsl:when>
			<xsl:when test="$input='PI'">
				<xsl:copy-of select="'PI'"/>
			</xsl:when>
			<xsl:when test="$input='PLA'">
				<xsl:copy-of select="'PLA'"/>
			</xsl:when>
			<xsl:when test="$input='PO'">
				<xsl:copy-of select="'PO'"/>
			</xsl:when>
			<xsl:when test="$input='PQ'">
				<xsl:copy-of select="'PQ'"/>
			</xsl:when>
			<xsl:when test="$input='PR'">
				<xsl:copy-of select="'PR'"/>
			</xsl:when>
			<xsl:when test="$input='PS'">
				<xsl:copy-of select="'PS'"/>
			</xsl:when>
			<xsl:when test="$input='PT'">
				<xsl:copy-of select="'PT'"/>
			</xsl:when>
			<xsl:when test="$input='PTD'">
				<xsl:copy-of select="'PTD'"/>
			</xsl:when>
			<xsl:when test="$input='PTI'">
				<xsl:copy-of select="'PTI'"/>
			</xsl:when>
			<xsl:when test="$input='PTL'">
				<xsl:copy-of select="'PTL'"/>
			</xsl:when>
			<xsl:when test="$input='Q3'">
				<xsl:copy-of select="'Q3'"/>
			</xsl:when>
			<xsl:when test="$input='QA'">
				<xsl:copy-of select="'QA'"/>
			</xsl:when>
			<xsl:when test="$input='QAN'">
				<xsl:copy-of select="'QAN'"/>
			</xsl:when>
			<xsl:when test="$input='QB'">
				<xsl:copy-of select="'QB'"/>
			</xsl:when>
			<xsl:when test="$input='QR'">
				<xsl:copy-of select="'QR'"/>
			</xsl:when>
			<xsl:when test="$input='QT'">
				<xsl:copy-of select="'QT'"/>
			</xsl:when>
			<xsl:when test="$input='QTD'">
				<xsl:copy-of select="'QTD'"/>
			</xsl:when>
			<xsl:when test="$input='QTI'">
				<xsl:copy-of select="'QTI'"/>
			</xsl:when>
			<xsl:when test="$input='QTL'">
				<xsl:copy-of select="'QTL'"/>
			</xsl:when>
			<xsl:when test="$input='QTR'">
				<xsl:copy-of select="'QTR'"/>
			</xsl:when>
			<xsl:when test="$input='R1'">
				<xsl:copy-of select="'R1'"/>
			</xsl:when>
			<xsl:when test="$input='R9'">
				<xsl:copy-of select="'R9'"/>
			</xsl:when>
			<xsl:when test="$input='RH'">
				<xsl:copy-of select="'RH'"/>
			</xsl:when>
			<xsl:when test="$input='RM'">
				<xsl:copy-of select="'RM'"/>
			</xsl:when>
			<xsl:when test="$input='RP'">
				<xsl:copy-of select="'RP'"/>
			</xsl:when>
			<xsl:when test="$input='RPM'">
				<xsl:copy-of select="'RPM'"/>
			</xsl:when>
			<xsl:when test="$input='RPS'">
				<xsl:copy-of select="'RPS'"/>
			</xsl:when>
			<xsl:when test="$input='RT'">
				<xsl:copy-of select="'RT'"/>
			</xsl:when>
			<xsl:when test="$input='S3'">
				<xsl:copy-of select="'S3'"/>
			</xsl:when>
			<xsl:when test="$input='S4'">
				<xsl:copy-of select="'S4'"/>
			</xsl:when>
			<xsl:when test="$input='SAN'">
				<xsl:copy-of select="'SAN'"/>
			</xsl:when>
			<xsl:when test="$input='SCO'">
				<xsl:copy-of select="'SCO'"/>
			</xsl:when>
			<xsl:when test="$input='SCR'">
				<xsl:copy-of select="'SCR'"/>
			</xsl:when>
			<xsl:when test="$input='SEC'">
				<xsl:copy-of select="'SEC'"/>
			</xsl:when>
			<xsl:when test="$input='SET'">
				<xsl:copy-of select="'SET'"/>
			</xsl:when>
			<xsl:when test="$input='SG'">
				<xsl:copy-of select="'SG'"/>
			</xsl:when>
			<xsl:when test="$input='SHT'">
				<xsl:copy-of select="'SHT'"/>
			</xsl:when>
			<xsl:when test="$input='SIE'">
				<xsl:copy-of select="'SIE'"/>
			</xsl:when>
			<xsl:when test="$input='SMI'">
				<xsl:copy-of select="'SMI'"/>
			</xsl:when>
			<xsl:when test="$input='SQ'">
				<xsl:copy-of select="'SQ'"/>
			</xsl:when>
			<xsl:when test="$input='SQR'">
				<xsl:copy-of select="'SQR'"/>
			</xsl:when>
			<xsl:when test="$input='SR'">
				<xsl:copy-of select="'SR'"/>
			</xsl:when>
			<xsl:when test="$input='STI'">
				<xsl:copy-of select="'STI'"/>
			</xsl:when>
			<xsl:when test="$input='STK'">
				<xsl:copy-of select="'STK'"/>
			</xsl:when>
			<xsl:when test="$input='STL'">
				<xsl:copy-of select="'STL'"/>
			</xsl:when>
			<xsl:when test="$input='STN'">
				<xsl:copy-of select="'STN'"/>
			</xsl:when>
			<xsl:when test="$input='SW'">
				<xsl:copy-of select="'SW'"/>
			</xsl:when>
			<xsl:when test="$input='SX'">
				<xsl:copy-of select="'SX'"/>
			</xsl:when>
			<xsl:when test="$input='T0'">
				<xsl:copy-of select="'T0'"/>
			</xsl:when>
			<xsl:when test="$input='T3'">
				<xsl:copy-of select="'T3'"/>
			</xsl:when>
			<xsl:when test="$input='TAH'">
				<xsl:copy-of select="'TAH'"/>
			</xsl:when>
			<xsl:when test="$input='TI'">
				<xsl:copy-of select="'TI'"/>
			</xsl:when>
			<xsl:when test="$input='TIC'">
				<xsl:copy-of select="'TIC'"/>
			</xsl:when>
			<xsl:when test="$input='TIP'">
				<xsl:copy-of select="'TIP'"/>
			</xsl:when>
			<xsl:when test="$input='TMS'">
				<xsl:copy-of select="'TMS'"/>
			</xsl:when>
			<xsl:when test="$input='TNE'">
				<xsl:copy-of select="'TNE'"/>
			</xsl:when>
			<xsl:when test="$input='TP'">
				<xsl:copy-of select="'TP'"/>
			</xsl:when>
			<xsl:when test="$input='TPR'">
				<xsl:copy-of select="'TPR'"/>
			</xsl:when>
			<xsl:when test="$input='TQD'">
				<xsl:copy-of select="'TQD'"/>
			</xsl:when>
			<xsl:when test="$input='TRL'">
				<xsl:copy-of select="'TRL'"/>
			</xsl:when>
			<xsl:when test="$input='U1'">
				<xsl:copy-of select="'U1'"/>
			</xsl:when>
			<xsl:when test="$input='U2'">
				<xsl:copy-of select="'U2'"/>
			</xsl:when>
			<xsl:when test="$input='UA'">
				<xsl:copy-of select="'UA'"/>
			</xsl:when>
			<xsl:when test="$input='UB'">
				<xsl:copy-of select="'UB'"/>
			</xsl:when>
			<xsl:when test="$input='UC'">
				<xsl:copy-of select="'UC'"/>
			</xsl:when>
			<xsl:when test="$input='VA'">
				<xsl:copy-of select="'VA'"/>
			</xsl:when>
			<xsl:when test="$input='VLT'">
				<xsl:copy-of select="'VLT'"/>
			</xsl:when>
			<xsl:when test="$input='VP'">
				<xsl:copy-of select="'VP'"/>
			</xsl:when>
			<xsl:when test="$input='W2'">
				<xsl:copy-of select="'W2'"/>
			</xsl:when>
			<xsl:when test="$input='WA'">
				<xsl:copy-of select="'WA'"/>
			</xsl:when>
			<xsl:when test="$input='WB'">
				<xsl:copy-of select="'WB'"/>
			</xsl:when>
			<xsl:when test="$input='WCD'">
				<xsl:copy-of select="'WCD'"/>
			</xsl:when>
			<xsl:when test="$input='WE'">
				<xsl:copy-of select="'WE'"/>
			</xsl:when>
			<xsl:when test="$input='WEB'">
				<xsl:copy-of select="'WEB'"/>
			</xsl:when>
			<xsl:when test="$input='WEE'">
				<xsl:copy-of select="'WEE'"/>
			</xsl:when>
			<xsl:when test="$input='WG'">
				<xsl:copy-of select="'WG'"/>
			</xsl:when>
			<xsl:when test="$input='WHR'">
				<xsl:copy-of select="'WHR'"/>
			</xsl:when>
			<xsl:when test="$input='WM'">
				<xsl:copy-of select="'WM'"/>
			</xsl:when>
			<xsl:when test="$input='WSD'">
				<xsl:copy-of select="'WSD'"/>
			</xsl:when>
			<xsl:when test="$input='WTT'">
				<xsl:copy-of select="'WTT'"/>
			</xsl:when>
			<xsl:when test="$input='WW'">
				<xsl:copy-of select="'WW'"/>
			</xsl:when>
			<xsl:when test="$input='X1'">
				<xsl:copy-of select="'X1'"/>
			</xsl:when>
			<xsl:when test="$input='YDK'">
				<xsl:copy-of select="'YDK'"/>
			</xsl:when>
			<xsl:when test="$input='YDQ'">
				<xsl:copy-of select="'YDQ'"/>
			</xsl:when>
			<xsl:when test="$input='YRD'">
				<xsl:copy-of select="'YRD'"/>
			</xsl:when>
			<xsl:when test="$input='ZP'">
				<xsl:copy-of select="'ZP'"/>
			</xsl:when>
			<xsl:when test="$input='ZZ'">
				<xsl:copy-of select="'ZZ'"/>
			</xsl:when>
			<xsl:when test="$input='5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='16'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='17'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='18'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='19'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='26'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='29'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='30'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='31'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='32'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='36'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='45'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='46'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='47'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='48'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='53'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='54'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='62'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='63'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='69'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='71'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='72'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='73'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='90'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='92'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='93'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='94'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='95'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='96'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='97'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='98'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1C'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1H'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1J'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1K'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1L'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1M'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1X'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='2V'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='2W'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='3E'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='3G'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='3I'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='4B'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='4E'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5C'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5F'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5G'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5I'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5K'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5P'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5Q'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='AR'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='AW'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B0'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B9'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C77'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C98'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D14'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D28'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D40'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D64'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D66'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D67'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D79'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D90'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D92'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D96'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D97'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D98'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D99'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='DE'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='DQ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='DRM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='E2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='E3'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='E5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='EP'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='EV'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='F1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='F9'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='FG'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='FM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='G7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GC'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GK'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GW'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='H1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='H2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HE'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HK'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HL'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HO'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HS'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HT'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HY'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='II'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='IM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='IP'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='IT'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='JO'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KS'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KTM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='L61'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='L62'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LC'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LJ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LX'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='M0'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MK'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MQ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MV'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='N2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NB'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NBB'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NC'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='ND'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NJ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NPL'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NRL'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NY'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='OP'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P0'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P3'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P9'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='PM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='PW'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='R4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RA'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RS'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RU'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='SN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='SST'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TA'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TJ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TQ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TSD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TSH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UE'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='W4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='WI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z3'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='43'">
				<xsl:copy-of select="'X43'"/>
			</xsl:when>
			<xsl:when test="$input='44'">
				<xsl:copy-of select="'X44'"/>
			</xsl:when>
			<xsl:when test="$input='1A'">
				<xsl:copy-of select="'X1A'"/>
			</xsl:when>
			<xsl:when test="$input='1B'">
				<xsl:copy-of select="'X1B'"/>
			</xsl:when>
			<xsl:when test="$input='1D'">
				<xsl:copy-of select="'X1D'"/>
			</xsl:when>
			<xsl:when test="$input='1F'">
				<xsl:copy-of select="'X1F'"/>
			</xsl:when>
			<xsl:when test="$input='1G'">
				<xsl:copy-of select="'X1G'"/>
			</xsl:when>
			<xsl:when test="$input='3H'">
				<xsl:copy-of select="'X3H'"/>
			</xsl:when>
			<xsl:when test="$input='4A'">
				<xsl:copy-of select="'X4A'"/>
			</xsl:when>
			<xsl:when test="$input='5H'">
				<xsl:copy-of select="'X5H'"/>
			</xsl:when>
			<xsl:when test="$input='AJ'">
				<xsl:copy-of select="'XAJ'"/>
			</xsl:when>
			<xsl:when test="$input='AM'">
				<xsl:copy-of select="'XAM'"/>
			</xsl:when>
			<xsl:when test="$input='AP'">
				<xsl:copy-of select="'XAP'"/>
			</xsl:when>
			<xsl:when test="$input='AV'">
				<xsl:copy-of select="'XAV'"/>
			</xsl:when>
			<xsl:when test="$input='BD'">
				<xsl:copy-of select="'XBD'"/>
			</xsl:when>
			<xsl:when test="$input='BE'">
				<xsl:copy-of select="'XBE'"/>
			</xsl:when>
			<xsl:when test="$input='BG'">
				<xsl:copy-of select="'XBG'"/>
			</xsl:when>
			<xsl:when test="$input='BH'">
				<xsl:copy-of select="'XBH'"/>
			</xsl:when>
			<xsl:when test="$input='BJ'">
				<xsl:copy-of select="'XBJ'"/>
			</xsl:when>
			<xsl:when test="$input='BK'">
				<xsl:copy-of select="'XBK'"/>
			</xsl:when>
			<xsl:when test="$input='BL'">
				<xsl:copy-of select="'XBL'"/>
			</xsl:when>
			<xsl:when test="$input='BO'">
				<xsl:copy-of select="'XBO'"/>
			</xsl:when>
			<xsl:when test="$input='BR'">
				<xsl:copy-of select="'XBR'"/>
			</xsl:when>
			<xsl:when test="$input='BT'">
				<xsl:copy-of select="'XBT'"/>
			</xsl:when>
			<xsl:when test="$input='BW'">
				<xsl:copy-of select="'XBW'"/>
			</xsl:when>
			<xsl:when test="$input='BX'">
				<xsl:copy-of select="'XBX'"/>
			</xsl:when>
			<xsl:when test="$input='BZ'">
				<xsl:copy-of select="'XBZ'"/>
			</xsl:when>
			<xsl:when test="$input='CA'">
				<xsl:copy-of select="'XCA'"/>
			</xsl:when>
			<xsl:when test="$input='CH'">
				<xsl:copy-of select="'XCH'"/>
			</xsl:when>
			<xsl:when test="$input='CJ'">
				<xsl:copy-of select="'XCJ'"/>
			</xsl:when>
			<xsl:when test="$input='CK'">
				<xsl:copy-of select="'XCK'"/>
			</xsl:when>
			<xsl:when test="$input='CL'">
				<xsl:copy-of select="'XCL'"/>
			</xsl:when>
			<xsl:when test="$input='CO'">
				<xsl:copy-of select="'XCO'"/>
			</xsl:when>
			<xsl:when test="$input='CQ'">
				<xsl:copy-of select="'XCQ'"/>
			</xsl:when>
			<xsl:when test="$input='CR'">
				<xsl:copy-of select="'XCR'"/>
			</xsl:when>
			<xsl:when test="$input='CS'">
				<xsl:copy-of select="'XCS'"/>
			</xsl:when>
			<xsl:when test="$input='CT'">
				<xsl:copy-of select="'XCT'"/>
			</xsl:when>
			<xsl:when test="$input='CU'">
				<xsl:copy-of select="'XCU'"/>
			</xsl:when>
			<xsl:when test="$input='CV'">
				<xsl:copy-of select="'XCV'"/>
			</xsl:when>
			<xsl:when test="$input='CY'">
				<xsl:copy-of select="'XCY'"/>
			</xsl:when>
			<xsl:when test="$input='CZ'">
				<xsl:copy-of select="'XCZ'"/>
			</xsl:when>
			<xsl:when test="$input='DC'">
				<xsl:copy-of select="'XDC'"/>
			</xsl:when>
			<xsl:when test="$input='DI'">
				<xsl:copy-of select="'XDI'"/>
			</xsl:when>
			<xsl:when test="$input='DR'">
				<xsl:copy-of select="'XDR'"/>
			</xsl:when>
			<xsl:when test="$input='DS'">
				<xsl:copy-of select="'XDS'"/>
			</xsl:when>
			<xsl:when test="$input='DY'">
				<xsl:copy-of select="'XDY'"/>
			</xsl:when>
			<xsl:when test="$input='EC'">
				<xsl:copy-of select="'XEC'"/>
			</xsl:when>
			<xsl:when test="$input='FB'">
				<xsl:copy-of select="'XFB'"/>
			</xsl:when>
			<xsl:when test="$input='FD'">
				<xsl:copy-of select="'XFD'"/>
			</xsl:when>
			<xsl:when test="$input='FE'">
				<xsl:copy-of select="'XFE'"/>
			</xsl:when>
			<xsl:when test="$input='GY'">
				<xsl:copy-of select="'XGY'"/>
			</xsl:when>
			<xsl:when test="$input='GZ'">
				<xsl:copy-of select="'XGZ'"/>
			</xsl:when>
			<xsl:when test="$input='IC'">
				<xsl:copy-of select="'XIC'"/>
			</xsl:when>
			<xsl:when test="$input='IF'">
				<xsl:copy-of select="'XIF'"/>
			</xsl:when>
			<xsl:when test="$input='IL'">
				<xsl:copy-of select="'XIL'"/>
			</xsl:when>
			<xsl:when test="$input='JB'">
				<xsl:copy-of select="'XJB'"/>
			</xsl:when>
			<xsl:when test="$input='JG'">
				<xsl:copy-of select="'XJG'"/>
			</xsl:when>
			<xsl:when test="$input='JR'">
				<xsl:copy-of select="'XJR'"/>
			</xsl:when>
			<xsl:when test="$input='KG'">
				<xsl:copy-of select="'XKG'"/>
			</xsl:when>
			<xsl:when test="$input='LE'">
				<xsl:copy-of select="'XLE'"/>
			</xsl:when>
			<xsl:when test="$input='MA'">
				<xsl:copy-of select="'XMA'"/>
			</xsl:when>
			<xsl:when test="$input='MT'">
				<xsl:copy-of select="'XMT'"/>
			</xsl:when>
			<xsl:when test="$input='NE'">
				<xsl:copy-of select="'XNE'"/>
			</xsl:when>
			<xsl:when test="$input='NG'">
				<xsl:copy-of select="'XNG'"/>
			</xsl:when>
			<xsl:when test="$input='NV'">
				<xsl:copy-of select="'XNV'"/>
			</xsl:when>
			<xsl:when test="$input='PA'">
				<xsl:copy-of select="'XPA'"/>
			</xsl:when>
			<xsl:when test="$input='PB'">
				<xsl:copy-of select="'XPB'"/>
			</xsl:when>
			<xsl:when test="$input='PE'">
				<xsl:copy-of select="'XPE'"/>
			</xsl:when>
			<xsl:when test="$input='PF'">
				<xsl:copy-of select="'XPF'"/>
			</xsl:when>
			<xsl:when test="$input='PG'">
				<xsl:copy-of select="'XPG'"/>
			</xsl:when>
			<xsl:when test="$input='PK'">
				<xsl:copy-of select="'XPK'"/>
			</xsl:when>
			<xsl:when test="$input='PL'">
				<xsl:copy-of select="'XPL'"/>
			</xsl:when>
			<xsl:when test="$input='PN'">
				<xsl:copy-of select="'XPN'"/>
			</xsl:when>
			<xsl:when test="$input='PU'">
				<xsl:copy-of select="'XPU'"/>
			</xsl:when>
			<xsl:when test="$input='PV'">
				<xsl:copy-of select="'XPV'"/>
			</xsl:when>
			<xsl:when test="$input='PY'">
				<xsl:copy-of select="'XPY'"/>
			</xsl:when>
			<xsl:when test="$input='PZ'">
				<xsl:copy-of select="'XPZ'"/>
			</xsl:when>
			<xsl:when test="$input='QD'">
				<xsl:copy-of select="'XQD'"/>
			</xsl:when>
			<xsl:when test="$input='QH'">
				<xsl:copy-of select="'XQH'"/>
			</xsl:when>
			<xsl:when test="$input='QK'">
				<xsl:copy-of select="'XQK'"/>
			</xsl:when>
			<xsl:when test="$input='RD'">
				<xsl:copy-of select="'XRD'"/>
			</xsl:when>
			<xsl:when test="$input='RG'">
				<xsl:copy-of select="'XRG'"/>
			</xsl:when>
			<xsl:when test="$input='RK'">
				<xsl:copy-of select="'XRK'"/>
			</xsl:when>
			<xsl:when test="$input='RL'">
				<xsl:copy-of select="'XRL'"/>
			</xsl:when>
			<xsl:when test="$input='RO'">
				<xsl:copy-of select="'XRO'"/>
			</xsl:when>
			<xsl:when test="$input='SA'">
				<xsl:copy-of select="'XSA'"/>
			</xsl:when>
			<xsl:when test="$input='SD'">
				<xsl:copy-of select="'XSD'"/>
			</xsl:when>
			<xsl:when test="$input='SE'">
				<xsl:copy-of select="'XSE'"/>
			</xsl:when>
			<xsl:when test="$input='SK'">
				<xsl:copy-of select="'XSK'"/>
			</xsl:when>
			<xsl:when test="$input='SL'">
				<xsl:copy-of select="'XSL'"/>
			</xsl:when>
			<xsl:when test="$input='SO'">
				<xsl:copy-of select="'XSO'"/>
			</xsl:when>
			<xsl:when test="$input='SP'">
				<xsl:copy-of select="'XSP'"/>
			</xsl:when>
			<xsl:when test="$input='SS'">
				<xsl:copy-of select="'XSS'"/>
			</xsl:when>
			<xsl:when test="$input='ST'">
				<xsl:copy-of select="'XST'"/>
			</xsl:when>
			<xsl:when test="$input='SV'">
				<xsl:copy-of select="'XSV'"/>
			</xsl:when>
			<xsl:when test="$input='T1'">
				<xsl:copy-of select="'XT1'"/>
			</xsl:when>
			<xsl:when test="$input='TC'">
				<xsl:copy-of select="'XTC'"/>
			</xsl:when>
			<xsl:when test="$input='TD'">
				<xsl:copy-of select="'XTD'"/>
			</xsl:when>
			<xsl:when test="$input='TE'">
				<xsl:copy-of select="'XTE'"/>
			</xsl:when>
			<xsl:when test="$input='TK'">
				<xsl:copy-of select="'XTK'"/>
			</xsl:when>
			<xsl:when test="$input='TL'">
				<xsl:copy-of select="'XTL'"/>
			</xsl:when>
			<xsl:when test="$input='TN'">
				<xsl:copy-of select="'XTN'"/>
			</xsl:when>
			<xsl:when test="$input='TR'">
				<xsl:copy-of select="'XTR'"/>
			</xsl:when>
			<xsl:when test="$input='TS'">
				<xsl:copy-of select="'XTS'"/>
			</xsl:when>
			<xsl:when test="$input='TT'">
				<xsl:copy-of select="'XTT'"/>
			</xsl:when>
			<xsl:when test="$input='TU'">
				<xsl:copy-of select="'XTU'"/>
			</xsl:when>
			<xsl:when test="$input='TV'">
				<xsl:copy-of select="'XTV'"/>
			</xsl:when>
			<xsl:when test="$input='TW'">
				<xsl:copy-of select="'XTW'"/>
			</xsl:when>
			<xsl:when test="$input='TY'">
				<xsl:copy-of select="'XTY'"/>
			</xsl:when>
			<xsl:when test="$input='VI'">
				<xsl:copy-of select="'XVI'"/>
			</xsl:when>
			<xsl:when test="$input='VQ'">
				<xsl:copy-of select="'XVQ'"/>
			</xsl:when>
			<xsl:when test="$input='VS'">
				<xsl:copy-of select="'XVS'"/>
			</xsl:when>
			<xsl:when test="$input='WH'">
				<xsl:copy-of select="'XWH'"/>
			</xsl:when>
			<xsl:when test="$input='WR'">
				<xsl:copy-of select="'XWR'"/>
			</xsl:when>
			<xsl:when test="$input='YL'">
				<xsl:copy-of select="'XYL'"/>
			</xsl:when>
			<xsl:when test="$input='YT'">
				<xsl:copy-of select="'XYT'"/>
			</xsl:when>
			<xsl:when test="$input='XPR'">
				<xsl:copy-of select="'XPR'"/>
			</xsl:when>
			<xsl:when test="$input='X43'">
				<xsl:copy-of select="'X43'"/>
			</xsl:when>
			<xsl:when test="$input='X44'">
				<xsl:copy-of select="'X44'"/>
			</xsl:when>
			<xsl:when test="$input='X1A'">
				<xsl:copy-of select="'X1A'"/>
			</xsl:when>
			<xsl:when test="$input='X1B'">
				<xsl:copy-of select="'X1B'"/>
			</xsl:when>
			<xsl:when test="$input='X1D'">
				<xsl:copy-of select="'X1D'"/>
			</xsl:when>
			<xsl:when test="$input='X1F'">
				<xsl:copy-of select="'X1F'"/>
			</xsl:when>
			<xsl:when test="$input='X1G'">
				<xsl:copy-of select="'X1G'"/>
			</xsl:when>
			<xsl:when test="$input='X3H'">
				<xsl:copy-of select="'X3H'"/>
			</xsl:when>
			<xsl:when test="$input='X4A'">
				<xsl:copy-of select="'X4A'"/>
			</xsl:when>
			<xsl:when test="$input='X4B'">
				<xsl:copy-of select="'X4B'"/>
			</xsl:when>
			<xsl:when test="$input='X5H'">
				<xsl:copy-of select="'X5H'"/>
			</xsl:when>
			<xsl:when test="$input='XAJ'">
				<xsl:copy-of select="'XAJ'"/>
			</xsl:when>
			<xsl:when test="$input='XAM'">
				<xsl:copy-of select="'XAM'"/>
			</xsl:when>
			<xsl:when test="$input='XAP'">
				<xsl:copy-of select="'XAP'"/>
			</xsl:when>
			<xsl:when test="$input='XAV'">
				<xsl:copy-of select="'XAV'"/>
			</xsl:when>
			<xsl:when test="$input='XBD'">
				<xsl:copy-of select="'XBD'"/>
			</xsl:when>
			<xsl:when test="$input='XBE'">
				<xsl:copy-of select="'XBE'"/>
			</xsl:when>
			<xsl:when test="$input='XBG'">
				<xsl:copy-of select="'XBG'"/>
			</xsl:when>
			<xsl:when test="$input='XBH'">
				<xsl:copy-of select="'XBH'"/>
			</xsl:when>
			<xsl:when test="$input='XBJ'">
				<xsl:copy-of select="'XBJ'"/>
			</xsl:when>
			<xsl:when test="$input='XBK'">
				<xsl:copy-of select="'XBK'"/>
			</xsl:when>
			<xsl:when test="$input='XBL'">
				<xsl:copy-of select="'XBL'"/>
			</xsl:when>
			<xsl:when test="$input='XBO'">
				<xsl:copy-of select="'XBO'"/>
			</xsl:when>
			<xsl:when test="$input='XBR'">
				<xsl:copy-of select="'XBR'"/>
			</xsl:when>
			<xsl:when test="$input='XBT'">
				<xsl:copy-of select="'XBT'"/>
			</xsl:when>
			<xsl:when test="$input='XBW'">
				<xsl:copy-of select="'XBW'"/>
			</xsl:when>
			<xsl:when test="$input='XBX'">
				<xsl:copy-of select="'XBX'"/>
			</xsl:when>
			<xsl:when test="$input='XBZ'">
				<xsl:copy-of select="'XBZ'"/>
			</xsl:when>
			<xsl:when test="$input='XCA'">
				<xsl:copy-of select="'XCA'"/>
			</xsl:when>
			<xsl:when test="$input='XCH'">
				<xsl:copy-of select="'XCH'"/>
			</xsl:when>
			<xsl:when test="$input='XCJ'">
				<xsl:copy-of select="'XCJ'"/>
			</xsl:when>
			<xsl:when test="$input='XCK'">
				<xsl:copy-of select="'XCK'"/>
			</xsl:when>
			<xsl:when test="$input='XCL'">
				<xsl:copy-of select="'XCL'"/>
			</xsl:when>
			<xsl:when test="$input='XCO'">
				<xsl:copy-of select="'XCO'"/>
			</xsl:when>
			<xsl:when test="$input='XCQ'">
				<xsl:copy-of select="'XCQ'"/>
			</xsl:when>
			<xsl:when test="$input='XCR'">
				<xsl:copy-of select="'XCR'"/>
			</xsl:when>
			<xsl:when test="$input='XCS'">
				<xsl:copy-of select="'XCS'"/>
			</xsl:when>
			<xsl:when test="$input='XCT'">
				<xsl:copy-of select="'XCT'"/>
			</xsl:when>
			<xsl:when test="$input='XCU'">
				<xsl:copy-of select="'XCU'"/>
			</xsl:when>
			<xsl:when test="$input='XCV'">
				<xsl:copy-of select="'XCV'"/>
			</xsl:when>
			<xsl:when test="$input='XCY'">
				<xsl:copy-of select="'XCY'"/>
			</xsl:when>
			<xsl:when test="$input='XCZ'">
				<xsl:copy-of select="'XCZ'"/>
			</xsl:when>
			<xsl:when test="$input='XDC'">
				<xsl:copy-of select="'XDC'"/>
			</xsl:when>
			<xsl:when test="$input='XDI'">
				<xsl:copy-of select="'XDI'"/>
			</xsl:when>
			<xsl:when test="$input='XDR'">
				<xsl:copy-of select="'XDR'"/>
			</xsl:when>
			<xsl:when test="$input='XDS'">
				<xsl:copy-of select="'XDS'"/>
			</xsl:when>
			<xsl:when test="$input='XDY'">
				<xsl:copy-of select="'XDY'"/>
			</xsl:when>
			<xsl:when test="$input='XEC'">
				<xsl:copy-of select="'XEC'"/>
			</xsl:when>
			<xsl:when test="$input='XFB'">
				<xsl:copy-of select="'XFB'"/>
			</xsl:when>
			<xsl:when test="$input='XFD'">
				<xsl:copy-of select="'XFD'"/>
			</xsl:when>
			<xsl:when test="$input='XFE'">
				<xsl:copy-of select="'XFE'"/>
			</xsl:when>
			<xsl:when test="$input='XGY'">
				<xsl:copy-of select="'XGY'"/>
			</xsl:when>
			<xsl:when test="$input='XGZ'">
				<xsl:copy-of select="'XGZ'"/>
			</xsl:when>
			<xsl:when test="$input='XIC'">
				<xsl:copy-of select="'XIC'"/>
			</xsl:when>
			<xsl:when test="$input='XIF'">
				<xsl:copy-of select="'XIF'"/>
			</xsl:when>
			<xsl:when test="$input='XIL'">
				<xsl:copy-of select="'XIL'"/>
			</xsl:when>
			<xsl:when test="$input='XJB'">
				<xsl:copy-of select="'XJB'"/>
			</xsl:when>
			<xsl:when test="$input='XJG'">
				<xsl:copy-of select="'XJG'"/>
			</xsl:when>
			<xsl:when test="$input='XJR'">
				<xsl:copy-of select="'XJR'"/>
			</xsl:when>
			<xsl:when test="$input='XKG'">
				<xsl:copy-of select="'XKG'"/>
			</xsl:when>
			<xsl:when test="$input='XLE'">
				<xsl:copy-of select="'XLE'"/>
			</xsl:when>
			<xsl:when test="$input='XMA'">
				<xsl:copy-of select="'XMA'"/>
			</xsl:when>
			<xsl:when test="$input='XMT'">
				<xsl:copy-of select="'XMT'"/>
			</xsl:when>
			<xsl:when test="$input='XNE'">
				<xsl:copy-of select="'XNE'"/>
			</xsl:when>
			<xsl:when test="$input='XNG'">
				<xsl:copy-of select="'XNG'"/>
			</xsl:when>
			<xsl:when test="$input='XNV'">
				<xsl:copy-of select="'XNV'"/>
			</xsl:when>
			<xsl:when test="$input='XPA'">
				<xsl:copy-of select="'XPA'"/>
			</xsl:when>
			<xsl:when test="$input='XPB'">
				<xsl:copy-of select="'XPB'"/>
			</xsl:when>
			<xsl:when test="$input='XPE'">
				<xsl:copy-of select="'XPE'"/>
			</xsl:when>
			<xsl:when test="$input='XPF'">
				<xsl:copy-of select="'XPF'"/>
			</xsl:when>
			<xsl:when test="$input='XPG'">
				<xsl:copy-of select="'XPG'"/>
			</xsl:when>
			<xsl:when test="$input='XPK'">
				<xsl:copy-of select="'XPK'"/>
			</xsl:when>
			<xsl:when test="$input='XPL'">
				<xsl:copy-of select="'XPL'"/>
			</xsl:when>
			<xsl:when test="$input='XPN'">
				<xsl:copy-of select="'XPN'"/>
			</xsl:when>
			<xsl:when test="$input='XPU'">
				<xsl:copy-of select="'XPU'"/>
			</xsl:when>
			<xsl:when test="$input='XPV'">
				<xsl:copy-of select="'XPV'"/>
			</xsl:when>
			<xsl:when test="$input='XPY'">
				<xsl:copy-of select="'XPY'"/>
			</xsl:when>
			<xsl:when test="$input='XPZ'">
				<xsl:copy-of select="'XPZ'"/>
			</xsl:when>
			<xsl:when test="$input='XQD'">
				<xsl:copy-of select="'XQD'"/>
			</xsl:when>
			<xsl:when test="$input='XQH'">
				<xsl:copy-of select="'XQH'"/>
			</xsl:when>
			<xsl:when test="$input='XQK'">
				<xsl:copy-of select="'XQK'"/>
			</xsl:when>
			<xsl:when test="$input='XRD'">
				<xsl:copy-of select="'XRD'"/>
			</xsl:when>
			<xsl:when test="$input='XRG'">
				<xsl:copy-of select="'XRG'"/>
			</xsl:when>
			<xsl:when test="$input='XRK'">
				<xsl:copy-of select="'XRK'"/>
			</xsl:when>
			<xsl:when test="$input='XRL'">
				<xsl:copy-of select="'XRL'"/>
			</xsl:when>
			<xsl:when test="$input='XRO'">
				<xsl:copy-of select="'XRO'"/>
			</xsl:when>
			<xsl:when test="$input='XSA'">
				<xsl:copy-of select="'XSA'"/>
			</xsl:when>
			<xsl:when test="$input='XSD'">
				<xsl:copy-of select="'XSD'"/>
			</xsl:when>
			<xsl:when test="$input='XSE'">
				<xsl:copy-of select="'XSE'"/>
			</xsl:when>
			<xsl:when test="$input='XSK'">
				<xsl:copy-of select="'XSK'"/>
			</xsl:when>
			<xsl:when test="$input='XSL'">
				<xsl:copy-of select="'XSL'"/>
			</xsl:when>
			<xsl:when test="$input='XSO'">
				<xsl:copy-of select="'XSO'"/>
			</xsl:when>
			<xsl:when test="$input='XSP'">
				<xsl:copy-of select="'XSP'"/>
			</xsl:when>
			<xsl:when test="$input='XSS'">
				<xsl:copy-of select="'XSS'"/>
			</xsl:when>
			<xsl:when test="$input='XST'">
				<xsl:copy-of select="'XST'"/>
			</xsl:when>
			<xsl:when test="$input='XSV'">
				<xsl:copy-of select="'XSV'"/>
			</xsl:when>
			<xsl:when test="$input='XT1'">
				<xsl:copy-of select="'XT1'"/>
			</xsl:when>
			<xsl:when test="$input='XTC'">
				<xsl:copy-of select="'XTC'"/>
			</xsl:when>
			<xsl:when test="$input='XTD'">
				<xsl:copy-of select="'XTD'"/>
			</xsl:when>
			<xsl:when test="$input='XTE'">
				<xsl:copy-of select="'XTE'"/>
			</xsl:when>
			<xsl:when test="$input='XTK'">
				<xsl:copy-of select="'XTK'"/>
			</xsl:when>
			<xsl:when test="$input='XTL'">
				<xsl:copy-of select="'XTL'"/>
			</xsl:when>
			<xsl:when test="$input='XTN'">
				<xsl:copy-of select="'XTN'"/>
			</xsl:when>
			<xsl:when test="$input='XTR'">
				<xsl:copy-of select="'XTR'"/>
			</xsl:when>
			<xsl:when test="$input='XTS'">
				<xsl:copy-of select="'XTS'"/>
			</xsl:when>
			<xsl:when test="$input='XTT'">
				<xsl:copy-of select="'XTT'"/>
			</xsl:when>
			<xsl:when test="$input='XTU'">
				<xsl:copy-of select="'XTU'"/>
			</xsl:when>
			<xsl:when test="$input='XTV'">
				<xsl:copy-of select="'XTV'"/>
			</xsl:when>
			<xsl:when test="$input='XTW'">
				<xsl:copy-of select="'XTW'"/>
			</xsl:when>
			<xsl:when test="$input='XTY'">
				<xsl:copy-of select="'XTY'"/>
			</xsl:when>
			<xsl:when test="$input='XVI'">
				<xsl:copy-of select="'XVI'"/>
			</xsl:when>
			<xsl:when test="$input='XVQ'">
				<xsl:copy-of select="'XVQ'"/>
			</xsl:when>
			<xsl:when test="$input='XVS'">
				<xsl:copy-of select="'XVS'"/>
			</xsl:when>
			<xsl:when test="$input='XWH'">
				<xsl:copy-of select="'XWH'"/>
			</xsl:when>
			<xsl:when test="$input='XWR'">
				<xsl:copy-of select="'XWR'"/>
			</xsl:when>
			<xsl:when test="$input='XYL'">
				<xsl:copy-of select="'XYL'"/>
			</xsl:when>
			<xsl:when test="$input='XYT'">
				<xsl:copy-of select="'XYT'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="''"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf10_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0088'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='GLN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='NO:ORGNR'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='0192'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='9908'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='NO:VAT'">
				<xsl:copy-of select="'0192'"/>
			</xsl:when>
			<xsl:when test="$input='SE:ORGNR'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
			<xsl:when test="$input='0007'">
				<xsl:copy-of select="'0007'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf11_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='vatex-eu-132'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1m'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1n'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1p'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1q'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1fa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-309'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1aa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ic'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ae'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="'FALSE'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf12_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='UNSPSC'">
				<xsl:copy-of select="'MP'"/>
			</xsl:when>
			<xsl:when test="$input='GTIN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='EAN'">
				<xsl:copy-of select="'0088'"/>
			</xsl:when>
			<xsl:when test="$input='CPV'">
				<xsl:copy-of select="'STI'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf13_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='vatex-eu-132'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1m'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1n'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1p'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-132-1q'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1fa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1h'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1k'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-143-1l'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-309'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-148-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1a'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1aa'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1b'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1c'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-151-1e'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-g'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-o'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ic'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-ae'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-d'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-f'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-i'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:when test="$input='vatex-eu-j'">
				<xsl:copy-of select="'TRUE'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="'FALSE'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf14_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='10'">
				<xsl:copy-of select="'10'"/>
			</xsl:when>
			<xsl:when test="$input='11'">
				<xsl:copy-of select="'11'"/>
			</xsl:when>
			<xsl:when test="$input='13'">
				<xsl:copy-of select="'13'"/>
			</xsl:when>
			<xsl:when test="$input='14'">
				<xsl:copy-of select="'14'"/>
			</xsl:when>
			<xsl:when test="$input='15'">
				<xsl:copy-of select="'15'"/>
			</xsl:when>
			<xsl:when test="$input='20'">
				<xsl:copy-of select="'20'"/>
			</xsl:when>
			<xsl:when test="$input='21'">
				<xsl:copy-of select="'21'"/>
			</xsl:when>
			<xsl:when test="$input='22'">
				<xsl:copy-of select="'22'"/>
			</xsl:when>
			<xsl:when test="$input='23'">
				<xsl:copy-of select="'23'"/>
			</xsl:when>
			<xsl:when test="$input='24'">
				<xsl:copy-of select="'24'"/>
			</xsl:when>
			<xsl:when test="$input='25'">
				<xsl:copy-of select="'25'"/>
			</xsl:when>
			<xsl:when test="$input='27'">
				<xsl:copy-of select="'27'"/>
			</xsl:when>
			<xsl:when test="$input='28'">
				<xsl:copy-of select="'28'"/>
			</xsl:when>
			<xsl:when test="$input='33'">
				<xsl:copy-of select="'33'"/>
			</xsl:when>
			<xsl:when test="$input='34'">
				<xsl:copy-of select="'34'"/>
			</xsl:when>
			<xsl:when test="$input='35'">
				<xsl:copy-of select="'35'"/>
			</xsl:when>
			<xsl:when test="$input='37'">
				<xsl:copy-of select="'37'"/>
			</xsl:when>
			<xsl:when test="$input='38'">
				<xsl:copy-of select="'38'"/>
			</xsl:when>
			<xsl:when test="$input='40'">
				<xsl:copy-of select="'40'"/>
			</xsl:when>
			<xsl:when test="$input='41'">
				<xsl:copy-of select="'41'"/>
			</xsl:when>
			<xsl:when test="$input='56'">
				<xsl:copy-of select="'56'"/>
			</xsl:when>
			<xsl:when test="$input='57'">
				<xsl:copy-of select="'57'"/>
			</xsl:when>
			<xsl:when test="$input='58'">
				<xsl:copy-of select="'58'"/>
			</xsl:when>
			<xsl:when test="$input='59'">
				<xsl:copy-of select="'59'"/>
			</xsl:when>
			<xsl:when test="$input='60'">
				<xsl:copy-of select="'60'"/>
			</xsl:when>
			<xsl:when test="$input='61'">
				<xsl:copy-of select="'61'"/>
			</xsl:when>
			<xsl:when test="$input='64'">
				<xsl:copy-of select="'64'"/>
			</xsl:when>
			<xsl:when test="$input='66'">
				<xsl:copy-of select="'66'"/>
			</xsl:when>
			<xsl:when test="$input='74'">
				<xsl:copy-of select="'74'"/>
			</xsl:when>
			<xsl:when test="$input='76'">
				<xsl:copy-of select="'76'"/>
			</xsl:when>
			<xsl:when test="$input='77'">
				<xsl:copy-of select="'77'"/>
			</xsl:when>
			<xsl:when test="$input='78'">
				<xsl:copy-of select="'78'"/>
			</xsl:when>
			<xsl:when test="$input='80'">
				<xsl:copy-of select="'80'"/>
			</xsl:when>
			<xsl:when test="$input='81'">
				<xsl:copy-of select="'81'"/>
			</xsl:when>
			<xsl:when test="$input='84'">
				<xsl:copy-of select="'84'"/>
			</xsl:when>
			<xsl:when test="$input='85'">
				<xsl:copy-of select="'85'"/>
			</xsl:when>
			<xsl:when test="$input='87'">
				<xsl:copy-of select="'87'"/>
			</xsl:when>
			<xsl:when test="$input='89'">
				<xsl:copy-of select="'89'"/>
			</xsl:when>
			<xsl:when test="$input='91'">
				<xsl:copy-of select="'91'"/>
			</xsl:when>
			<xsl:when test="$input='1I'">
				<xsl:copy-of select="'1I'"/>
			</xsl:when>
			<xsl:when test="$input='2A'">
				<xsl:copy-of select="'2A'"/>
			</xsl:when>
			<xsl:when test="$input='2B'">
				<xsl:copy-of select="'2B'"/>
			</xsl:when>
			<xsl:when test="$input='2C'">
				<xsl:copy-of select="'2C'"/>
			</xsl:when>
			<xsl:when test="$input='2G'">
				<xsl:copy-of select="'2G'"/>
			</xsl:when>
			<xsl:when test="$input='2H'">
				<xsl:copy-of select="'2H'"/>
			</xsl:when>
			<xsl:when test="$input='2I'">
				<xsl:copy-of select="'2I'"/>
			</xsl:when>
			<xsl:when test="$input='2J'">
				<xsl:copy-of select="'2J'"/>
			</xsl:when>
			<xsl:when test="$input='2K'">
				<xsl:copy-of select="'2K'"/>
			</xsl:when>
			<xsl:when test="$input='2L'">
				<xsl:copy-of select="'2L'"/>
			</xsl:when>
			<xsl:when test="$input='2M'">
				<xsl:copy-of select="'2M'"/>
			</xsl:when>
			<xsl:when test="$input='2N'">
				<xsl:copy-of select="'2N'"/>
			</xsl:when>
			<xsl:when test="$input='2P'">
				<xsl:copy-of select="'2P'"/>
			</xsl:when>
			<xsl:when test="$input='2Q'">
				<xsl:copy-of select="'2Q'"/>
			</xsl:when>
			<xsl:when test="$input='2R'">
				<xsl:copy-of select="'2R'"/>
			</xsl:when>
			<xsl:when test="$input='2U'">
				<xsl:copy-of select="'2U'"/>
			</xsl:when>
			<xsl:when test="$input='2X'">
				<xsl:copy-of select="'2X'"/>
			</xsl:when>
			<xsl:when test="$input='2Y'">
				<xsl:copy-of select="'2Y'"/>
			</xsl:when>
			<xsl:when test="$input='2Z'">
				<xsl:copy-of select="'2Z'"/>
			</xsl:when>
			<xsl:when test="$input='3B'">
				<xsl:copy-of select="'3B'"/>
			</xsl:when>
			<xsl:when test="$input='3C'">
				<xsl:copy-of select="'3C'"/>
			</xsl:when>
			<xsl:when test="$input='4C'">
				<xsl:copy-of select="'4C'"/>
			</xsl:when>
			<xsl:when test="$input='4G'">
				<xsl:copy-of select="'4G'"/>
			</xsl:when>
			<xsl:when test="$input='4H'">
				<xsl:copy-of select="'4H'"/>
			</xsl:when>
			<xsl:when test="$input='4K'">
				<xsl:copy-of select="'4K'"/>
			</xsl:when>
			<xsl:when test="$input='4L'">
				<xsl:copy-of select="'4L'"/>
			</xsl:when>
			<xsl:when test="$input='4M'">
				<xsl:copy-of select="'4M'"/>
			</xsl:when>
			<xsl:when test="$input='4N'">
				<xsl:copy-of select="'4N'"/>
			</xsl:when>
			<xsl:when test="$input='4O'">
				<xsl:copy-of select="'4O'"/>
			</xsl:when>
			<xsl:when test="$input='4P'">
				<xsl:copy-of select="'4P'"/>
			</xsl:when>
			<xsl:when test="$input='4Q'">
				<xsl:copy-of select="'4Q'"/>
			</xsl:when>
			<xsl:when test="$input='4R'">
				<xsl:copy-of select="'4R'"/>
			</xsl:when>
			<xsl:when test="$input='4T'">
				<xsl:copy-of select="'4T'"/>
			</xsl:when>
			<xsl:when test="$input='4U'">
				<xsl:copy-of select="'4U'"/>
			</xsl:when>
			<xsl:when test="$input='4W'">
				<xsl:copy-of select="'4W'"/>
			</xsl:when>
			<xsl:when test="$input='4X'">
				<xsl:copy-of select="'4X'"/>
			</xsl:when>
			<xsl:when test="$input='5A'">
				<xsl:copy-of select="'5A'"/>
			</xsl:when>
			<xsl:when test="$input='5B'">
				<xsl:copy-of select="'5B'"/>
			</xsl:when>
			<xsl:when test="$input='5E'">
				<xsl:copy-of select="'5E'"/>
			</xsl:when>
			<xsl:when test="$input='5J'">
				<xsl:copy-of select="'5J'"/>
			</xsl:when>
			<xsl:when test="$input='A1'">
				<xsl:copy-of select="'A1'"/>
			</xsl:when>
			<xsl:when test="$input='A10'">
				<xsl:copy-of select="'A10'"/>
			</xsl:when>
			<xsl:when test="$input='A11'">
				<xsl:copy-of select="'A11'"/>
			</xsl:when>
			<xsl:when test="$input='A12'">
				<xsl:copy-of select="'A12'"/>
			</xsl:when>
			<xsl:when test="$input='A13'">
				<xsl:copy-of select="'A13'"/>
			</xsl:when>
			<xsl:when test="$input='A14'">
				<xsl:copy-of select="'A14'"/>
			</xsl:when>
			<xsl:when test="$input='A15'">
				<xsl:copy-of select="'A15'"/>
			</xsl:when>
			<xsl:when test="$input='A16'">
				<xsl:copy-of select="'A16'"/>
			</xsl:when>
			<xsl:when test="$input='A17'">
				<xsl:copy-of select="'A17'"/>
			</xsl:when>
			<xsl:when test="$input='A18'">
				<xsl:copy-of select="'A18'"/>
			</xsl:when>
			<xsl:when test="$input='A19'">
				<xsl:copy-of select="'A19'"/>
			</xsl:when>
			<xsl:when test="$input='A2'">
				<xsl:copy-of select="'A2'"/>
			</xsl:when>
			<xsl:when test="$input='A20'">
				<xsl:copy-of select="'A20'"/>
			</xsl:when>
			<xsl:when test="$input='A21'">
				<xsl:copy-of select="'A21'"/>
			</xsl:when>
			<xsl:when test="$input='A22'">
				<xsl:copy-of select="'A22'"/>
			</xsl:when>
			<xsl:when test="$input='A23'">
				<xsl:copy-of select="'A23'"/>
			</xsl:when>
			<xsl:when test="$input='A24'">
				<xsl:copy-of select="'A24'"/>
			</xsl:when>
			<xsl:when test="$input='A25'">
				<xsl:copy-of select="'A25'"/>
			</xsl:when>
			<xsl:when test="$input='A26'">
				<xsl:copy-of select="'A26'"/>
			</xsl:when>
			<xsl:when test="$input='A27'">
				<xsl:copy-of select="'A27'"/>
			</xsl:when>
			<xsl:when test="$input='A28'">
				<xsl:copy-of select="'A28'"/>
			</xsl:when>
			<xsl:when test="$input='A29'">
				<xsl:copy-of select="'A29'"/>
			</xsl:when>
			<xsl:when test="$input='A3'">
				<xsl:copy-of select="'A3'"/>
			</xsl:when>
			<xsl:when test="$input='A30'">
				<xsl:copy-of select="'A30'"/>
			</xsl:when>
			<xsl:when test="$input='A31'">
				<xsl:copy-of select="'A31'"/>
			</xsl:when>
			<xsl:when test="$input='A32'">
				<xsl:copy-of select="'A32'"/>
			</xsl:when>
			<xsl:when test="$input='A33'">
				<xsl:copy-of select="'A33'"/>
			</xsl:when>
			<xsl:when test="$input='A34'">
				<xsl:copy-of select="'A34'"/>
			</xsl:when>
			<xsl:when test="$input='A35'">
				<xsl:copy-of select="'A35'"/>
			</xsl:when>
			<xsl:when test="$input='A36'">
				<xsl:copy-of select="'A36'"/>
			</xsl:when>
			<xsl:when test="$input='A37'">
				<xsl:copy-of select="'A37'"/>
			</xsl:when>
			<xsl:when test="$input='A38'">
				<xsl:copy-of select="'A38'"/>
			</xsl:when>
			<xsl:when test="$input='A39'">
				<xsl:copy-of select="'A39'"/>
			</xsl:when>
			<xsl:when test="$input='A4'">
				<xsl:copy-of select="'A4'"/>
			</xsl:when>
			<xsl:when test="$input='A40'">
				<xsl:copy-of select="'A40'"/>
			</xsl:when>
			<xsl:when test="$input='A41'">
				<xsl:copy-of select="'A41'"/>
			</xsl:when>
			<xsl:when test="$input='A42'">
				<xsl:copy-of select="'A42'"/>
			</xsl:when>
			<xsl:when test="$input='A43'">
				<xsl:copy-of select="'A43'"/>
			</xsl:when>
			<xsl:when test="$input='A44'">
				<xsl:copy-of select="'A44'"/>
			</xsl:when>
			<xsl:when test="$input='A45'">
				<xsl:copy-of select="'A45'"/>
			</xsl:when>
			<xsl:when test="$input='A47'">
				<xsl:copy-of select="'A47'"/>
			</xsl:when>
			<xsl:when test="$input='A48'">
				<xsl:copy-of select="'A48'"/>
			</xsl:when>
			<xsl:when test="$input='A49'">
				<xsl:copy-of select="'A49'"/>
			</xsl:when>
			<xsl:when test="$input='A5'">
				<xsl:copy-of select="'A5'"/>
			</xsl:when>
			<xsl:when test="$input='A50'">
				<xsl:copy-of select="'A50'"/>
			</xsl:when>
			<xsl:when test="$input='A51'">
				<xsl:copy-of select="'A51'"/>
			</xsl:when>
			<xsl:when test="$input='A52'">
				<xsl:copy-of select="'A52'"/>
			</xsl:when>
			<xsl:when test="$input='A53'">
				<xsl:copy-of select="'A53'"/>
			</xsl:when>
			<xsl:when test="$input='A54'">
				<xsl:copy-of select="'A54'"/>
			</xsl:when>
			<xsl:when test="$input='A55'">
				<xsl:copy-of select="'A55'"/>
			</xsl:when>
			<xsl:when test="$input='A56'">
				<xsl:copy-of select="'A56'"/>
			</xsl:when>
			<xsl:when test="$input='A57'">
				<xsl:copy-of select="'A57'"/>
			</xsl:when>
			<xsl:when test="$input='A58'">
				<xsl:copy-of select="'A58'"/>
			</xsl:when>
			<xsl:when test="$input='A59'">
				<xsl:copy-of select="'A59'"/>
			</xsl:when>
			<xsl:when test="$input='A6'">
				<xsl:copy-of select="'A6'"/>
			</xsl:when>
			<xsl:when test="$input='A60'">
				<xsl:copy-of select="'A60'"/>
			</xsl:when>
			<xsl:when test="$input='A61'">
				<xsl:copy-of select="'A61'"/>
			</xsl:when>
			<xsl:when test="$input='A62'">
				<xsl:copy-of select="'A62'"/>
			</xsl:when>
			<xsl:when test="$input='A63'">
				<xsl:copy-of select="'A63'"/>
			</xsl:when>
			<xsl:when test="$input='A64'">
				<xsl:copy-of select="'A64'"/>
			</xsl:when>
			<xsl:when test="$input='A65'">
				<xsl:copy-of select="'A65'"/>
			</xsl:when>
			<xsl:when test="$input='A66'">
				<xsl:copy-of select="'A66'"/>
			</xsl:when>
			<xsl:when test="$input='A67'">
				<xsl:copy-of select="'A67'"/>
			</xsl:when>
			<xsl:when test="$input='A68'">
				<xsl:copy-of select="'A68'"/>
			</xsl:when>
			<xsl:when test="$input='A69'">
				<xsl:copy-of select="'A69'"/>
			</xsl:when>
			<xsl:when test="$input='A7'">
				<xsl:copy-of select="'A7'"/>
			</xsl:when>
			<xsl:when test="$input='A70'">
				<xsl:copy-of select="'A70'"/>
			</xsl:when>
			<xsl:when test="$input='A71'">
				<xsl:copy-of select="'A71'"/>
			</xsl:when>
			<xsl:when test="$input='A73'">
				<xsl:copy-of select="'A73'"/>
			</xsl:when>
			<xsl:when test="$input='A74'">
				<xsl:copy-of select="'A74'"/>
			</xsl:when>
			<xsl:when test="$input='A75'">
				<xsl:copy-of select="'A75'"/>
			</xsl:when>
			<xsl:when test="$input='A76'">
				<xsl:copy-of select="'A76'"/>
			</xsl:when>
			<xsl:when test="$input='A77'">
				<xsl:copy-of select="'A77'"/>
			</xsl:when>
			<xsl:when test="$input='A78'">
				<xsl:copy-of select="'A78'"/>
			</xsl:when>
			<xsl:when test="$input='A79'">
				<xsl:copy-of select="'A79'"/>
			</xsl:when>
			<xsl:when test="$input='A8'">
				<xsl:copy-of select="'A8'"/>
			</xsl:when>
			<xsl:when test="$input='A80'">
				<xsl:copy-of select="'A80'"/>
			</xsl:when>
			<xsl:when test="$input='A81'">
				<xsl:copy-of select="'A81'"/>
			</xsl:when>
			<xsl:when test="$input='A82'">
				<xsl:copy-of select="'A82'"/>
			</xsl:when>
			<xsl:when test="$input='A83'">
				<xsl:copy-of select="'A83'"/>
			</xsl:when>
			<xsl:when test="$input='A84'">
				<xsl:copy-of select="'A84'"/>
			</xsl:when>
			<xsl:when test="$input='A85'">
				<xsl:copy-of select="'A85'"/>
			</xsl:when>
			<xsl:when test="$input='A86'">
				<xsl:copy-of select="'A86'"/>
			</xsl:when>
			<xsl:when test="$input='A87'">
				<xsl:copy-of select="'A87'"/>
			</xsl:when>
			<xsl:when test="$input='A88'">
				<xsl:copy-of select="'A88'"/>
			</xsl:when>
			<xsl:when test="$input='A89'">
				<xsl:copy-of select="'A89'"/>
			</xsl:when>
			<xsl:when test="$input='A9'">
				<xsl:copy-of select="'A9'"/>
			</xsl:when>
			<xsl:when test="$input='A90'">
				<xsl:copy-of select="'A90'"/>
			</xsl:when>
			<xsl:when test="$input='A91'">
				<xsl:copy-of select="'A91'"/>
			</xsl:when>
			<xsl:when test="$input='A93'">
				<xsl:copy-of select="'A93'"/>
			</xsl:when>
			<xsl:when test="$input='A94'">
				<xsl:copy-of select="'A94'"/>
			</xsl:when>
			<xsl:when test="$input='A95'">
				<xsl:copy-of select="'A95'"/>
			</xsl:when>
			<xsl:when test="$input='A96'">
				<xsl:copy-of select="'A96'"/>
			</xsl:when>
			<xsl:when test="$input='A97'">
				<xsl:copy-of select="'A97'"/>
			</xsl:when>
			<xsl:when test="$input='A98'">
				<xsl:copy-of select="'A98'"/>
			</xsl:when>
			<xsl:when test="$input='A99'">
				<xsl:copy-of select="'A99'"/>
			</xsl:when>
			<xsl:when test="$input='AA'">
				<xsl:copy-of select="'AA'"/>
			</xsl:when>
			<xsl:when test="$input='AB'">
				<xsl:copy-of select="'AB'"/>
			</xsl:when>
			<xsl:when test="$input='ACR'">
				<xsl:copy-of select="'ACR'"/>
			</xsl:when>
			<xsl:when test="$input='ACT'">
				<xsl:copy-of select="'ACT'"/>
			</xsl:when>
			<xsl:when test="$input='AD'">
				<xsl:copy-of select="'AD'"/>
			</xsl:when>
			<xsl:when test="$input='AE'">
				<xsl:copy-of select="'AE'"/>
			</xsl:when>
			<xsl:when test="$input='AH'">
				<xsl:copy-of select="'AH'"/>
			</xsl:when>
			<xsl:when test="$input='AI'">
				<xsl:copy-of select="'AI'"/>
			</xsl:when>
			<xsl:when test="$input='AK'">
				<xsl:copy-of select="'AK'"/>
			</xsl:when>
			<xsl:when test="$input='AL'">
				<xsl:copy-of select="'AL'"/>
			</xsl:when>
			<xsl:when test="$input='AMH'">
				<xsl:copy-of select="'AMH'"/>
			</xsl:when>
			<xsl:when test="$input='AMP'">
				<xsl:copy-of select="'AMP'"/>
			</xsl:when>
			<xsl:when test="$input='ANN'">
				<xsl:copy-of select="'ANN'"/>
			</xsl:when>
			<xsl:when test="$input='APZ'">
				<xsl:copy-of select="'APZ'"/>
			</xsl:when>
			<xsl:when test="$input='AQ'">
				<xsl:copy-of select="'AQ'"/>
			</xsl:when>
			<xsl:when test="$input='ARE'">
				<xsl:copy-of select="'ARE'"/>
			</xsl:when>
			<xsl:when test="$input='AS'">
				<xsl:copy-of select="'AS'"/>
			</xsl:when>
			<xsl:when test="$input='ASM'">
				<xsl:copy-of select="'ASM'"/>
			</xsl:when>
			<xsl:when test="$input='ASU'">
				<xsl:copy-of select="'ASU'"/>
			</xsl:when>
			<xsl:when test="$input='ATM'">
				<xsl:copy-of select="'ATM'"/>
			</xsl:when>
			<xsl:when test="$input='ATT'">
				<xsl:copy-of select="'ATT'"/>
			</xsl:when>
			<xsl:when test="$input='AY'">
				<xsl:copy-of select="'AY'"/>
			</xsl:when>
			<xsl:when test="$input='AZ'">
				<xsl:copy-of select="'AZ'"/>
			</xsl:when>
			<xsl:when test="$input='B1'">
				<xsl:copy-of select="'B1'"/>
			</xsl:when>
			<xsl:when test="$input='B10'">
				<xsl:copy-of select="'B10'"/>
			</xsl:when>
			<xsl:when test="$input='B11'">
				<xsl:copy-of select="'B11'"/>
			</xsl:when>
			<xsl:when test="$input='B12'">
				<xsl:copy-of select="'B12'"/>
			</xsl:when>
			<xsl:when test="$input='B13'">
				<xsl:copy-of select="'B13'"/>
			</xsl:when>
			<xsl:when test="$input='B14'">
				<xsl:copy-of select="'B14'"/>
			</xsl:when>
			<xsl:when test="$input='B15'">
				<xsl:copy-of select="'B15'"/>
			</xsl:when>
			<xsl:when test="$input='B16'">
				<xsl:copy-of select="'B16'"/>
			</xsl:when>
			<xsl:when test="$input='B17'">
				<xsl:copy-of select="'B17'"/>
			</xsl:when>
			<xsl:when test="$input='B18'">
				<xsl:copy-of select="'B18'"/>
			</xsl:when>
			<xsl:when test="$input='B19'">
				<xsl:copy-of select="'B19'"/>
			</xsl:when>
			<xsl:when test="$input='B20'">
				<xsl:copy-of select="'B20'"/>
			</xsl:when>
			<xsl:when test="$input='B21'">
				<xsl:copy-of select="'B21'"/>
			</xsl:when>
			<xsl:when test="$input='B22'">
				<xsl:copy-of select="'B22'"/>
			</xsl:when>
			<xsl:when test="$input='B23'">
				<xsl:copy-of select="'B23'"/>
			</xsl:when>
			<xsl:when test="$input='B24'">
				<xsl:copy-of select="'B24'"/>
			</xsl:when>
			<xsl:when test="$input='B25'">
				<xsl:copy-of select="'B25'"/>
			</xsl:when>
			<xsl:when test="$input='B26'">
				<xsl:copy-of select="'B26'"/>
			</xsl:when>
			<xsl:when test="$input='B27'">
				<xsl:copy-of select="'B27'"/>
			</xsl:when>
			<xsl:when test="$input='B28'">
				<xsl:copy-of select="'B28'"/>
			</xsl:when>
			<xsl:when test="$input='B29'">
				<xsl:copy-of select="'B29'"/>
			</xsl:when>
			<xsl:when test="$input='B3'">
				<xsl:copy-of select="'B3'"/>
			</xsl:when>
			<xsl:when test="$input='B30'">
				<xsl:copy-of select="'B30'"/>
			</xsl:when>
			<xsl:when test="$input='B31'">
				<xsl:copy-of select="'B31'"/>
			</xsl:when>
			<xsl:when test="$input='B32'">
				<xsl:copy-of select="'B32'"/>
			</xsl:when>
			<xsl:when test="$input='B33'">
				<xsl:copy-of select="'B33'"/>
			</xsl:when>
			<xsl:when test="$input='B34'">
				<xsl:copy-of select="'B34'"/>
			</xsl:when>
			<xsl:when test="$input='B35'">
				<xsl:copy-of select="'B35'"/>
			</xsl:when>
			<xsl:when test="$input='B36'">
				<xsl:copy-of select="'B36'"/>
			</xsl:when>
			<xsl:when test="$input='B37'">
				<xsl:copy-of select="'B37'"/>
			</xsl:when>
			<xsl:when test="$input='B38'">
				<xsl:copy-of select="'B38'"/>
			</xsl:when>
			<xsl:when test="$input='B39'">
				<xsl:copy-of select="'B39'"/>
			</xsl:when>
			<xsl:when test="$input='B4'">
				<xsl:copy-of select="'B4'"/>
			</xsl:when>
			<xsl:when test="$input='B40'">
				<xsl:copy-of select="'B40'"/>
			</xsl:when>
			<xsl:when test="$input='B41'">
				<xsl:copy-of select="'B41'"/>
			</xsl:when>
			<xsl:when test="$input='B42'">
				<xsl:copy-of select="'B42'"/>
			</xsl:when>
			<xsl:when test="$input='B43'">
				<xsl:copy-of select="'B43'"/>
			</xsl:when>
			<xsl:when test="$input='B44'">
				<xsl:copy-of select="'B44'"/>
			</xsl:when>
			<xsl:when test="$input='B45'">
				<xsl:copy-of select="'B45'"/>
			</xsl:when>
			<xsl:when test="$input='B46'">
				<xsl:copy-of select="'B46'"/>
			</xsl:when>
			<xsl:when test="$input='B47'">
				<xsl:copy-of select="'B47'"/>
			</xsl:when>
			<xsl:when test="$input='B48'">
				<xsl:copy-of select="'B48'"/>
			</xsl:when>
			<xsl:when test="$input='B49'">
				<xsl:copy-of select="'B49'"/>
			</xsl:when>
			<xsl:when test="$input='B50'">
				<xsl:copy-of select="'B50'"/>
			</xsl:when>
			<xsl:when test="$input='B51'">
				<xsl:copy-of select="'B51'"/>
			</xsl:when>
			<xsl:when test="$input='B52'">
				<xsl:copy-of select="'B52'"/>
			</xsl:when>
			<xsl:when test="$input='B53'">
				<xsl:copy-of select="'B53'"/>
			</xsl:when>
			<xsl:when test="$input='B54'">
				<xsl:copy-of select="'B54'"/>
			</xsl:when>
			<xsl:when test="$input='B55'">
				<xsl:copy-of select="'B55'"/>
			</xsl:when>
			<xsl:when test="$input='B56'">
				<xsl:copy-of select="'B56'"/>
			</xsl:when>
			<xsl:when test="$input='B57'">
				<xsl:copy-of select="'B57'"/>
			</xsl:when>
			<xsl:when test="$input='B58'">
				<xsl:copy-of select="'B58'"/>
			</xsl:when>
			<xsl:when test="$input='B59'">
				<xsl:copy-of select="'B59'"/>
			</xsl:when>
			<xsl:when test="$input='B60'">
				<xsl:copy-of select="'B60'"/>
			</xsl:when>
			<xsl:when test="$input='B61'">
				<xsl:copy-of select="'B61'"/>
			</xsl:when>
			<xsl:when test="$input='B62'">
				<xsl:copy-of select="'B62'"/>
			</xsl:when>
			<xsl:when test="$input='B63'">
				<xsl:copy-of select="'B63'"/>
			</xsl:when>
			<xsl:when test="$input='B64'">
				<xsl:copy-of select="'B64'"/>
			</xsl:when>
			<xsl:when test="$input='B65'">
				<xsl:copy-of select="'B65'"/>
			</xsl:when>
			<xsl:when test="$input='B66'">
				<xsl:copy-of select="'B66'"/>
			</xsl:when>
			<xsl:when test="$input='B67'">
				<xsl:copy-of select="'B67'"/>
			</xsl:when>
			<xsl:when test="$input='B68'">
				<xsl:copy-of select="'B68'"/>
			</xsl:when>
			<xsl:when test="$input='B69'">
				<xsl:copy-of select="'B69'"/>
			</xsl:when>
			<xsl:when test="$input='B7'">
				<xsl:copy-of select="'B7'"/>
			</xsl:when>
			<xsl:when test="$input='B70'">
				<xsl:copy-of select="'B70'"/>
			</xsl:when>
			<xsl:when test="$input='B71'">
				<xsl:copy-of select="'B71'"/>
			</xsl:when>
			<xsl:when test="$input='B72'">
				<xsl:copy-of select="'B72'"/>
			</xsl:when>
			<xsl:when test="$input='B73'">
				<xsl:copy-of select="'B73'"/>
			</xsl:when>
			<xsl:when test="$input='B74'">
				<xsl:copy-of select="'B74'"/>
			</xsl:when>
			<xsl:when test="$input='B75'">
				<xsl:copy-of select="'B75'"/>
			</xsl:when>
			<xsl:when test="$input='B76'">
				<xsl:copy-of select="'B76'"/>
			</xsl:when>
			<xsl:when test="$input='B77'">
				<xsl:copy-of select="'B77'"/>
			</xsl:when>
			<xsl:when test="$input='B78'">
				<xsl:copy-of select="'B78'"/>
			</xsl:when>
			<xsl:when test="$input='B79'">
				<xsl:copy-of select="'B79'"/>
			</xsl:when>
			<xsl:when test="$input='B8'">
				<xsl:copy-of select="'B8'"/>
			</xsl:when>
			<xsl:when test="$input='B80'">
				<xsl:copy-of select="'B80'"/>
			</xsl:when>
			<xsl:when test="$input='B81'">
				<xsl:copy-of select="'B81'"/>
			</xsl:when>
			<xsl:when test="$input='B82'">
				<xsl:copy-of select="'B82'"/>
			</xsl:when>
			<xsl:when test="$input='B83'">
				<xsl:copy-of select="'B83'"/>
			</xsl:when>
			<xsl:when test="$input='B84'">
				<xsl:copy-of select="'B84'"/>
			</xsl:when>
			<xsl:when test="$input='B85'">
				<xsl:copy-of select="'B85'"/>
			</xsl:when>
			<xsl:when test="$input='B86'">
				<xsl:copy-of select="'B86'"/>
			</xsl:when>
			<xsl:when test="$input='B87'">
				<xsl:copy-of select="'B87'"/>
			</xsl:when>
			<xsl:when test="$input='B88'">
				<xsl:copy-of select="'B88'"/>
			</xsl:when>
			<xsl:when test="$input='B89'">
				<xsl:copy-of select="'B89'"/>
			</xsl:when>
			<xsl:when test="$input='B90'">
				<xsl:copy-of select="'B90'"/>
			</xsl:when>
			<xsl:when test="$input='B91'">
				<xsl:copy-of select="'B91'"/>
			</xsl:when>
			<xsl:when test="$input='B92'">
				<xsl:copy-of select="'B92'"/>
			</xsl:when>
			<xsl:when test="$input='B93'">
				<xsl:copy-of select="'B93'"/>
			</xsl:when>
			<xsl:when test="$input='B94'">
				<xsl:copy-of select="'B94'"/>
			</xsl:when>
			<xsl:when test="$input='B95'">
				<xsl:copy-of select="'B95'"/>
			</xsl:when>
			<xsl:when test="$input='B96'">
				<xsl:copy-of select="'B96'"/>
			</xsl:when>
			<xsl:when test="$input='B97'">
				<xsl:copy-of select="'B97'"/>
			</xsl:when>
			<xsl:when test="$input='B98'">
				<xsl:copy-of select="'B98'"/>
			</xsl:when>
			<xsl:when test="$input='B99'">
				<xsl:copy-of select="'B99'"/>
			</xsl:when>
			<xsl:when test="$input='BAR'">
				<xsl:copy-of select="'BAR'"/>
			</xsl:when>
			<xsl:when test="$input='BB'">
				<xsl:copy-of select="'BB'"/>
			</xsl:when>
			<xsl:when test="$input='BFT'">
				<xsl:copy-of select="'BFT'"/>
			</xsl:when>
			<xsl:when test="$input='BHP'">
				<xsl:copy-of select="'BHP'"/>
			</xsl:when>
			<xsl:when test="$input='BIL'">
				<xsl:copy-of select="'BIL'"/>
			</xsl:when>
			<xsl:when test="$input='BLD'">
				<xsl:copy-of select="'BLD'"/>
			</xsl:when>
			<xsl:when test="$input='BLL'">
				<xsl:copy-of select="'BLL'"/>
			</xsl:when>
			<xsl:when test="$input='BP'">
				<xsl:copy-of select="'BP'"/>
			</xsl:when>
			<xsl:when test="$input='BQL'">
				<xsl:copy-of select="'BQL'"/>
			</xsl:when>
			<xsl:when test="$input='BTU'">
				<xsl:copy-of select="'BTU'"/>
			</xsl:when>
			<xsl:when test="$input='BUA'">
				<xsl:copy-of select="'BUA'"/>
			</xsl:when>
			<xsl:when test="$input='BUI'">
				<xsl:copy-of select="'BUI'"/>
			</xsl:when>
			<xsl:when test="$input='C0'">
				<xsl:copy-of select="'C0'"/>
			</xsl:when>
			<xsl:when test="$input='C10'">
				<xsl:copy-of select="'C10'"/>
			</xsl:when>
			<xsl:when test="$input='C11'">
				<xsl:copy-of select="'C11'"/>
			</xsl:when>
			<xsl:when test="$input='C12'">
				<xsl:copy-of select="'C12'"/>
			</xsl:when>
			<xsl:when test="$input='C13'">
				<xsl:copy-of select="'C13'"/>
			</xsl:when>
			<xsl:when test="$input='C14'">
				<xsl:copy-of select="'C14'"/>
			</xsl:when>
			<xsl:when test="$input='C15'">
				<xsl:copy-of select="'C15'"/>
			</xsl:when>
			<xsl:when test="$input='C16'">
				<xsl:copy-of select="'C16'"/>
			</xsl:when>
			<xsl:when test="$input='C17'">
				<xsl:copy-of select="'C17'"/>
			</xsl:when>
			<xsl:when test="$input='C18'">
				<xsl:copy-of select="'C18'"/>
			</xsl:when>
			<xsl:when test="$input='C19'">
				<xsl:copy-of select="'C19'"/>
			</xsl:when>
			<xsl:when test="$input='C20'">
				<xsl:copy-of select="'C20'"/>
			</xsl:when>
			<xsl:when test="$input='C21'">
				<xsl:copy-of select="'C21'"/>
			</xsl:when>
			<xsl:when test="$input='C22'">
				<xsl:copy-of select="'C22'"/>
			</xsl:when>
			<xsl:when test="$input='C23'">
				<xsl:copy-of select="'C23'"/>
			</xsl:when>
			<xsl:when test="$input='C24'">
				<xsl:copy-of select="'C24'"/>
			</xsl:when>
			<xsl:when test="$input='C25'">
				<xsl:copy-of select="'C25'"/>
			</xsl:when>
			<xsl:when test="$input='C26'">
				<xsl:copy-of select="'C26'"/>
			</xsl:when>
			<xsl:when test="$input='C27'">
				<xsl:copy-of select="'C27'"/>
			</xsl:when>
			<xsl:when test="$input='C28'">
				<xsl:copy-of select="'C28'"/>
			</xsl:when>
			<xsl:when test="$input='C29'">
				<xsl:copy-of select="'C29'"/>
			</xsl:when>
			<xsl:when test="$input='C3'">
				<xsl:copy-of select="'C3'"/>
			</xsl:when>
			<xsl:when test="$input='C30'">
				<xsl:copy-of select="'C30'"/>
			</xsl:when>
			<xsl:when test="$input='C31'">
				<xsl:copy-of select="'C31'"/>
			</xsl:when>
			<xsl:when test="$input='C32'">
				<xsl:copy-of select="'C32'"/>
			</xsl:when>
			<xsl:when test="$input='C33'">
				<xsl:copy-of select="'C33'"/>
			</xsl:when>
			<xsl:when test="$input='C34'">
				<xsl:copy-of select="'C34'"/>
			</xsl:when>
			<xsl:when test="$input='C35'">
				<xsl:copy-of select="'C35'"/>
			</xsl:when>
			<xsl:when test="$input='C36'">
				<xsl:copy-of select="'C36'"/>
			</xsl:when>
			<xsl:when test="$input='C37'">
				<xsl:copy-of select="'C37'"/>
			</xsl:when>
			<xsl:when test="$input='C38'">
				<xsl:copy-of select="'C38'"/>
			</xsl:when>
			<xsl:when test="$input='C39'">
				<xsl:copy-of select="'C39'"/>
			</xsl:when>
			<xsl:when test="$input='C40'">
				<xsl:copy-of select="'C40'"/>
			</xsl:when>
			<xsl:when test="$input='C41'">
				<xsl:copy-of select="'C41'"/>
			</xsl:when>
			<xsl:when test="$input='C42'">
				<xsl:copy-of select="'C42'"/>
			</xsl:when>
			<xsl:when test="$input='C43'">
				<xsl:copy-of select="'C43'"/>
			</xsl:when>
			<xsl:when test="$input='C44'">
				<xsl:copy-of select="'C44'"/>
			</xsl:when>
			<xsl:when test="$input='C45'">
				<xsl:copy-of select="'C45'"/>
			</xsl:when>
			<xsl:when test="$input='C46'">
				<xsl:copy-of select="'C46'"/>
			</xsl:when>
			<xsl:when test="$input='C47'">
				<xsl:copy-of select="'C47'"/>
			</xsl:when>
			<xsl:when test="$input='C48'">
				<xsl:copy-of select="'C48'"/>
			</xsl:when>
			<xsl:when test="$input='C49'">
				<xsl:copy-of select="'C49'"/>
			</xsl:when>
			<xsl:when test="$input='C50'">
				<xsl:copy-of select="'C50'"/>
			</xsl:when>
			<xsl:when test="$input='C51'">
				<xsl:copy-of select="'C51'"/>
			</xsl:when>
			<xsl:when test="$input='C52'">
				<xsl:copy-of select="'C52'"/>
			</xsl:when>
			<xsl:when test="$input='C53'">
				<xsl:copy-of select="'C53'"/>
			</xsl:when>
			<xsl:when test="$input='C54'">
				<xsl:copy-of select="'C54'"/>
			</xsl:when>
			<xsl:when test="$input='C55'">
				<xsl:copy-of select="'C55'"/>
			</xsl:when>
			<xsl:when test="$input='C56'">
				<xsl:copy-of select="'C56'"/>
			</xsl:when>
			<xsl:when test="$input='C57'">
				<xsl:copy-of select="'C57'"/>
			</xsl:when>
			<xsl:when test="$input='C58'">
				<xsl:copy-of select="'C58'"/>
			</xsl:when>
			<xsl:when test="$input='C59'">
				<xsl:copy-of select="'C59'"/>
			</xsl:when>
			<xsl:when test="$input='C60'">
				<xsl:copy-of select="'C60'"/>
			</xsl:when>
			<xsl:when test="$input='C61'">
				<xsl:copy-of select="'C61'"/>
			</xsl:when>
			<xsl:when test="$input='C62'">
				<xsl:copy-of select="'C62'"/>
			</xsl:when>
			<xsl:when test="$input='C63'">
				<xsl:copy-of select="'C63'"/>
			</xsl:when>
			<xsl:when test="$input='C64'">
				<xsl:copy-of select="'C64'"/>
			</xsl:when>
			<xsl:when test="$input='C65'">
				<xsl:copy-of select="'C65'"/>
			</xsl:when>
			<xsl:when test="$input='C66'">
				<xsl:copy-of select="'C66'"/>
			</xsl:when>
			<xsl:when test="$input='C67'">
				<xsl:copy-of select="'C67'"/>
			</xsl:when>
			<xsl:when test="$input='C68'">
				<xsl:copy-of select="'C68'"/>
			</xsl:when>
			<xsl:when test="$input='C69'">
				<xsl:copy-of select="'C69'"/>
			</xsl:when>
			<xsl:when test="$input='C7'">
				<xsl:copy-of select="'C7'"/>
			</xsl:when>
			<xsl:when test="$input='C70'">
				<xsl:copy-of select="'C70'"/>
			</xsl:when>
			<xsl:when test="$input='C71'">
				<xsl:copy-of select="'C71'"/>
			</xsl:when>
			<xsl:when test="$input='C72'">
				<xsl:copy-of select="'C72'"/>
			</xsl:when>
			<xsl:when test="$input='C73'">
				<xsl:copy-of select="'C73'"/>
			</xsl:when>
			<xsl:when test="$input='C74'">
				<xsl:copy-of select="'C74'"/>
			</xsl:when>
			<xsl:when test="$input='C75'">
				<xsl:copy-of select="'C75'"/>
			</xsl:when>
			<xsl:when test="$input='C76'">
				<xsl:copy-of select="'C76'"/>
			</xsl:when>
			<xsl:when test="$input='C78'">
				<xsl:copy-of select="'C78'"/>
			</xsl:when>
			<xsl:when test="$input='C79'">
				<xsl:copy-of select="'C79'"/>
			</xsl:when>
			<xsl:when test="$input='C8'">
				<xsl:copy-of select="'C8'"/>
			</xsl:when>
			<xsl:when test="$input='C80'">
				<xsl:copy-of select="'C80'"/>
			</xsl:when>
			<xsl:when test="$input='C81'">
				<xsl:copy-of select="'C81'"/>
			</xsl:when>
			<xsl:when test="$input='C82'">
				<xsl:copy-of select="'C82'"/>
			</xsl:when>
			<xsl:when test="$input='C83'">
				<xsl:copy-of select="'C83'"/>
			</xsl:when>
			<xsl:when test="$input='C84'">
				<xsl:copy-of select="'C84'"/>
			</xsl:when>
			<xsl:when test="$input='C85'">
				<xsl:copy-of select="'C85'"/>
			</xsl:when>
			<xsl:when test="$input='C86'">
				<xsl:copy-of select="'C86'"/>
			</xsl:when>
			<xsl:when test="$input='C87'">
				<xsl:copy-of select="'C87'"/>
			</xsl:when>
			<xsl:when test="$input='C88'">
				<xsl:copy-of select="'C88'"/>
			</xsl:when>
			<xsl:when test="$input='C89'">
				<xsl:copy-of select="'C89'"/>
			</xsl:when>
			<xsl:when test="$input='C9'">
				<xsl:copy-of select="'C9'"/>
			</xsl:when>
			<xsl:when test="$input='C90'">
				<xsl:copy-of select="'C90'"/>
			</xsl:when>
			<xsl:when test="$input='C91'">
				<xsl:copy-of select="'C91'"/>
			</xsl:when>
			<xsl:when test="$input='C92'">
				<xsl:copy-of select="'C92'"/>
			</xsl:when>
			<xsl:when test="$input='C93'">
				<xsl:copy-of select="'C93'"/>
			</xsl:when>
			<xsl:when test="$input='C94'">
				<xsl:copy-of select="'C94'"/>
			</xsl:when>
			<xsl:when test="$input='C95'">
				<xsl:copy-of select="'C95'"/>
			</xsl:when>
			<xsl:when test="$input='C96'">
				<xsl:copy-of select="'C96'"/>
			</xsl:when>
			<xsl:when test="$input='C97'">
				<xsl:copy-of select="'C97'"/>
			</xsl:when>
			<xsl:when test="$input='C99'">
				<xsl:copy-of select="'C99'"/>
			</xsl:when>
			<xsl:when test="$input='CCT'">
				<xsl:copy-of select="'CCT'"/>
			</xsl:when>
			<xsl:when test="$input='CDL'">
				<xsl:copy-of select="'CDL'"/>
			</xsl:when>
			<xsl:when test="$input='CEL'">
				<xsl:copy-of select="'CEL'"/>
			</xsl:when>
			<xsl:when test="$input='CEN'">
				<xsl:copy-of select="'CEN'"/>
			</xsl:when>
			<xsl:when test="$input='CG'">
				<xsl:copy-of select="'CG'"/>
			</xsl:when>
			<xsl:when test="$input='CGM'">
				<xsl:copy-of select="'CGM'"/>
			</xsl:when>
			<xsl:when test="$input='CKG'">
				<xsl:copy-of select="'CKG'"/>
			</xsl:when>
			<xsl:when test="$input='CLF'">
				<xsl:copy-of select="'CLF'"/>
			</xsl:when>
			<xsl:when test="$input='CLT'">
				<xsl:copy-of select="'CLT'"/>
			</xsl:when>
			<xsl:when test="$input='CMK'">
				<xsl:copy-of select="'CMK'"/>
			</xsl:when>
			<xsl:when test="$input='CMQ'">
				<xsl:copy-of select="'CMQ'"/>
			</xsl:when>
			<xsl:when test="$input='CMT'">
				<xsl:copy-of select="'CMT'"/>
			</xsl:when>
			<xsl:when test="$input='CNP'">
				<xsl:copy-of select="'CNP'"/>
			</xsl:when>
			<xsl:when test="$input='CNT'">
				<xsl:copy-of select="'CNT'"/>
			</xsl:when>
			<xsl:when test="$input='COU'">
				<xsl:copy-of select="'COU'"/>
			</xsl:when>
			<xsl:when test="$input='CTG'">
				<xsl:copy-of select="'CTG'"/>
			</xsl:when>
			<xsl:when test="$input='CTM'">
				<xsl:copy-of select="'CTM'"/>
			</xsl:when>
			<xsl:when test="$input='CTN'">
				<xsl:copy-of select="'CTN'"/>
			</xsl:when>
			<xsl:when test="$input='CUR'">
				<xsl:copy-of select="'CUR'"/>
			</xsl:when>
			<xsl:when test="$input='CWA'">
				<xsl:copy-of select="'CWA'"/>
			</xsl:when>
			<xsl:when test="$input='CWI'">
				<xsl:copy-of select="'CWI'"/>
			</xsl:when>
			<xsl:when test="$input='D03'">
				<xsl:copy-of select="'D03'"/>
			</xsl:when>
			<xsl:when test="$input='D04'">
				<xsl:copy-of select="'D04'"/>
			</xsl:when>
			<xsl:when test="$input='D1'">
				<xsl:copy-of select="'D1'"/>
			</xsl:when>
			<xsl:when test="$input='D10'">
				<xsl:copy-of select="'D10'"/>
			</xsl:when>
			<xsl:when test="$input='D11'">
				<xsl:copy-of select="'D11'"/>
			</xsl:when>
			<xsl:when test="$input='D12'">
				<xsl:copy-of select="'D12'"/>
			</xsl:when>
			<xsl:when test="$input='D13'">
				<xsl:copy-of select="'D13'"/>
			</xsl:when>
			<xsl:when test="$input='D15'">
				<xsl:copy-of select="'D15'"/>
			</xsl:when>
			<xsl:when test="$input='D16'">
				<xsl:copy-of select="'D16'"/>
			</xsl:when>
			<xsl:when test="$input='D17'">
				<xsl:copy-of select="'D17'"/>
			</xsl:when>
			<xsl:when test="$input='D18'">
				<xsl:copy-of select="'D18'"/>
			</xsl:when>
			<xsl:when test="$input='D19'">
				<xsl:copy-of select="'D19'"/>
			</xsl:when>
			<xsl:when test="$input='D2'">
				<xsl:copy-of select="'D2'"/>
			</xsl:when>
			<xsl:when test="$input='D20'">
				<xsl:copy-of select="'D20'"/>
			</xsl:when>
			<xsl:when test="$input='D21'">
				<xsl:copy-of select="'D21'"/>
			</xsl:when>
			<xsl:when test="$input='D22'">
				<xsl:copy-of select="'D22'"/>
			</xsl:when>
			<xsl:when test="$input='D23'">
				<xsl:copy-of select="'D23'"/>
			</xsl:when>
			<xsl:when test="$input='D24'">
				<xsl:copy-of select="'D24'"/>
			</xsl:when>
			<xsl:when test="$input='D25'">
				<xsl:copy-of select="'D25'"/>
			</xsl:when>
			<xsl:when test="$input='D26'">
				<xsl:copy-of select="'D26'"/>
			</xsl:when>
			<xsl:when test="$input='D27'">
				<xsl:copy-of select="'D27'"/>
			</xsl:when>
			<xsl:when test="$input='D29'">
				<xsl:copy-of select="'D29'"/>
			</xsl:when>
			<xsl:when test="$input='D30'">
				<xsl:copy-of select="'D30'"/>
			</xsl:when>
			<xsl:when test="$input='D31'">
				<xsl:copy-of select="'D31'"/>
			</xsl:when>
			<xsl:when test="$input='D32'">
				<xsl:copy-of select="'D32'"/>
			</xsl:when>
			<xsl:when test="$input='D33'">
				<xsl:copy-of select="'D33'"/>
			</xsl:when>
			<xsl:when test="$input='D34'">
				<xsl:copy-of select="'D34'"/>
			</xsl:when>
			<xsl:when test="$input='D35'">
				<xsl:copy-of select="'D35'"/>
			</xsl:when>
			<xsl:when test="$input='D36'">
				<xsl:copy-of select="'D36'"/>
			</xsl:when>
			<xsl:when test="$input='D37'">
				<xsl:copy-of select="'D37'"/>
			</xsl:when>
			<xsl:when test="$input='D38'">
				<xsl:copy-of select="'D38'"/>
			</xsl:when>
			<xsl:when test="$input='D39'">
				<xsl:copy-of select="'D39'"/>
			</xsl:when>
			<xsl:when test="$input='D41'">
				<xsl:copy-of select="'D41'"/>
			</xsl:when>
			<xsl:when test="$input='D42'">
				<xsl:copy-of select="'D42'"/>
			</xsl:when>
			<xsl:when test="$input='D43'">
				<xsl:copy-of select="'D43'"/>
			</xsl:when>
			<xsl:when test="$input='D44'">
				<xsl:copy-of select="'D44'"/>
			</xsl:when>
			<xsl:when test="$input='D45'">
				<xsl:copy-of select="'D45'"/>
			</xsl:when>
			<xsl:when test="$input='D46'">
				<xsl:copy-of select="'D46'"/>
			</xsl:when>
			<xsl:when test="$input='D47'">
				<xsl:copy-of select="'D47'"/>
			</xsl:when>
			<xsl:when test="$input='D48'">
				<xsl:copy-of select="'D48'"/>
			</xsl:when>
			<xsl:when test="$input='D49'">
				<xsl:copy-of select="'D49'"/>
			</xsl:when>
			<xsl:when test="$input='D5'">
				<xsl:copy-of select="'D5'"/>
			</xsl:when>
			<xsl:when test="$input='D50'">
				<xsl:copy-of select="'D50'"/>
			</xsl:when>
			<xsl:when test="$input='D51'">
				<xsl:copy-of select="'D51'"/>
			</xsl:when>
			<xsl:when test="$input='D52'">
				<xsl:copy-of select="'D52'"/>
			</xsl:when>
			<xsl:when test="$input='D53'">
				<xsl:copy-of select="'D53'"/>
			</xsl:when>
			<xsl:when test="$input='D54'">
				<xsl:copy-of select="'D54'"/>
			</xsl:when>
			<xsl:when test="$input='D55'">
				<xsl:copy-of select="'D55'"/>
			</xsl:when>
			<xsl:when test="$input='D56'">
				<xsl:copy-of select="'D56'"/>
			</xsl:when>
			<xsl:when test="$input='D57'">
				<xsl:copy-of select="'D57'"/>
			</xsl:when>
			<xsl:when test="$input='D58'">
				<xsl:copy-of select="'D58'"/>
			</xsl:when>
			<xsl:when test="$input='D59'">
				<xsl:copy-of select="'D59'"/>
			</xsl:when>
			<xsl:when test="$input='D6'">
				<xsl:copy-of select="'D6'"/>
			</xsl:when>
			<xsl:when test="$input='D60'">
				<xsl:copy-of select="'D60'"/>
			</xsl:when>
			<xsl:when test="$input='D61'">
				<xsl:copy-of select="'D61'"/>
			</xsl:when>
			<xsl:when test="$input='D62'">
				<xsl:copy-of select="'D62'"/>
			</xsl:when>
			<xsl:when test="$input='D63'">
				<xsl:copy-of select="'D63'"/>
			</xsl:when>
			<xsl:when test="$input='D65'">
				<xsl:copy-of select="'D65'"/>
			</xsl:when>
			<xsl:when test="$input='D68'">
				<xsl:copy-of select="'D68'"/>
			</xsl:when>
			<xsl:when test="$input='D69'">
				<xsl:copy-of select="'D69'"/>
			</xsl:when>
			<xsl:when test="$input='D70'">
				<xsl:copy-of select="'D70'"/>
			</xsl:when>
			<xsl:when test="$input='D71'">
				<xsl:copy-of select="'D71'"/>
			</xsl:when>
			<xsl:when test="$input='D72'">
				<xsl:copy-of select="'D72'"/>
			</xsl:when>
			<xsl:when test="$input='D73'">
				<xsl:copy-of select="'D73'"/>
			</xsl:when>
			<xsl:when test="$input='D74'">
				<xsl:copy-of select="'D74'"/>
			</xsl:when>
			<xsl:when test="$input='D75'">
				<xsl:copy-of select="'D75'"/>
			</xsl:when>
			<xsl:when test="$input='D76'">
				<xsl:copy-of select="'D76'"/>
			</xsl:when>
			<xsl:when test="$input='D77'">
				<xsl:copy-of select="'D77'"/>
			</xsl:when>
			<xsl:when test="$input='D78'">
				<xsl:copy-of select="'D78'"/>
			</xsl:when>
			<xsl:when test="$input='D80'">
				<xsl:copy-of select="'D80'"/>
			</xsl:when>
			<xsl:when test="$input='D81'">
				<xsl:copy-of select="'D81'"/>
			</xsl:when>
			<xsl:when test="$input='D82'">
				<xsl:copy-of select="'D82'"/>
			</xsl:when>
			<xsl:when test="$input='D83'">
				<xsl:copy-of select="'D83'"/>
			</xsl:when>
			<xsl:when test="$input='D85'">
				<xsl:copy-of select="'D85'"/>
			</xsl:when>
			<xsl:when test="$input='D86'">
				<xsl:copy-of select="'D86'"/>
			</xsl:when>
			<xsl:when test="$input='D87'">
				<xsl:copy-of select="'D87'"/>
			</xsl:when>
			<xsl:when test="$input='D88'">
				<xsl:copy-of select="'D88'"/>
			</xsl:when>
			<xsl:when test="$input='D89'">
				<xsl:copy-of select="'D89'"/>
			</xsl:when>
			<xsl:when test="$input='D9'">
				<xsl:copy-of select="'D9'"/>
			</xsl:when>
			<xsl:when test="$input='D91'">
				<xsl:copy-of select="'D91'"/>
			</xsl:when>
			<xsl:when test="$input='D93'">
				<xsl:copy-of select="'D93'"/>
			</xsl:when>
			<xsl:when test="$input='D94'">
				<xsl:copy-of select="'D94'"/>
			</xsl:when>
			<xsl:when test="$input='D95'">
				<xsl:copy-of select="'D95'"/>
			</xsl:when>
			<xsl:when test="$input='DAA'">
				<xsl:copy-of select="'DAA'"/>
			</xsl:when>
			<xsl:when test="$input='DAD'">
				<xsl:copy-of select="'DAD'"/>
			</xsl:when>
			<xsl:when test="$input='DAY'">
				<xsl:copy-of select="'DAY'"/>
			</xsl:when>
			<xsl:when test="$input='DB'">
				<xsl:copy-of select="'DB'"/>
			</xsl:when>
			<xsl:when test="$input='DD'">
				<xsl:copy-of select="'DD'"/>
			</xsl:when>
			<xsl:when test="$input='DEC'">
				<xsl:copy-of select="'DEC'"/>
			</xsl:when>
			<xsl:when test="$input='DG'">
				<xsl:copy-of select="'DG'"/>
			</xsl:when>
			<xsl:when test="$input='DJ'">
				<xsl:copy-of select="'DJ'"/>
			</xsl:when>
			<xsl:when test="$input='DLT'">
				<xsl:copy-of select="'DLT'"/>
			</xsl:when>
			<xsl:when test="$input='DMA'">
				<xsl:copy-of select="'DMA'"/>
			</xsl:when>
			<xsl:when test="$input='DMK'">
				<xsl:copy-of select="'DMK'"/>
			</xsl:when>
			<xsl:when test="$input='DMO'">
				<xsl:copy-of select="'DMO'"/>
			</xsl:when>
			<xsl:when test="$input='DMQ'">
				<xsl:copy-of select="'DMQ'"/>
			</xsl:when>
			<xsl:when test="$input='DMT'">
				<xsl:copy-of select="'DMT'"/>
			</xsl:when>
			<xsl:when test="$input='DN'">
				<xsl:copy-of select="'DN'"/>
			</xsl:when>
			<xsl:when test="$input='DPC'">
				<xsl:copy-of select="'DPC'"/>
			</xsl:when>
			<xsl:when test="$input='DPR'">
				<xsl:copy-of select="'DPR'"/>
			</xsl:when>
			<xsl:when test="$input='DPT'">
				<xsl:copy-of select="'DPT'"/>
			</xsl:when>
			<xsl:when test="$input='DRA'">
				<xsl:copy-of select="'DRA'"/>
			</xsl:when>
			<xsl:when test="$input='DRI'">
				<xsl:copy-of select="'DRI'"/>
			</xsl:when>
			<xsl:when test="$input='DRL'">
				<xsl:copy-of select="'DRL'"/>
			</xsl:when>
			<xsl:when test="$input='DT'">
				<xsl:copy-of select="'DT'"/>
			</xsl:when>
			<xsl:when test="$input='DTN'">
				<xsl:copy-of select="'DTN'"/>
			</xsl:when>
			<xsl:when test="$input='DU'">
				<xsl:copy-of select="'DU'"/>
			</xsl:when>
			<xsl:when test="$input='DWT'">
				<xsl:copy-of select="'DWT'"/>
			</xsl:when>
			<xsl:when test="$input='DX'">
				<xsl:copy-of select="'DX'"/>
			</xsl:when>
			<xsl:when test="$input='DZN'">
				<xsl:copy-of select="'DZN'"/>
			</xsl:when>
			<xsl:when test="$input='DZP'">
				<xsl:copy-of select="'DZP'"/>
			</xsl:when>
			<xsl:when test="$input='E01'">
				<xsl:copy-of select="'E01'"/>
			</xsl:when>
			<xsl:when test="$input='E07'">
				<xsl:copy-of select="'E07'"/>
			</xsl:when>
			<xsl:when test="$input='E08'">
				<xsl:copy-of select="'E08'"/>
			</xsl:when>
			<xsl:when test="$input='E09'">
				<xsl:copy-of select="'E09'"/>
			</xsl:when>
			<xsl:when test="$input='E10'">
				<xsl:copy-of select="'E10'"/>
			</xsl:when>
			<xsl:when test="$input='E11'">
				<xsl:copy-of select="'E11'"/>
			</xsl:when>
			<xsl:when test="$input='E12'">
				<xsl:copy-of select="'E12'"/>
			</xsl:when>
			<xsl:when test="$input='E14'">
				<xsl:copy-of select="'E14'"/>
			</xsl:when>
			<xsl:when test="$input='E15'">
				<xsl:copy-of select="'E15'"/>
			</xsl:when>
			<xsl:when test="$input='E16'">
				<xsl:copy-of select="'E16'"/>
			</xsl:when>
			<xsl:when test="$input='E17'">
				<xsl:copy-of select="'E17'"/>
			</xsl:when>
			<xsl:when test="$input='E18'">
				<xsl:copy-of select="'E18'"/>
			</xsl:when>
			<xsl:when test="$input='E19'">
				<xsl:copy-of select="'E19'"/>
			</xsl:when>
			<xsl:when test="$input='E20'">
				<xsl:copy-of select="'E20'"/>
			</xsl:when>
			<xsl:when test="$input='E21'">
				<xsl:copy-of select="'E21'"/>
			</xsl:when>
			<xsl:when test="$input='E22'">
				<xsl:copy-of select="'E22'"/>
			</xsl:when>
			<xsl:when test="$input='E23'">
				<xsl:copy-of select="'E23'"/>
			</xsl:when>
			<xsl:when test="$input='E25'">
				<xsl:copy-of select="'E25'"/>
			</xsl:when>
			<xsl:when test="$input='E27'">
				<xsl:copy-of select="'E27'"/>
			</xsl:when>
			<xsl:when test="$input='E28'">
				<xsl:copy-of select="'E28'"/>
			</xsl:when>
			<xsl:when test="$input='E30'">
				<xsl:copy-of select="'E30'"/>
			</xsl:when>
			<xsl:when test="$input='E31'">
				<xsl:copy-of select="'E31'"/>
			</xsl:when>
			<xsl:when test="$input='E32'">
				<xsl:copy-of select="'E32'"/>
			</xsl:when>
			<xsl:when test="$input='E33'">
				<xsl:copy-of select="'E33'"/>
			</xsl:when>
			<xsl:when test="$input='E34'">
				<xsl:copy-of select="'E34'"/>
			</xsl:when>
			<xsl:when test="$input='E35'">
				<xsl:copy-of select="'E35'"/>
			</xsl:when>
			<xsl:when test="$input='E36'">
				<xsl:copy-of select="'E36'"/>
			</xsl:when>
			<xsl:when test="$input='E37'">
				<xsl:copy-of select="'E37'"/>
			</xsl:when>
			<xsl:when test="$input='E38'">
				<xsl:copy-of select="'E38'"/>
			</xsl:when>
			<xsl:when test="$input='E39'">
				<xsl:copy-of select="'E39'"/>
			</xsl:when>
			<xsl:when test="$input='E4'">
				<xsl:copy-of select="'E4'"/>
			</xsl:when>
			<xsl:when test="$input='E40'">
				<xsl:copy-of select="'E40'"/>
			</xsl:when>
			<xsl:when test="$input='E41'">
				<xsl:copy-of select="'E41'"/>
			</xsl:when>
			<xsl:when test="$input='E42'">
				<xsl:copy-of select="'E42'"/>
			</xsl:when>
			<xsl:when test="$input='E43'">
				<xsl:copy-of select="'E43'"/>
			</xsl:when>
			<xsl:when test="$input='E44'">
				<xsl:copy-of select="'E44'"/>
			</xsl:when>
			<xsl:when test="$input='E45'">
				<xsl:copy-of select="'E45'"/>
			</xsl:when>
			<xsl:when test="$input='E46'">
				<xsl:copy-of select="'E46'"/>
			</xsl:when>
			<xsl:when test="$input='E47'">
				<xsl:copy-of select="'E47'"/>
			</xsl:when>
			<xsl:when test="$input='E48'">
				<xsl:copy-of select="'E48'"/>
			</xsl:when>
			<xsl:when test="$input='E49'">
				<xsl:copy-of select="'E49'"/>
			</xsl:when>
			<xsl:when test="$input='E50'">
				<xsl:copy-of select="'E50'"/>
			</xsl:when>
			<xsl:when test="$input='E51'">
				<xsl:copy-of select="'E51'"/>
			</xsl:when>
			<xsl:when test="$input='E52'">
				<xsl:copy-of select="'E52'"/>
			</xsl:when>
			<xsl:when test="$input='E53'">
				<xsl:copy-of select="'E53'"/>
			</xsl:when>
			<xsl:when test="$input='E54'">
				<xsl:copy-of select="'E54'"/>
			</xsl:when>
			<xsl:when test="$input='E55'">
				<xsl:copy-of select="'E55'"/>
			</xsl:when>
			<xsl:when test="$input='E56'">
				<xsl:copy-of select="'E56'"/>
			</xsl:when>
			<xsl:when test="$input='E57'">
				<xsl:copy-of select="'E57'"/>
			</xsl:when>
			<xsl:when test="$input='E58'">
				<xsl:copy-of select="'E58'"/>
			</xsl:when>
			<xsl:when test="$input='E59'">
				<xsl:copy-of select="'E59'"/>
			</xsl:when>
			<xsl:when test="$input='E60'">
				<xsl:copy-of select="'E60'"/>
			</xsl:when>
			<xsl:when test="$input='E61'">
				<xsl:copy-of select="'E61'"/>
			</xsl:when>
			<xsl:when test="$input='E62'">
				<xsl:copy-of select="'E62'"/>
			</xsl:when>
			<xsl:when test="$input='E63'">
				<xsl:copy-of select="'E63'"/>
			</xsl:when>
			<xsl:when test="$input='E64'">
				<xsl:copy-of select="'E64'"/>
			</xsl:when>
			<xsl:when test="$input='E65'">
				<xsl:copy-of select="'E65'"/>
			</xsl:when>
			<xsl:when test="$input='E66'">
				<xsl:copy-of select="'E66'"/>
			</xsl:when>
			<xsl:when test="$input='E67'">
				<xsl:copy-of select="'E67'"/>
			</xsl:when>
			<xsl:when test="$input='E68'">
				<xsl:copy-of select="'E68'"/>
			</xsl:when>
			<xsl:when test="$input='E69'">
				<xsl:copy-of select="'E69'"/>
			</xsl:when>
			<xsl:when test="$input='E70'">
				<xsl:copy-of select="'E70'"/>
			</xsl:when>
			<xsl:when test="$input='E71'">
				<xsl:copy-of select="'E71'"/>
			</xsl:when>
			<xsl:when test="$input='E72'">
				<xsl:copy-of select="'E72'"/>
			</xsl:when>
			<xsl:when test="$input='E73'">
				<xsl:copy-of select="'E73'"/>
			</xsl:when>
			<xsl:when test="$input='E74'">
				<xsl:copy-of select="'E74'"/>
			</xsl:when>
			<xsl:when test="$input='E75'">
				<xsl:copy-of select="'E75'"/>
			</xsl:when>
			<xsl:when test="$input='E76'">
				<xsl:copy-of select="'E76'"/>
			</xsl:when>
			<xsl:when test="$input='E77'">
				<xsl:copy-of select="'E77'"/>
			</xsl:when>
			<xsl:when test="$input='E78'">
				<xsl:copy-of select="'E78'"/>
			</xsl:when>
			<xsl:when test="$input='E79'">
				<xsl:copy-of select="'E79'"/>
			</xsl:when>
			<xsl:when test="$input='E80'">
				<xsl:copy-of select="'E80'"/>
			</xsl:when>
			<xsl:when test="$input='E81'">
				<xsl:copy-of select="'E81'"/>
			</xsl:when>
			<xsl:when test="$input='E82'">
				<xsl:copy-of select="'E82'"/>
			</xsl:when>
			<xsl:when test="$input='E83'">
				<xsl:copy-of select="'E83'"/>
			</xsl:when>
			<xsl:when test="$input='E84'">
				<xsl:copy-of select="'E84'"/>
			</xsl:when>
			<xsl:when test="$input='E85'">
				<xsl:copy-of select="'E85'"/>
			</xsl:when>
			<xsl:when test="$input='E86'">
				<xsl:copy-of select="'E86'"/>
			</xsl:when>
			<xsl:when test="$input='E87'">
				<xsl:copy-of select="'E87'"/>
			</xsl:when>
			<xsl:when test="$input='E88'">
				<xsl:copy-of select="'E88'"/>
			</xsl:when>
			<xsl:when test="$input='E89'">
				<xsl:copy-of select="'E89'"/>
			</xsl:when>
			<xsl:when test="$input='E90'">
				<xsl:copy-of select="'E90'"/>
			</xsl:when>
			<xsl:when test="$input='E91'">
				<xsl:copy-of select="'E91'"/>
			</xsl:when>
			<xsl:when test="$input='E92'">
				<xsl:copy-of select="'E92'"/>
			</xsl:when>
			<xsl:when test="$input='E93'">
				<xsl:copy-of select="'E93'"/>
			</xsl:when>
			<xsl:when test="$input='E94'">
				<xsl:copy-of select="'E94'"/>
			</xsl:when>
			<xsl:when test="$input='E95'">
				<xsl:copy-of select="'E95'"/>
			</xsl:when>
			<xsl:when test="$input='E96'">
				<xsl:copy-of select="'E96'"/>
			</xsl:when>
			<xsl:when test="$input='E97'">
				<xsl:copy-of select="'E97'"/>
			</xsl:when>
			<xsl:when test="$input='E98'">
				<xsl:copy-of select="'E98'"/>
			</xsl:when>
			<xsl:when test="$input='E99'">
				<xsl:copy-of select="'E99'"/>
			</xsl:when>
			<xsl:when test="$input='EA'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='EB'">
				<xsl:copy-of select="'EB'"/>
			</xsl:when>
			<xsl:when test="$input='EQ'">
				<xsl:copy-of select="'EQ'"/>
			</xsl:when>
			<xsl:when test="$input='F01'">
				<xsl:copy-of select="'F01'"/>
			</xsl:when>
			<xsl:when test="$input='F02'">
				<xsl:copy-of select="'F02'"/>
			</xsl:when>
			<xsl:when test="$input='F03'">
				<xsl:copy-of select="'F03'"/>
			</xsl:when>
			<xsl:when test="$input='F04'">
				<xsl:copy-of select="'F04'"/>
			</xsl:when>
			<xsl:when test="$input='F05'">
				<xsl:copy-of select="'F05'"/>
			</xsl:when>
			<xsl:when test="$input='F06'">
				<xsl:copy-of select="'F06'"/>
			</xsl:when>
			<xsl:when test="$input='F07'">
				<xsl:copy-of select="'F07'"/>
			</xsl:when>
			<xsl:when test="$input='F08'">
				<xsl:copy-of select="'F08'"/>
			</xsl:when>
			<xsl:when test="$input='F10'">
				<xsl:copy-of select="'F10'"/>
			</xsl:when>
			<xsl:when test="$input='F11'">
				<xsl:copy-of select="'F11'"/>
			</xsl:when>
			<xsl:when test="$input='F12'">
				<xsl:copy-of select="'F12'"/>
			</xsl:when>
			<xsl:when test="$input='F13'">
				<xsl:copy-of select="'F13'"/>
			</xsl:when>
			<xsl:when test="$input='F14'">
				<xsl:copy-of select="'F14'"/>
			</xsl:when>
			<xsl:when test="$input='F15'">
				<xsl:copy-of select="'F15'"/>
			</xsl:when>
			<xsl:when test="$input='F16'">
				<xsl:copy-of select="'F16'"/>
			</xsl:when>
			<xsl:when test="$input='F17'">
				<xsl:copy-of select="'F17'"/>
			</xsl:when>
			<xsl:when test="$input='F18'">
				<xsl:copy-of select="'F18'"/>
			</xsl:when>
			<xsl:when test="$input='F19'">
				<xsl:copy-of select="'F19'"/>
			</xsl:when>
			<xsl:when test="$input='F20'">
				<xsl:copy-of select="'F20'"/>
			</xsl:when>
			<xsl:when test="$input='F21'">
				<xsl:copy-of select="'F21'"/>
			</xsl:when>
			<xsl:when test="$input='F22'">
				<xsl:copy-of select="'F22'"/>
			</xsl:when>
			<xsl:when test="$input='F23'">
				<xsl:copy-of select="'F23'"/>
			</xsl:when>
			<xsl:when test="$input='F24'">
				<xsl:copy-of select="'F24'"/>
			</xsl:when>
			<xsl:when test="$input='F25'">
				<xsl:copy-of select="'F25'"/>
			</xsl:when>
			<xsl:when test="$input='F26'">
				<xsl:copy-of select="'F26'"/>
			</xsl:when>
			<xsl:when test="$input='F27'">
				<xsl:copy-of select="'F27'"/>
			</xsl:when>
			<xsl:when test="$input='F28'">
				<xsl:copy-of select="'F28'"/>
			</xsl:when>
			<xsl:when test="$input='F29'">
				<xsl:copy-of select="'F29'"/>
			</xsl:when>
			<xsl:when test="$input='F30'">
				<xsl:copy-of select="'F30'"/>
			</xsl:when>
			<xsl:when test="$input='F31'">
				<xsl:copy-of select="'F31'"/>
			</xsl:when>
			<xsl:when test="$input='F32'">
				<xsl:copy-of select="'F32'"/>
			</xsl:when>
			<xsl:when test="$input='F33'">
				<xsl:copy-of select="'F33'"/>
			</xsl:when>
			<xsl:when test="$input='F34'">
				<xsl:copy-of select="'F34'"/>
			</xsl:when>
			<xsl:when test="$input='F35'">
				<xsl:copy-of select="'F35'"/>
			</xsl:when>
			<xsl:when test="$input='F36'">
				<xsl:copy-of select="'F36'"/>
			</xsl:when>
			<xsl:when test="$input='F37'">
				<xsl:copy-of select="'F37'"/>
			</xsl:when>
			<xsl:when test="$input='F38'">
				<xsl:copy-of select="'F38'"/>
			</xsl:when>
			<xsl:when test="$input='F39'">
				<xsl:copy-of select="'F39'"/>
			</xsl:when>
			<xsl:when test="$input='F40'">
				<xsl:copy-of select="'F40'"/>
			</xsl:when>
			<xsl:when test="$input='F41'">
				<xsl:copy-of select="'F41'"/>
			</xsl:when>
			<xsl:when test="$input='F42'">
				<xsl:copy-of select="'F42'"/>
			</xsl:when>
			<xsl:when test="$input='F43'">
				<xsl:copy-of select="'F43'"/>
			</xsl:when>
			<xsl:when test="$input='F44'">
				<xsl:copy-of select="'F44'"/>
			</xsl:when>
			<xsl:when test="$input='F45'">
				<xsl:copy-of select="'F45'"/>
			</xsl:when>
			<xsl:when test="$input='F46'">
				<xsl:copy-of select="'F46'"/>
			</xsl:when>
			<xsl:when test="$input='F47'">
				<xsl:copy-of select="'F47'"/>
			</xsl:when>
			<xsl:when test="$input='F48'">
				<xsl:copy-of select="'F48'"/>
			</xsl:when>
			<xsl:when test="$input='F49'">
				<xsl:copy-of select="'F49'"/>
			</xsl:when>
			<xsl:when test="$input='F50'">
				<xsl:copy-of select="'F50'"/>
			</xsl:when>
			<xsl:when test="$input='F51'">
				<xsl:copy-of select="'F51'"/>
			</xsl:when>
			<xsl:when test="$input='F52'">
				<xsl:copy-of select="'F52'"/>
			</xsl:when>
			<xsl:when test="$input='F53'">
				<xsl:copy-of select="'F53'"/>
			</xsl:when>
			<xsl:when test="$input='F54'">
				<xsl:copy-of select="'F54'"/>
			</xsl:when>
			<xsl:when test="$input='F55'">
				<xsl:copy-of select="'F55'"/>
			</xsl:when>
			<xsl:when test="$input='F56'">
				<xsl:copy-of select="'F56'"/>
			</xsl:when>
			<xsl:when test="$input='F57'">
				<xsl:copy-of select="'F57'"/>
			</xsl:when>
			<xsl:when test="$input='F58'">
				<xsl:copy-of select="'F58'"/>
			</xsl:when>
			<xsl:when test="$input='F59'">
				<xsl:copy-of select="'F59'"/>
			</xsl:when>
			<xsl:when test="$input='F60'">
				<xsl:copy-of select="'F60'"/>
			</xsl:when>
			<xsl:when test="$input='F61'">
				<xsl:copy-of select="'F61'"/>
			</xsl:when>
			<xsl:when test="$input='F62'">
				<xsl:copy-of select="'F62'"/>
			</xsl:when>
			<xsl:when test="$input='F63'">
				<xsl:copy-of select="'F63'"/>
			</xsl:when>
			<xsl:when test="$input='F64'">
				<xsl:copy-of select="'F64'"/>
			</xsl:when>
			<xsl:when test="$input='F65'">
				<xsl:copy-of select="'F65'"/>
			</xsl:when>
			<xsl:when test="$input='F66'">
				<xsl:copy-of select="'F66'"/>
			</xsl:when>
			<xsl:when test="$input='F67'">
				<xsl:copy-of select="'F67'"/>
			</xsl:when>
			<xsl:when test="$input='F68'">
				<xsl:copy-of select="'F68'"/>
			</xsl:when>
			<xsl:when test="$input='F69'">
				<xsl:copy-of select="'F69'"/>
			</xsl:when>
			<xsl:when test="$input='F70'">
				<xsl:copy-of select="'F70'"/>
			</xsl:when>
			<xsl:when test="$input='F71'">
				<xsl:copy-of select="'F71'"/>
			</xsl:when>
			<xsl:when test="$input='F72'">
				<xsl:copy-of select="'F72'"/>
			</xsl:when>
			<xsl:when test="$input='F73'">
				<xsl:copy-of select="'F73'"/>
			</xsl:when>
			<xsl:when test="$input='F74'">
				<xsl:copy-of select="'F74'"/>
			</xsl:when>
			<xsl:when test="$input='F75'">
				<xsl:copy-of select="'F75'"/>
			</xsl:when>
			<xsl:when test="$input='F76'">
				<xsl:copy-of select="'F76'"/>
			</xsl:when>
			<xsl:when test="$input='F77'">
				<xsl:copy-of select="'F77'"/>
			</xsl:when>
			<xsl:when test="$input='F78'">
				<xsl:copy-of select="'F78'"/>
			</xsl:when>
			<xsl:when test="$input='F79'">
				<xsl:copy-of select="'F79'"/>
			</xsl:when>
			<xsl:when test="$input='F80'">
				<xsl:copy-of select="'F80'"/>
			</xsl:when>
			<xsl:when test="$input='F81'">
				<xsl:copy-of select="'F81'"/>
			</xsl:when>
			<xsl:when test="$input='F82'">
				<xsl:copy-of select="'F82'"/>
			</xsl:when>
			<xsl:when test="$input='F83'">
				<xsl:copy-of select="'F83'"/>
			</xsl:when>
			<xsl:when test="$input='F84'">
				<xsl:copy-of select="'F84'"/>
			</xsl:when>
			<xsl:when test="$input='F85'">
				<xsl:copy-of select="'F85'"/>
			</xsl:when>
			<xsl:when test="$input='F86'">
				<xsl:copy-of select="'F86'"/>
			</xsl:when>
			<xsl:when test="$input='F87'">
				<xsl:copy-of select="'F87'"/>
			</xsl:when>
			<xsl:when test="$input='F88'">
				<xsl:copy-of select="'F88'"/>
			</xsl:when>
			<xsl:when test="$input='F89'">
				<xsl:copy-of select="'F89'"/>
			</xsl:when>
			<xsl:when test="$input='F90'">
				<xsl:copy-of select="'F90'"/>
			</xsl:when>
			<xsl:when test="$input='F91'">
				<xsl:copy-of select="'F91'"/>
			</xsl:when>
			<xsl:when test="$input='F92'">
				<xsl:copy-of select="'F92'"/>
			</xsl:when>
			<xsl:when test="$input='F93'">
				<xsl:copy-of select="'F93'"/>
			</xsl:when>
			<xsl:when test="$input='F94'">
				<xsl:copy-of select="'F94'"/>
			</xsl:when>
			<xsl:when test="$input='F95'">
				<xsl:copy-of select="'F95'"/>
			</xsl:when>
			<xsl:when test="$input='F96'">
				<xsl:copy-of select="'F96'"/>
			</xsl:when>
			<xsl:when test="$input='F97'">
				<xsl:copy-of select="'F97'"/>
			</xsl:when>
			<xsl:when test="$input='F98'">
				<xsl:copy-of select="'F98'"/>
			</xsl:when>
			<xsl:when test="$input='F99'">
				<xsl:copy-of select="'F99'"/>
			</xsl:when>
			<xsl:when test="$input='FAH'">
				<xsl:copy-of select="'FAH'"/>
			</xsl:when>
			<xsl:when test="$input='FAR'">
				<xsl:copy-of select="'FAR'"/>
			</xsl:when>
			<xsl:when test="$input='FBM'">
				<xsl:copy-of select="'FBM'"/>
			</xsl:when>
			<xsl:when test="$input='FC'">
				<xsl:copy-of select="'FC'"/>
			</xsl:when>
			<xsl:when test="$input='FF'">
				<xsl:copy-of select="'FF'"/>
			</xsl:when>
			<xsl:when test="$input='FH'">
				<xsl:copy-of select="'FH'"/>
			</xsl:when>
			<xsl:when test="$input='FIT'">
				<xsl:copy-of select="'FIT'"/>
			</xsl:when>
			<xsl:when test="$input='FL'">
				<xsl:copy-of select="'FL'"/>
			</xsl:when>
			<xsl:when test="$input='FOT'">
				<xsl:copy-of select="'FOT'"/>
			</xsl:when>
			<xsl:when test="$input='FP'">
				<xsl:copy-of select="'FP'"/>
			</xsl:when>
			<xsl:when test="$input='FR'">
				<xsl:copy-of select="'FR'"/>
			</xsl:when>
			<xsl:when test="$input='FS'">
				<xsl:copy-of select="'FS'"/>
			</xsl:when>
			<xsl:when test="$input='FTK'">
				<xsl:copy-of select="'FTK'"/>
			</xsl:when>
			<xsl:when test="$input='FTQ'">
				<xsl:copy-of select="'FTQ'"/>
			</xsl:when>
			<xsl:when test="$input='G01'">
				<xsl:copy-of select="'G01'"/>
			</xsl:when>
			<xsl:when test="$input='G04'">
				<xsl:copy-of select="'G04'"/>
			</xsl:when>
			<xsl:when test="$input='G05'">
				<xsl:copy-of select="'G05'"/>
			</xsl:when>
			<xsl:when test="$input='G06'">
				<xsl:copy-of select="'G06'"/>
			</xsl:when>
			<xsl:when test="$input='G08'">
				<xsl:copy-of select="'G08'"/>
			</xsl:when>
			<xsl:when test="$input='G09'">
				<xsl:copy-of select="'G09'"/>
			</xsl:when>
			<xsl:when test="$input='G10'">
				<xsl:copy-of select="'G10'"/>
			</xsl:when>
			<xsl:when test="$input='G11'">
				<xsl:copy-of select="'G11'"/>
			</xsl:when>
			<xsl:when test="$input='G12'">
				<xsl:copy-of select="'G12'"/>
			</xsl:when>
			<xsl:when test="$input='G13'">
				<xsl:copy-of select="'G13'"/>
			</xsl:when>
			<xsl:when test="$input='G14'">
				<xsl:copy-of select="'G14'"/>
			</xsl:when>
			<xsl:when test="$input='G15'">
				<xsl:copy-of select="'G15'"/>
			</xsl:when>
			<xsl:when test="$input='G16'">
				<xsl:copy-of select="'G16'"/>
			</xsl:when>
			<xsl:when test="$input='G17'">
				<xsl:copy-of select="'G17'"/>
			</xsl:when>
			<xsl:when test="$input='G18'">
				<xsl:copy-of select="'G18'"/>
			</xsl:when>
			<xsl:when test="$input='G19'">
				<xsl:copy-of select="'G19'"/>
			</xsl:when>
			<xsl:when test="$input='G2'">
				<xsl:copy-of select="'G2'"/>
			</xsl:when>
			<xsl:when test="$input='G20'">
				<xsl:copy-of select="'G20'"/>
			</xsl:when>
			<xsl:when test="$input='G21'">
				<xsl:copy-of select="'G21'"/>
			</xsl:when>
			<xsl:when test="$input='G23'">
				<xsl:copy-of select="'G23'"/>
			</xsl:when>
			<xsl:when test="$input='G24'">
				<xsl:copy-of select="'G24'"/>
			</xsl:when>
			<xsl:when test="$input='G25'">
				<xsl:copy-of select="'G25'"/>
			</xsl:when>
			<xsl:when test="$input='G26'">
				<xsl:copy-of select="'G26'"/>
			</xsl:when>
			<xsl:when test="$input='G27'">
				<xsl:copy-of select="'G27'"/>
			</xsl:when>
			<xsl:when test="$input='G28'">
				<xsl:copy-of select="'G28'"/>
			</xsl:when>
			<xsl:when test="$input='G29'">
				<xsl:copy-of select="'G29'"/>
			</xsl:when>
			<xsl:when test="$input='G3'">
				<xsl:copy-of select="'G3'"/>
			</xsl:when>
			<xsl:when test="$input='G30'">
				<xsl:copy-of select="'G30'"/>
			</xsl:when>
			<xsl:when test="$input='G31'">
				<xsl:copy-of select="'G31'"/>
			</xsl:when>
			<xsl:when test="$input='G32'">
				<xsl:copy-of select="'G32'"/>
			</xsl:when>
			<xsl:when test="$input='G33'">
				<xsl:copy-of select="'G33'"/>
			</xsl:when>
			<xsl:when test="$input='G34'">
				<xsl:copy-of select="'G34'"/>
			</xsl:when>
			<xsl:when test="$input='G35'">
				<xsl:copy-of select="'G35'"/>
			</xsl:when>
			<xsl:when test="$input='G36'">
				<xsl:copy-of select="'G36'"/>
			</xsl:when>
			<xsl:when test="$input='G37'">
				<xsl:copy-of select="'G37'"/>
			</xsl:when>
			<xsl:when test="$input='G38'">
				<xsl:copy-of select="'G38'"/>
			</xsl:when>
			<xsl:when test="$input='G39'">
				<xsl:copy-of select="'G39'"/>
			</xsl:when>
			<xsl:when test="$input='G40'">
				<xsl:copy-of select="'G40'"/>
			</xsl:when>
			<xsl:when test="$input='G41'">
				<xsl:copy-of select="'G41'"/>
			</xsl:when>
			<xsl:when test="$input='G42'">
				<xsl:copy-of select="'G42'"/>
			</xsl:when>
			<xsl:when test="$input='G43'">
				<xsl:copy-of select="'G43'"/>
			</xsl:when>
			<xsl:when test="$input='G44'">
				<xsl:copy-of select="'G44'"/>
			</xsl:when>
			<xsl:when test="$input='G45'">
				<xsl:copy-of select="'G45'"/>
			</xsl:when>
			<xsl:when test="$input='G46'">
				<xsl:copy-of select="'G46'"/>
			</xsl:when>
			<xsl:when test="$input='G47'">
				<xsl:copy-of select="'G47'"/>
			</xsl:when>
			<xsl:when test="$input='G48'">
				<xsl:copy-of select="'G48'"/>
			</xsl:when>
			<xsl:when test="$input='G49'">
				<xsl:copy-of select="'G49'"/>
			</xsl:when>
			<xsl:when test="$input='G50'">
				<xsl:copy-of select="'G50'"/>
			</xsl:when>
			<xsl:when test="$input='G51'">
				<xsl:copy-of select="'G51'"/>
			</xsl:when>
			<xsl:when test="$input='G52'">
				<xsl:copy-of select="'G52'"/>
			</xsl:when>
			<xsl:when test="$input='G53'">
				<xsl:copy-of select="'G53'"/>
			</xsl:when>
			<xsl:when test="$input='G54'">
				<xsl:copy-of select="'G54'"/>
			</xsl:when>
			<xsl:when test="$input='G55'">
				<xsl:copy-of select="'G55'"/>
			</xsl:when>
			<xsl:when test="$input='G56'">
				<xsl:copy-of select="'G56'"/>
			</xsl:when>
			<xsl:when test="$input='G57'">
				<xsl:copy-of select="'G57'"/>
			</xsl:when>
			<xsl:when test="$input='G58'">
				<xsl:copy-of select="'G58'"/>
			</xsl:when>
			<xsl:when test="$input='G59'">
				<xsl:copy-of select="'G59'"/>
			</xsl:when>
			<xsl:when test="$input='G60'">
				<xsl:copy-of select="'G60'"/>
			</xsl:when>
			<xsl:when test="$input='G61'">
				<xsl:copy-of select="'G61'"/>
			</xsl:when>
			<xsl:when test="$input='G62'">
				<xsl:copy-of select="'G62'"/>
			</xsl:when>
			<xsl:when test="$input='G63'">
				<xsl:copy-of select="'G63'"/>
			</xsl:when>
			<xsl:when test="$input='G64'">
				<xsl:copy-of select="'G64'"/>
			</xsl:when>
			<xsl:when test="$input='G65'">
				<xsl:copy-of select="'G65'"/>
			</xsl:when>
			<xsl:when test="$input='G66'">
				<xsl:copy-of select="'G66'"/>
			</xsl:when>
			<xsl:when test="$input='G67'">
				<xsl:copy-of select="'G67'"/>
			</xsl:when>
			<xsl:when test="$input='G68'">
				<xsl:copy-of select="'G68'"/>
			</xsl:when>
			<xsl:when test="$input='G69'">
				<xsl:copy-of select="'G69'"/>
			</xsl:when>
			<xsl:when test="$input='G70'">
				<xsl:copy-of select="'G70'"/>
			</xsl:when>
			<xsl:when test="$input='G71'">
				<xsl:copy-of select="'G71'"/>
			</xsl:when>
			<xsl:when test="$input='G72'">
				<xsl:copy-of select="'G72'"/>
			</xsl:when>
			<xsl:when test="$input='G73'">
				<xsl:copy-of select="'G73'"/>
			</xsl:when>
			<xsl:when test="$input='G74'">
				<xsl:copy-of select="'G74'"/>
			</xsl:when>
			<xsl:when test="$input='G75'">
				<xsl:copy-of select="'G75'"/>
			</xsl:when>
			<xsl:when test="$input='G76'">
				<xsl:copy-of select="'G76'"/>
			</xsl:when>
			<xsl:when test="$input='G77'">
				<xsl:copy-of select="'G77'"/>
			</xsl:when>
			<xsl:when test="$input='G78'">
				<xsl:copy-of select="'G78'"/>
			</xsl:when>
			<xsl:when test="$input='G79'">
				<xsl:copy-of select="'G79'"/>
			</xsl:when>
			<xsl:when test="$input='G80'">
				<xsl:copy-of select="'G80'"/>
			</xsl:when>
			<xsl:when test="$input='G81'">
				<xsl:copy-of select="'G81'"/>
			</xsl:when>
			<xsl:when test="$input='G82'">
				<xsl:copy-of select="'G82'"/>
			</xsl:when>
			<xsl:when test="$input='G83'">
				<xsl:copy-of select="'G83'"/>
			</xsl:when>
			<xsl:when test="$input='G84'">
				<xsl:copy-of select="'G84'"/>
			</xsl:when>
			<xsl:when test="$input='G85'">
				<xsl:copy-of select="'G85'"/>
			</xsl:when>
			<xsl:when test="$input='G86'">
				<xsl:copy-of select="'G86'"/>
			</xsl:when>
			<xsl:when test="$input='G87'">
				<xsl:copy-of select="'G87'"/>
			</xsl:when>
			<xsl:when test="$input='G88'">
				<xsl:copy-of select="'G88'"/>
			</xsl:when>
			<xsl:when test="$input='G89'">
				<xsl:copy-of select="'G89'"/>
			</xsl:when>
			<xsl:when test="$input='G90'">
				<xsl:copy-of select="'G90'"/>
			</xsl:when>
			<xsl:when test="$input='G91'">
				<xsl:copy-of select="'G91'"/>
			</xsl:when>
			<xsl:when test="$input='G92'">
				<xsl:copy-of select="'G92'"/>
			</xsl:when>
			<xsl:when test="$input='G93'">
				<xsl:copy-of select="'G93'"/>
			</xsl:when>
			<xsl:when test="$input='G94'">
				<xsl:copy-of select="'G94'"/>
			</xsl:when>
			<xsl:when test="$input='G95'">
				<xsl:copy-of select="'G95'"/>
			</xsl:when>
			<xsl:when test="$input='G96'">
				<xsl:copy-of select="'G96'"/>
			</xsl:when>
			<xsl:when test="$input='G97'">
				<xsl:copy-of select="'G97'"/>
			</xsl:when>
			<xsl:when test="$input='G98'">
				<xsl:copy-of select="'G98'"/>
			</xsl:when>
			<xsl:when test="$input='G99'">
				<xsl:copy-of select="'G99'"/>
			</xsl:when>
			<xsl:when test="$input='GB'">
				<xsl:copy-of select="'GB'"/>
			</xsl:when>
			<xsl:when test="$input='GBQ'">
				<xsl:copy-of select="'GBQ'"/>
			</xsl:when>
			<xsl:when test="$input='GDW'">
				<xsl:copy-of select="'GDW'"/>
			</xsl:when>
			<xsl:when test="$input='GE'">
				<xsl:copy-of select="'GE'"/>
			</xsl:when>
			<xsl:when test="$input='GF'">
				<xsl:copy-of select="'GF'"/>
			</xsl:when>
			<xsl:when test="$input='GFI'">
				<xsl:copy-of select="'GFI'"/>
			</xsl:when>
			<xsl:when test="$input='GGR'">
				<xsl:copy-of select="'GGR'"/>
			</xsl:when>
			<xsl:when test="$input='GIA'">
				<xsl:copy-of select="'GIA'"/>
			</xsl:when>
			<xsl:when test="$input='GIC'">
				<xsl:copy-of select="'GIC'"/>
			</xsl:when>
			<xsl:when test="$input='GII'">
				<xsl:copy-of select="'GII'"/>
			</xsl:when>
			<xsl:when test="$input='GIP'">
				<xsl:copy-of select="'GIP'"/>
			</xsl:when>
			<xsl:when test="$input='GJ'">
				<xsl:copy-of select="'GJ'"/>
			</xsl:when>
			<xsl:when test="$input='GL'">
				<xsl:copy-of select="'GL'"/>
			</xsl:when>
			<xsl:when test="$input='GLD'">
				<xsl:copy-of select="'GLD'"/>
			</xsl:when>
			<xsl:when test="$input='GLI'">
				<xsl:copy-of select="'GLI'"/>
			</xsl:when>
			<xsl:when test="$input='GLL'">
				<xsl:copy-of select="'GLL'"/>
			</xsl:when>
			<xsl:when test="$input='GM'">
				<xsl:copy-of select="'GM'"/>
			</xsl:when>
			<xsl:when test="$input='GO'">
				<xsl:copy-of select="'GO'"/>
			</xsl:when>
			<xsl:when test="$input='GP'">
				<xsl:copy-of select="'GP'"/>
			</xsl:when>
			<xsl:when test="$input='GQ'">
				<xsl:copy-of select="'GQ'"/>
			</xsl:when>
			<xsl:when test="$input='GRM'">
				<xsl:copy-of select="'GRM'"/>
			</xsl:when>
			<xsl:when test="$input='GRN'">
				<xsl:copy-of select="'GRN'"/>
			</xsl:when>
			<xsl:when test="$input='GRO'">
				<xsl:copy-of select="'GRO'"/>
			</xsl:when>
			<xsl:when test="$input='GRT'">
				<xsl:copy-of select="'GRT'"/>
			</xsl:when>
			<xsl:when test="$input='GT'">
				<xsl:copy-of select="'GT'"/>
			</xsl:when>
			<xsl:when test="$input='GV'">
				<xsl:copy-of select="'GV'"/>
			</xsl:when>
			<xsl:when test="$input='GWH'">
				<xsl:copy-of select="'GWH'"/>
			</xsl:when>
			<xsl:when test="$input='H03'">
				<xsl:copy-of select="'H03'"/>
			</xsl:when>
			<xsl:when test="$input='H04'">
				<xsl:copy-of select="'H04'"/>
			</xsl:when>
			<xsl:when test="$input='H05'">
				<xsl:copy-of select="'H05'"/>
			</xsl:when>
			<xsl:when test="$input='H06'">
				<xsl:copy-of select="'H06'"/>
			</xsl:when>
			<xsl:when test="$input='H07'">
				<xsl:copy-of select="'H07'"/>
			</xsl:when>
			<xsl:when test="$input='H08'">
				<xsl:copy-of select="'H08'"/>
			</xsl:when>
			<xsl:when test="$input='H09'">
				<xsl:copy-of select="'H09'"/>
			</xsl:when>
			<xsl:when test="$input='H10'">
				<xsl:copy-of select="'H10'"/>
			</xsl:when>
			<xsl:when test="$input='H11'">
				<xsl:copy-of select="'H11'"/>
			</xsl:when>
			<xsl:when test="$input='H12'">
				<xsl:copy-of select="'H12'"/>
			</xsl:when>
			<xsl:when test="$input='H13'">
				<xsl:copy-of select="'H13'"/>
			</xsl:when>
			<xsl:when test="$input='H14'">
				<xsl:copy-of select="'H14'"/>
			</xsl:when>
			<xsl:when test="$input='H15'">
				<xsl:copy-of select="'H15'"/>
			</xsl:when>
			<xsl:when test="$input='H16'">
				<xsl:copy-of select="'H16'"/>
			</xsl:when>
			<xsl:when test="$input='H18'">
				<xsl:copy-of select="'H18'"/>
			</xsl:when>
			<xsl:when test="$input='H19'">
				<xsl:copy-of select="'H19'"/>
			</xsl:when>
			<xsl:when test="$input='H20'">
				<xsl:copy-of select="'H20'"/>
			</xsl:when>
			<xsl:when test="$input='H21'">
				<xsl:copy-of select="'H21'"/>
			</xsl:when>
			<xsl:when test="$input='H22'">
				<xsl:copy-of select="'H22'"/>
			</xsl:when>
			<xsl:when test="$input='H23'">
				<xsl:copy-of select="'H23'"/>
			</xsl:when>
			<xsl:when test="$input='H24'">
				<xsl:copy-of select="'H24'"/>
			</xsl:when>
			<xsl:when test="$input='H25'">
				<xsl:copy-of select="'H25'"/>
			</xsl:when>
			<xsl:when test="$input='H26'">
				<xsl:copy-of select="'H26'"/>
			</xsl:when>
			<xsl:when test="$input='H27'">
				<xsl:copy-of select="'H27'"/>
			</xsl:when>
			<xsl:when test="$input='H28'">
				<xsl:copy-of select="'H28'"/>
			</xsl:when>
			<xsl:when test="$input='H29'">
				<xsl:copy-of select="'H29'"/>
			</xsl:when>
			<xsl:when test="$input='H30'">
				<xsl:copy-of select="'H30'"/>
			</xsl:when>
			<xsl:when test="$input='H31'">
				<xsl:copy-of select="'H31'"/>
			</xsl:when>
			<xsl:when test="$input='H32'">
				<xsl:copy-of select="'H32'"/>
			</xsl:when>
			<xsl:when test="$input='H33'">
				<xsl:copy-of select="'H33'"/>
			</xsl:when>
			<xsl:when test="$input='H34'">
				<xsl:copy-of select="'H34'"/>
			</xsl:when>
			<xsl:when test="$input='H35'">
				<xsl:copy-of select="'H35'"/>
			</xsl:when>
			<xsl:when test="$input='H36'">
				<xsl:copy-of select="'H36'"/>
			</xsl:when>
			<xsl:when test="$input='H37'">
				<xsl:copy-of select="'H37'"/>
			</xsl:when>
			<xsl:when test="$input='H38'">
				<xsl:copy-of select="'H38'"/>
			</xsl:when>
			<xsl:when test="$input='H39'">
				<xsl:copy-of select="'H39'"/>
			</xsl:when>
			<xsl:when test="$input='H40'">
				<xsl:copy-of select="'H40'"/>
			</xsl:when>
			<xsl:when test="$input='H41'">
				<xsl:copy-of select="'H41'"/>
			</xsl:when>
			<xsl:when test="$input='H42'">
				<xsl:copy-of select="'H42'"/>
			</xsl:when>
			<xsl:when test="$input='H43'">
				<xsl:copy-of select="'H43'"/>
			</xsl:when>
			<xsl:when test="$input='H44'">
				<xsl:copy-of select="'H44'"/>
			</xsl:when>
			<xsl:when test="$input='H45'">
				<xsl:copy-of select="'H45'"/>
			</xsl:when>
			<xsl:when test="$input='H46'">
				<xsl:copy-of select="'H46'"/>
			</xsl:when>
			<xsl:when test="$input='H47'">
				<xsl:copy-of select="'H47'"/>
			</xsl:when>
			<xsl:when test="$input='H48'">
				<xsl:copy-of select="'H48'"/>
			</xsl:when>
			<xsl:when test="$input='H49'">
				<xsl:copy-of select="'H49'"/>
			</xsl:when>
			<xsl:when test="$input='H50'">
				<xsl:copy-of select="'H50'"/>
			</xsl:when>
			<xsl:when test="$input='H51'">
				<xsl:copy-of select="'H51'"/>
			</xsl:when>
			<xsl:when test="$input='H52'">
				<xsl:copy-of select="'H52'"/>
			</xsl:when>
			<xsl:when test="$input='H53'">
				<xsl:copy-of select="'H53'"/>
			</xsl:when>
			<xsl:when test="$input='H54'">
				<xsl:copy-of select="'H54'"/>
			</xsl:when>
			<xsl:when test="$input='H55'">
				<xsl:copy-of select="'H55'"/>
			</xsl:when>
			<xsl:when test="$input='H56'">
				<xsl:copy-of select="'H56'"/>
			</xsl:when>
			<xsl:when test="$input='H57'">
				<xsl:copy-of select="'H57'"/>
			</xsl:when>
			<xsl:when test="$input='H58'">
				<xsl:copy-of select="'H58'"/>
			</xsl:when>
			<xsl:when test="$input='H59'">
				<xsl:copy-of select="'H59'"/>
			</xsl:when>
			<xsl:when test="$input='H60'">
				<xsl:copy-of select="'H60'"/>
			</xsl:when>
			<xsl:when test="$input='H61'">
				<xsl:copy-of select="'H61'"/>
			</xsl:when>
			<xsl:when test="$input='H62'">
				<xsl:copy-of select="'H62'"/>
			</xsl:when>
			<xsl:when test="$input='H63'">
				<xsl:copy-of select="'H63'"/>
			</xsl:when>
			<xsl:when test="$input='H64'">
				<xsl:copy-of select="'H64'"/>
			</xsl:when>
			<xsl:when test="$input='H65'">
				<xsl:copy-of select="'H65'"/>
			</xsl:when>
			<xsl:when test="$input='H66'">
				<xsl:copy-of select="'H66'"/>
			</xsl:when>
			<xsl:when test="$input='H67'">
				<xsl:copy-of select="'H67'"/>
			</xsl:when>
			<xsl:when test="$input='H68'">
				<xsl:copy-of select="'H68'"/>
			</xsl:when>
			<xsl:when test="$input='H69'">
				<xsl:copy-of select="'H69'"/>
			</xsl:when>
			<xsl:when test="$input='H70'">
				<xsl:copy-of select="'H70'"/>
			</xsl:when>
			<xsl:when test="$input='H71'">
				<xsl:copy-of select="'H71'"/>
			</xsl:when>
			<xsl:when test="$input='H72'">
				<xsl:copy-of select="'H72'"/>
			</xsl:when>
			<xsl:when test="$input='H73'">
				<xsl:copy-of select="'H73'"/>
			</xsl:when>
			<xsl:when test="$input='H74'">
				<xsl:copy-of select="'H74'"/>
			</xsl:when>
			<xsl:when test="$input='H75'">
				<xsl:copy-of select="'H75'"/>
			</xsl:when>
			<xsl:when test="$input='H76'">
				<xsl:copy-of select="'H76'"/>
			</xsl:when>
			<xsl:when test="$input='H77'">
				<xsl:copy-of select="'H77'"/>
			</xsl:when>
			<xsl:when test="$input='H78'">
				<xsl:copy-of select="'H78'"/>
			</xsl:when>
			<xsl:when test="$input='H79'">
				<xsl:copy-of select="'H79'"/>
			</xsl:when>
			<xsl:when test="$input='H80'">
				<xsl:copy-of select="'H80'"/>
			</xsl:when>
			<xsl:when test="$input='H81'">
				<xsl:copy-of select="'H81'"/>
			</xsl:when>
			<xsl:when test="$input='H82'">
				<xsl:copy-of select="'H82'"/>
			</xsl:when>
			<xsl:when test="$input='H83'">
				<xsl:copy-of select="'H83'"/>
			</xsl:when>
			<xsl:when test="$input='H84'">
				<xsl:copy-of select="'H84'"/>
			</xsl:when>
			<xsl:when test="$input='H85'">
				<xsl:copy-of select="'H85'"/>
			</xsl:when>
			<xsl:when test="$input='H87'">
				<xsl:copy-of select="'H87'"/>
			</xsl:when>
			<xsl:when test="$input='H88'">
				<xsl:copy-of select="'H88'"/>
			</xsl:when>
			<xsl:when test="$input='H89'">
				<xsl:copy-of select="'H89'"/>
			</xsl:when>
			<xsl:when test="$input='H90'">
				<xsl:copy-of select="'H90'"/>
			</xsl:when>
			<xsl:when test="$input='H91'">
				<xsl:copy-of select="'H91'"/>
			</xsl:when>
			<xsl:when test="$input='H92'">
				<xsl:copy-of select="'H92'"/>
			</xsl:when>
			<xsl:when test="$input='H93'">
				<xsl:copy-of select="'H93'"/>
			</xsl:when>
			<xsl:when test="$input='H94'">
				<xsl:copy-of select="'H94'"/>
			</xsl:when>
			<xsl:when test="$input='H95'">
				<xsl:copy-of select="'H95'"/>
			</xsl:when>
			<xsl:when test="$input='H96'">
				<xsl:copy-of select="'H96'"/>
			</xsl:when>
			<xsl:when test="$input='H98'">
				<xsl:copy-of select="'H98'"/>
			</xsl:when>
			<xsl:when test="$input='H99'">
				<xsl:copy-of select="'H99'"/>
			</xsl:when>
			<xsl:when test="$input='HA'">
				<xsl:copy-of select="'HA'"/>
			</xsl:when>
			<xsl:when test="$input='HAR'">
				<xsl:copy-of select="'HAR'"/>
			</xsl:when>
			<xsl:when test="$input='HBA'">
				<xsl:copy-of select="'HBA'"/>
			</xsl:when>
			<xsl:when test="$input='HBX'">
				<xsl:copy-of select="'HBX'"/>
			</xsl:when>
			<xsl:when test="$input='HC'">
				<xsl:copy-of select="'HC'"/>
			</xsl:when>
			<xsl:when test="$input='HDW'">
				<xsl:copy-of select="'HDW'"/>
			</xsl:when>
			<xsl:when test="$input='HGM'">
				<xsl:copy-of select="'HGM'"/>
			</xsl:when>
			<xsl:when test="$input='HH'">
				<xsl:copy-of select="'HH'"/>
			</xsl:when>
			<xsl:when test="$input='HIU'">
				<xsl:copy-of select="'HIU'"/>
			</xsl:when>
			<xsl:when test="$input='HJ'">
				<xsl:copy-of select="'HJ'"/>
			</xsl:when>
			<xsl:when test="$input='HKM'">
				<xsl:copy-of select="'HKM'"/>
			</xsl:when>
			<xsl:when test="$input='HLT'">
				<xsl:copy-of select="'HLT'"/>
			</xsl:when>
			<xsl:when test="$input='HM'">
				<xsl:copy-of select="'HM'"/>
			</xsl:when>
			<xsl:when test="$input='HMQ'">
				<xsl:copy-of select="'HMQ'"/>
			</xsl:when>
			<xsl:when test="$input='HMT'">
				<xsl:copy-of select="'HMT'"/>
			</xsl:when>
			<xsl:when test="$input='HN'">
				<xsl:copy-of select="'HN'"/>
			</xsl:when>
			<xsl:when test="$input='HP'">
				<xsl:copy-of select="'HP'"/>
			</xsl:when>
			<xsl:when test="$input='HPA'">
				<xsl:copy-of select="'HPA'"/>
			</xsl:when>
			<xsl:when test="$input='HTZ'">
				<xsl:copy-of select="'HTZ'"/>
			</xsl:when>
			<xsl:when test="$input='HUR'">
				<xsl:copy-of select="'HUR'"/>
			</xsl:when>
			<xsl:when test="$input='IA'">
				<xsl:copy-of select="'IA'"/>
			</xsl:when>
			<xsl:when test="$input='IE'">
				<xsl:copy-of select="'IE'"/>
			</xsl:when>
			<xsl:when test="$input='INH'">
				<xsl:copy-of select="'INH'"/>
			</xsl:when>
			<xsl:when test="$input='INK'">
				<xsl:copy-of select="'INK'"/>
			</xsl:when>
			<xsl:when test="$input='INQ'">
				<xsl:copy-of select="'INQ'"/>
			</xsl:when>
			<xsl:when test="$input='ISD'">
				<xsl:copy-of select="'ISD'"/>
			</xsl:when>
			<xsl:when test="$input='IU'">
				<xsl:copy-of select="'IU'"/>
			</xsl:when>
			<xsl:when test="$input='IV'">
				<xsl:copy-of select="'IV'"/>
			</xsl:when>
			<xsl:when test="$input='J10'">
				<xsl:copy-of select="'J10'"/>
			</xsl:when>
			<xsl:when test="$input='J12'">
				<xsl:copy-of select="'J12'"/>
			</xsl:when>
			<xsl:when test="$input='J13'">
				<xsl:copy-of select="'J13'"/>
			</xsl:when>
			<xsl:when test="$input='J14'">
				<xsl:copy-of select="'J14'"/>
			</xsl:when>
			<xsl:when test="$input='J15'">
				<xsl:copy-of select="'J15'"/>
			</xsl:when>
			<xsl:when test="$input='J16'">
				<xsl:copy-of select="'J16'"/>
			</xsl:when>
			<xsl:when test="$input='J17'">
				<xsl:copy-of select="'J17'"/>
			</xsl:when>
			<xsl:when test="$input='J18'">
				<xsl:copy-of select="'J18'"/>
			</xsl:when>
			<xsl:when test="$input='J19'">
				<xsl:copy-of select="'J19'"/>
			</xsl:when>
			<xsl:when test="$input='J2'">
				<xsl:copy-of select="'J2'"/>
			</xsl:when>
			<xsl:when test="$input='J20'">
				<xsl:copy-of select="'J20'"/>
			</xsl:when>
			<xsl:when test="$input='J21'">
				<xsl:copy-of select="'J21'"/>
			</xsl:when>
			<xsl:when test="$input='J22'">
				<xsl:copy-of select="'J22'"/>
			</xsl:when>
			<xsl:when test="$input='J23'">
				<xsl:copy-of select="'J23'"/>
			</xsl:when>
			<xsl:when test="$input='J24'">
				<xsl:copy-of select="'J24'"/>
			</xsl:when>
			<xsl:when test="$input='J25'">
				<xsl:copy-of select="'J25'"/>
			</xsl:when>
			<xsl:when test="$input='J26'">
				<xsl:copy-of select="'J26'"/>
			</xsl:when>
			<xsl:when test="$input='J27'">
				<xsl:copy-of select="'J27'"/>
			</xsl:when>
			<xsl:when test="$input='J28'">
				<xsl:copy-of select="'J28'"/>
			</xsl:when>
			<xsl:when test="$input='J29'">
				<xsl:copy-of select="'J29'"/>
			</xsl:when>
			<xsl:when test="$input='J30'">
				<xsl:copy-of select="'J30'"/>
			</xsl:when>
			<xsl:when test="$input='J31'">
				<xsl:copy-of select="'J31'"/>
			</xsl:when>
			<xsl:when test="$input='J32'">
				<xsl:copy-of select="'J32'"/>
			</xsl:when>
			<xsl:when test="$input='J33'">
				<xsl:copy-of select="'J33'"/>
			</xsl:when>
			<xsl:when test="$input='J34'">
				<xsl:copy-of select="'J34'"/>
			</xsl:when>
			<xsl:when test="$input='J35'">
				<xsl:copy-of select="'J35'"/>
			</xsl:when>
			<xsl:when test="$input='J36'">
				<xsl:copy-of select="'J36'"/>
			</xsl:when>
			<xsl:when test="$input='J38'">
				<xsl:copy-of select="'J38'"/>
			</xsl:when>
			<xsl:when test="$input='J39'">
				<xsl:copy-of select="'J39'"/>
			</xsl:when>
			<xsl:when test="$input='J40'">
				<xsl:copy-of select="'J40'"/>
			</xsl:when>
			<xsl:when test="$input='J41'">
				<xsl:copy-of select="'J41'"/>
			</xsl:when>
			<xsl:when test="$input='J42'">
				<xsl:copy-of select="'J42'"/>
			</xsl:when>
			<xsl:when test="$input='J43'">
				<xsl:copy-of select="'J43'"/>
			</xsl:when>
			<xsl:when test="$input='J44'">
				<xsl:copy-of select="'J44'"/>
			</xsl:when>
			<xsl:when test="$input='J45'">
				<xsl:copy-of select="'J45'"/>
			</xsl:when>
			<xsl:when test="$input='J46'">
				<xsl:copy-of select="'J46'"/>
			</xsl:when>
			<xsl:when test="$input='J47'">
				<xsl:copy-of select="'J47'"/>
			</xsl:when>
			<xsl:when test="$input='J48'">
				<xsl:copy-of select="'J48'"/>
			</xsl:when>
			<xsl:when test="$input='J49'">
				<xsl:copy-of select="'J49'"/>
			</xsl:when>
			<xsl:when test="$input='J50'">
				<xsl:copy-of select="'J50'"/>
			</xsl:when>
			<xsl:when test="$input='J51'">
				<xsl:copy-of select="'J51'"/>
			</xsl:when>
			<xsl:when test="$input='J52'">
				<xsl:copy-of select="'J52'"/>
			</xsl:when>
			<xsl:when test="$input='J53'">
				<xsl:copy-of select="'J53'"/>
			</xsl:when>
			<xsl:when test="$input='J54'">
				<xsl:copy-of select="'J54'"/>
			</xsl:when>
			<xsl:when test="$input='J55'">
				<xsl:copy-of select="'J55'"/>
			</xsl:when>
			<xsl:when test="$input='J56'">
				<xsl:copy-of select="'J56'"/>
			</xsl:when>
			<xsl:when test="$input='J57'">
				<xsl:copy-of select="'J57'"/>
			</xsl:when>
			<xsl:when test="$input='J58'">
				<xsl:copy-of select="'J58'"/>
			</xsl:when>
			<xsl:when test="$input='J59'">
				<xsl:copy-of select="'J59'"/>
			</xsl:when>
			<xsl:when test="$input='J60'">
				<xsl:copy-of select="'J60'"/>
			</xsl:when>
			<xsl:when test="$input='J61'">
				<xsl:copy-of select="'J61'"/>
			</xsl:when>
			<xsl:when test="$input='J62'">
				<xsl:copy-of select="'J62'"/>
			</xsl:when>
			<xsl:when test="$input='J63'">
				<xsl:copy-of select="'J63'"/>
			</xsl:when>
			<xsl:when test="$input='J64'">
				<xsl:copy-of select="'J64'"/>
			</xsl:when>
			<xsl:when test="$input='J65'">
				<xsl:copy-of select="'J65'"/>
			</xsl:when>
			<xsl:when test="$input='J66'">
				<xsl:copy-of select="'J66'"/>
			</xsl:when>
			<xsl:when test="$input='J67'">
				<xsl:copy-of select="'J67'"/>
			</xsl:when>
			<xsl:when test="$input='J68'">
				<xsl:copy-of select="'J68'"/>
			</xsl:when>
			<xsl:when test="$input='J69'">
				<xsl:copy-of select="'J69'"/>
			</xsl:when>
			<xsl:when test="$input='J70'">
				<xsl:copy-of select="'J70'"/>
			</xsl:when>
			<xsl:when test="$input='J71'">
				<xsl:copy-of select="'J71'"/>
			</xsl:when>
			<xsl:when test="$input='J72'">
				<xsl:copy-of select="'J72'"/>
			</xsl:when>
			<xsl:when test="$input='J73'">
				<xsl:copy-of select="'J73'"/>
			</xsl:when>
			<xsl:when test="$input='J74'">
				<xsl:copy-of select="'J74'"/>
			</xsl:when>
			<xsl:when test="$input='J75'">
				<xsl:copy-of select="'J75'"/>
			</xsl:when>
			<xsl:when test="$input='J76'">
				<xsl:copy-of select="'J76'"/>
			</xsl:when>
			<xsl:when test="$input='J78'">
				<xsl:copy-of select="'J78'"/>
			</xsl:when>
			<xsl:when test="$input='J79'">
				<xsl:copy-of select="'J79'"/>
			</xsl:when>
			<xsl:when test="$input='J81'">
				<xsl:copy-of select="'J81'"/>
			</xsl:when>
			<xsl:when test="$input='J82'">
				<xsl:copy-of select="'J82'"/>
			</xsl:when>
			<xsl:when test="$input='J83'">
				<xsl:copy-of select="'J83'"/>
			</xsl:when>
			<xsl:when test="$input='J84'">
				<xsl:copy-of select="'J84'"/>
			</xsl:when>
			<xsl:when test="$input='J85'">
				<xsl:copy-of select="'J85'"/>
			</xsl:when>
			<xsl:when test="$input='J87'">
				<xsl:copy-of select="'J87'"/>
			</xsl:when>
			<xsl:when test="$input='J89'">
				<xsl:copy-of select="'J89'"/>
			</xsl:when>
			<xsl:when test="$input='J90'">
				<xsl:copy-of select="'J90'"/>
			</xsl:when>
			<xsl:when test="$input='J91'">
				<xsl:copy-of select="'J91'"/>
			</xsl:when>
			<xsl:when test="$input='J92'">
				<xsl:copy-of select="'J92'"/>
			</xsl:when>
			<xsl:when test="$input='J93'">
				<xsl:copy-of select="'J93'"/>
			</xsl:when>
			<xsl:when test="$input='J94'">
				<xsl:copy-of select="'J94'"/>
			</xsl:when>
			<xsl:when test="$input='J95'">
				<xsl:copy-of select="'J95'"/>
			</xsl:when>
			<xsl:when test="$input='J96'">
				<xsl:copy-of select="'J96'"/>
			</xsl:when>
			<xsl:when test="$input='J97'">
				<xsl:copy-of select="'J97'"/>
			</xsl:when>
			<xsl:when test="$input='J98'">
				<xsl:copy-of select="'J98'"/>
			</xsl:when>
			<xsl:when test="$input='J99'">
				<xsl:copy-of select="'J99'"/>
			</xsl:when>
			<xsl:when test="$input='JE'">
				<xsl:copy-of select="'JE'"/>
			</xsl:when>
			<xsl:when test="$input='JK'">
				<xsl:copy-of select="'JK'"/>
			</xsl:when>
			<xsl:when test="$input='JM'">
				<xsl:copy-of select="'JM'"/>
			</xsl:when>
			<xsl:when test="$input='JNT'">
				<xsl:copy-of select="'JNT'"/>
			</xsl:when>
			<xsl:when test="$input='JOU'">
				<xsl:copy-of select="'JOU'"/>
			</xsl:when>
			<xsl:when test="$input='JPS'">
				<xsl:copy-of select="'JPS'"/>
			</xsl:when>
			<xsl:when test="$input='JWL'">
				<xsl:copy-of select="'JWL'"/>
			</xsl:when>
			<xsl:when test="$input='K1'">
				<xsl:copy-of select="'K1'"/>
			</xsl:when>
			<xsl:when test="$input='K10'">
				<xsl:copy-of select="'K10'"/>
			</xsl:when>
			<xsl:when test="$input='K11'">
				<xsl:copy-of select="'K11'"/>
			</xsl:when>
			<xsl:when test="$input='K12'">
				<xsl:copy-of select="'K12'"/>
			</xsl:when>
			<xsl:when test="$input='K13'">
				<xsl:copy-of select="'K13'"/>
			</xsl:when>
			<xsl:when test="$input='K14'">
				<xsl:copy-of select="'K14'"/>
			</xsl:when>
			<xsl:when test="$input='K15'">
				<xsl:copy-of select="'K15'"/>
			</xsl:when>
			<xsl:when test="$input='K16'">
				<xsl:copy-of select="'K16'"/>
			</xsl:when>
			<xsl:when test="$input='K17'">
				<xsl:copy-of select="'K17'"/>
			</xsl:when>
			<xsl:when test="$input='K18'">
				<xsl:copy-of select="'K18'"/>
			</xsl:when>
			<xsl:when test="$input='K19'">
				<xsl:copy-of select="'K19'"/>
			</xsl:when>
			<xsl:when test="$input='K2'">
				<xsl:copy-of select="'K2'"/>
			</xsl:when>
			<xsl:when test="$input='K20'">
				<xsl:copy-of select="'K20'"/>
			</xsl:when>
			<xsl:when test="$input='K21'">
				<xsl:copy-of select="'K21'"/>
			</xsl:when>
			<xsl:when test="$input='K22'">
				<xsl:copy-of select="'K22'"/>
			</xsl:when>
			<xsl:when test="$input='K23'">
				<xsl:copy-of select="'K23'"/>
			</xsl:when>
			<xsl:when test="$input='K24'">
				<xsl:copy-of select="'K24'"/>
			</xsl:when>
			<xsl:when test="$input='K25'">
				<xsl:copy-of select="'K25'"/>
			</xsl:when>
			<xsl:when test="$input='K26'">
				<xsl:copy-of select="'K26'"/>
			</xsl:when>
			<xsl:when test="$input='K27'">
				<xsl:copy-of select="'K27'"/>
			</xsl:when>
			<xsl:when test="$input='K28'">
				<xsl:copy-of select="'K28'"/>
			</xsl:when>
			<xsl:when test="$input='K3'">
				<xsl:copy-of select="'K3'"/>
			</xsl:when>
			<xsl:when test="$input='K30'">
				<xsl:copy-of select="'K30'"/>
			</xsl:when>
			<xsl:when test="$input='K31'">
				<xsl:copy-of select="'K31'"/>
			</xsl:when>
			<xsl:when test="$input='K32'">
				<xsl:copy-of select="'K32'"/>
			</xsl:when>
			<xsl:when test="$input='K33'">
				<xsl:copy-of select="'K33'"/>
			</xsl:when>
			<xsl:when test="$input='K34'">
				<xsl:copy-of select="'K34'"/>
			</xsl:when>
			<xsl:when test="$input='K35'">
				<xsl:copy-of select="'K35'"/>
			</xsl:when>
			<xsl:when test="$input='K36'">
				<xsl:copy-of select="'K36'"/>
			</xsl:when>
			<xsl:when test="$input='K37'">
				<xsl:copy-of select="'K37'"/>
			</xsl:when>
			<xsl:when test="$input='K38'">
				<xsl:copy-of select="'K38'"/>
			</xsl:when>
			<xsl:when test="$input='K39'">
				<xsl:copy-of select="'K39'"/>
			</xsl:when>
			<xsl:when test="$input='K40'">
				<xsl:copy-of select="'K40'"/>
			</xsl:when>
			<xsl:when test="$input='K41'">
				<xsl:copy-of select="'K41'"/>
			</xsl:when>
			<xsl:when test="$input='K42'">
				<xsl:copy-of select="'K42'"/>
			</xsl:when>
			<xsl:when test="$input='K43'">
				<xsl:copy-of select="'K43'"/>
			</xsl:when>
			<xsl:when test="$input='K45'">
				<xsl:copy-of select="'K45'"/>
			</xsl:when>
			<xsl:when test="$input='K46'">
				<xsl:copy-of select="'K46'"/>
			</xsl:when>
			<xsl:when test="$input='K47'">
				<xsl:copy-of select="'K47'"/>
			</xsl:when>
			<xsl:when test="$input='K48'">
				<xsl:copy-of select="'K48'"/>
			</xsl:when>
			<xsl:when test="$input='K49'">
				<xsl:copy-of select="'K49'"/>
			</xsl:when>
			<xsl:when test="$input='K5'">
				<xsl:copy-of select="'K5'"/>
			</xsl:when>
			<xsl:when test="$input='K50'">
				<xsl:copy-of select="'K50'"/>
			</xsl:when>
			<xsl:when test="$input='K51'">
				<xsl:copy-of select="'K51'"/>
			</xsl:when>
			<xsl:when test="$input='K52'">
				<xsl:copy-of select="'K52'"/>
			</xsl:when>
			<xsl:when test="$input='K53'">
				<xsl:copy-of select="'K53'"/>
			</xsl:when>
			<xsl:when test="$input='K54'">
				<xsl:copy-of select="'K54'"/>
			</xsl:when>
			<xsl:when test="$input='K55'">
				<xsl:copy-of select="'K55'"/>
			</xsl:when>
			<xsl:when test="$input='K58'">
				<xsl:copy-of select="'K58'"/>
			</xsl:when>
			<xsl:when test="$input='K59'">
				<xsl:copy-of select="'K59'"/>
			</xsl:when>
			<xsl:when test="$input='K6'">
				<xsl:copy-of select="'K6'"/>
			</xsl:when>
			<xsl:when test="$input='K60'">
				<xsl:copy-of select="'K60'"/>
			</xsl:when>
			<xsl:when test="$input='K61'">
				<xsl:copy-of select="'K61'"/>
			</xsl:when>
			<xsl:when test="$input='K62'">
				<xsl:copy-of select="'K62'"/>
			</xsl:when>
			<xsl:when test="$input='K63'">
				<xsl:copy-of select="'K63'"/>
			</xsl:when>
			<xsl:when test="$input='K64'">
				<xsl:copy-of select="'K64'"/>
			</xsl:when>
			<xsl:when test="$input='K65'">
				<xsl:copy-of select="'K65'"/>
			</xsl:when>
			<xsl:when test="$input='K66'">
				<xsl:copy-of select="'K66'"/>
			</xsl:when>
			<xsl:when test="$input='K67'">
				<xsl:copy-of select="'K67'"/>
			</xsl:when>
			<xsl:when test="$input='K68'">
				<xsl:copy-of select="'K68'"/>
			</xsl:when>
			<xsl:when test="$input='K69'">
				<xsl:copy-of select="'K69'"/>
			</xsl:when>
			<xsl:when test="$input='K70'">
				<xsl:copy-of select="'K70'"/>
			</xsl:when>
			<xsl:when test="$input='K71'">
				<xsl:copy-of select="'K71'"/>
			</xsl:when>
			<xsl:when test="$input='K73'">
				<xsl:copy-of select="'K73'"/>
			</xsl:when>
			<xsl:when test="$input='K74'">
				<xsl:copy-of select="'K74'"/>
			</xsl:when>
			<xsl:when test="$input='K75'">
				<xsl:copy-of select="'K75'"/>
			</xsl:when>
			<xsl:when test="$input='K76'">
				<xsl:copy-of select="'K76'"/>
			</xsl:when>
			<xsl:when test="$input='K77'">
				<xsl:copy-of select="'K77'"/>
			</xsl:when>
			<xsl:when test="$input='K78'">
				<xsl:copy-of select="'K78'"/>
			</xsl:when>
			<xsl:when test="$input='K79'">
				<xsl:copy-of select="'K79'"/>
			</xsl:when>
			<xsl:when test="$input='K80'">
				<xsl:copy-of select="'K80'"/>
			</xsl:when>
			<xsl:when test="$input='K81'">
				<xsl:copy-of select="'K81'"/>
			</xsl:when>
			<xsl:when test="$input='K82'">
				<xsl:copy-of select="'K82'"/>
			</xsl:when>
			<xsl:when test="$input='K83'">
				<xsl:copy-of select="'K83'"/>
			</xsl:when>
			<xsl:when test="$input='K84'">
				<xsl:copy-of select="'K84'"/>
			</xsl:when>
			<xsl:when test="$input='K85'">
				<xsl:copy-of select="'K85'"/>
			</xsl:when>
			<xsl:when test="$input='K86'">
				<xsl:copy-of select="'K86'"/>
			</xsl:when>
			<xsl:when test="$input='K87'">
				<xsl:copy-of select="'K87'"/>
			</xsl:when>
			<xsl:when test="$input='K88'">
				<xsl:copy-of select="'K88'"/>
			</xsl:when>
			<xsl:when test="$input='K89'">
				<xsl:copy-of select="'K89'"/>
			</xsl:when>
			<xsl:when test="$input='K90'">
				<xsl:copy-of select="'K90'"/>
			</xsl:when>
			<xsl:when test="$input='K91'">
				<xsl:copy-of select="'K91'"/>
			</xsl:when>
			<xsl:when test="$input='K92'">
				<xsl:copy-of select="'K92'"/>
			</xsl:when>
			<xsl:when test="$input='K93'">
				<xsl:copy-of select="'K93'"/>
			</xsl:when>
			<xsl:when test="$input='K94'">
				<xsl:copy-of select="'K94'"/>
			</xsl:when>
			<xsl:when test="$input='K95'">
				<xsl:copy-of select="'K95'"/>
			</xsl:when>
			<xsl:when test="$input='K96'">
				<xsl:copy-of select="'K96'"/>
			</xsl:when>
			<xsl:when test="$input='K97'">
				<xsl:copy-of select="'K97'"/>
			</xsl:when>
			<xsl:when test="$input='K98'">
				<xsl:copy-of select="'K98'"/>
			</xsl:when>
			<xsl:when test="$input='K99'">
				<xsl:copy-of select="'K99'"/>
			</xsl:when>
			<xsl:when test="$input='KA'">
				<xsl:copy-of select="'KA'"/>
			</xsl:when>
			<xsl:when test="$input='KAT'">
				<xsl:copy-of select="'KAT'"/>
			</xsl:when>
			<xsl:when test="$input='KB'">
				<xsl:copy-of select="'KB'"/>
			</xsl:when>
			<xsl:when test="$input='KBA'">
				<xsl:copy-of select="'KBA'"/>
			</xsl:when>
			<xsl:when test="$input='KCC'">
				<xsl:copy-of select="'KCC'"/>
			</xsl:when>
			<xsl:when test="$input='KDW'">
				<xsl:copy-of select="'KDW'"/>
			</xsl:when>
			<xsl:when test="$input='KEL'">
				<xsl:copy-of select="'KEL'"/>
			</xsl:when>
			<xsl:when test="$input='KGM'">
				<xsl:copy-of select="'KGM'"/>
			</xsl:when>
			<xsl:when test="$input='KGS'">
				<xsl:copy-of select="'KGS'"/>
			</xsl:when>
			<xsl:when test="$input='KHY'">
				<xsl:copy-of select="'KHY'"/>
			</xsl:when>
			<xsl:when test="$input='KHZ'">
				<xsl:copy-of select="'KHZ'"/>
			</xsl:when>
			<xsl:when test="$input='KI'">
				<xsl:copy-of select="'KI'"/>
			</xsl:when>
			<xsl:when test="$input='KIC'">
				<xsl:copy-of select="'KIC'"/>
			</xsl:when>
			<xsl:when test="$input='KIP'">
				<xsl:copy-of select="'KIP'"/>
			</xsl:when>
			<xsl:when test="$input='KJ'">
				<xsl:copy-of select="'KJ'"/>
			</xsl:when>
			<xsl:when test="$input='KJO'">
				<xsl:copy-of select="'KJO'"/>
			</xsl:when>
			<xsl:when test="$input='KL'">
				<xsl:copy-of select="'KL'"/>
			</xsl:when>
			<xsl:when test="$input='KLK'">
				<xsl:copy-of select="'KLK'"/>
			</xsl:when>
			<xsl:when test="$input='KMA'">
				<xsl:copy-of select="'KMA'"/>
			</xsl:when>
			<xsl:when test="$input='KMH'">
				<xsl:copy-of select="'KMH'"/>
			</xsl:when>
			<xsl:when test="$input='KMK'">
				<xsl:copy-of select="'KMK'"/>
			</xsl:when>
			<xsl:when test="$input='KMQ'">
				<xsl:copy-of select="'KMQ'"/>
			</xsl:when>
			<xsl:when test="$input='KMT'">
				<xsl:copy-of select="'KMT'"/>
			</xsl:when>
			<xsl:when test="$input='KNI'">
				<xsl:copy-of select="'KNI'"/>
			</xsl:when>
			<xsl:when test="$input='KNS'">
				<xsl:copy-of select="'KNS'"/>
			</xsl:when>
			<xsl:when test="$input='KNT'">
				<xsl:copy-of select="'KNT'"/>
			</xsl:when>
			<xsl:when test="$input='KO'">
				<xsl:copy-of select="'KO'"/>
			</xsl:when>
			<xsl:when test="$input='KPA'">
				<xsl:copy-of select="'KPA'"/>
			</xsl:when>
			<xsl:when test="$input='KPH'">
				<xsl:copy-of select="'KPH'"/>
			</xsl:when>
			<xsl:when test="$input='KPO'">
				<xsl:copy-of select="'KPO'"/>
			</xsl:when>
			<xsl:when test="$input='KPP'">
				<xsl:copy-of select="'KPP'"/>
			</xsl:when>
			<xsl:when test="$input='KR'">
				<xsl:copy-of select="'KR'"/>
			</xsl:when>
			<xsl:when test="$input='KSD'">
				<xsl:copy-of select="'KSD'"/>
			</xsl:when>
			<xsl:when test="$input='KSH'">
				<xsl:copy-of select="'KSH'"/>
			</xsl:when>
			<xsl:when test="$input='KT'">
				<xsl:copy-of select="'KT'"/>
			</xsl:when>
			<xsl:when test="$input='KTN'">
				<xsl:copy-of select="'KTN'"/>
			</xsl:when>
			<xsl:when test="$input='KUR'">
				<xsl:copy-of select="'KUR'"/>
			</xsl:when>
			<xsl:when test="$input='KVA'">
				<xsl:copy-of select="'KVA'"/>
			</xsl:when>
			<xsl:when test="$input='KVR'">
				<xsl:copy-of select="'KVR'"/>
			</xsl:when>
			<xsl:when test="$input='KVT'">
				<xsl:copy-of select="'KVT'"/>
			</xsl:when>
			<xsl:when test="$input='KW'">
				<xsl:copy-of select="'KW'"/>
			</xsl:when>
			<xsl:when test="$input='KWH'">
				<xsl:copy-of select="'KWH'"/>
			</xsl:when>
			<xsl:when test="$input='KWO'">
				<xsl:copy-of select="'KWO'"/>
			</xsl:when>
			<xsl:when test="$input='KWT'">
				<xsl:copy-of select="'KWT'"/>
			</xsl:when>
			<xsl:when test="$input='KX'">
				<xsl:copy-of select="'KX'"/>
			</xsl:when>
			<xsl:when test="$input='L10'">
				<xsl:copy-of select="'L10'"/>
			</xsl:when>
			<xsl:when test="$input='L11'">
				<xsl:copy-of select="'L11'"/>
			</xsl:when>
			<xsl:when test="$input='L12'">
				<xsl:copy-of select="'L12'"/>
			</xsl:when>
			<xsl:when test="$input='L13'">
				<xsl:copy-of select="'L13'"/>
			</xsl:when>
			<xsl:when test="$input='L14'">
				<xsl:copy-of select="'L14'"/>
			</xsl:when>
			<xsl:when test="$input='L15'">
				<xsl:copy-of select="'L15'"/>
			</xsl:when>
			<xsl:when test="$input='L16'">
				<xsl:copy-of select="'L16'"/>
			</xsl:when>
			<xsl:when test="$input='L17'">
				<xsl:copy-of select="'L17'"/>
			</xsl:when>
			<xsl:when test="$input='L18'">
				<xsl:copy-of select="'L18'"/>
			</xsl:when>
			<xsl:when test="$input='L19'">
				<xsl:copy-of select="'L19'"/>
			</xsl:when>
			<xsl:when test="$input='L2'">
				<xsl:copy-of select="'L2'"/>
			</xsl:when>
			<xsl:when test="$input='L20'">
				<xsl:copy-of select="'L20'"/>
			</xsl:when>
			<xsl:when test="$input='L21'">
				<xsl:copy-of select="'L21'"/>
			</xsl:when>
			<xsl:when test="$input='L23'">
				<xsl:copy-of select="'L23'"/>
			</xsl:when>
			<xsl:when test="$input='L24'">
				<xsl:copy-of select="'L24'"/>
			</xsl:when>
			<xsl:when test="$input='L25'">
				<xsl:copy-of select="'L25'"/>
			</xsl:when>
			<xsl:when test="$input='L26'">
				<xsl:copy-of select="'L26'"/>
			</xsl:when>
			<xsl:when test="$input='L27'">
				<xsl:copy-of select="'L27'"/>
			</xsl:when>
			<xsl:when test="$input='L28'">
				<xsl:copy-of select="'L28'"/>
			</xsl:when>
			<xsl:when test="$input='L29'">
				<xsl:copy-of select="'L29'"/>
			</xsl:when>
			<xsl:when test="$input='L30'">
				<xsl:copy-of select="'L30'"/>
			</xsl:when>
			<xsl:when test="$input='L31'">
				<xsl:copy-of select="'L31'"/>
			</xsl:when>
			<xsl:when test="$input='L32'">
				<xsl:copy-of select="'L32'"/>
			</xsl:when>
			<xsl:when test="$input='L33'">
				<xsl:copy-of select="'L33'"/>
			</xsl:when>
			<xsl:when test="$input='L34'">
				<xsl:copy-of select="'L34'"/>
			</xsl:when>
			<xsl:when test="$input='L35'">
				<xsl:copy-of select="'L35'"/>
			</xsl:when>
			<xsl:when test="$input='L36'">
				<xsl:copy-of select="'L36'"/>
			</xsl:when>
			<xsl:when test="$input='L37'">
				<xsl:copy-of select="'L37'"/>
			</xsl:when>
			<xsl:when test="$input='L38'">
				<xsl:copy-of select="'L38'"/>
			</xsl:when>
			<xsl:when test="$input='L39'">
				<xsl:copy-of select="'L39'"/>
			</xsl:when>
			<xsl:when test="$input='L40'">
				<xsl:copy-of select="'L40'"/>
			</xsl:when>
			<xsl:when test="$input='L41'">
				<xsl:copy-of select="'L41'"/>
			</xsl:when>
			<xsl:when test="$input='L42'">
				<xsl:copy-of select="'L42'"/>
			</xsl:when>
			<xsl:when test="$input='L43'">
				<xsl:copy-of select="'L43'"/>
			</xsl:when>
			<xsl:when test="$input='L44'">
				<xsl:copy-of select="'L44'"/>
			</xsl:when>
			<xsl:when test="$input='L45'">
				<xsl:copy-of select="'L45'"/>
			</xsl:when>
			<xsl:when test="$input='L46'">
				<xsl:copy-of select="'L46'"/>
			</xsl:when>
			<xsl:when test="$input='L47'">
				<xsl:copy-of select="'L47'"/>
			</xsl:when>
			<xsl:when test="$input='L48'">
				<xsl:copy-of select="'L48'"/>
			</xsl:when>
			<xsl:when test="$input='L49'">
				<xsl:copy-of select="'L49'"/>
			</xsl:when>
			<xsl:when test="$input='L50'">
				<xsl:copy-of select="'L50'"/>
			</xsl:when>
			<xsl:when test="$input='L51'">
				<xsl:copy-of select="'L51'"/>
			</xsl:when>
			<xsl:when test="$input='L52'">
				<xsl:copy-of select="'L52'"/>
			</xsl:when>
			<xsl:when test="$input='L53'">
				<xsl:copy-of select="'L53'"/>
			</xsl:when>
			<xsl:when test="$input='L54'">
				<xsl:copy-of select="'L54'"/>
			</xsl:when>
			<xsl:when test="$input='L55'">
				<xsl:copy-of select="'L55'"/>
			</xsl:when>
			<xsl:when test="$input='L56'">
				<xsl:copy-of select="'L56'"/>
			</xsl:when>
			<xsl:when test="$input='L57'">
				<xsl:copy-of select="'L57'"/>
			</xsl:when>
			<xsl:when test="$input='L58'">
				<xsl:copy-of select="'L58'"/>
			</xsl:when>
			<xsl:when test="$input='L59'">
				<xsl:copy-of select="'L59'"/>
			</xsl:when>
			<xsl:when test="$input='L60'">
				<xsl:copy-of select="'L60'"/>
			</xsl:when>
			<xsl:when test="$input='L63'">
				<xsl:copy-of select="'L63'"/>
			</xsl:when>
			<xsl:when test="$input='L64'">
				<xsl:copy-of select="'L64'"/>
			</xsl:when>
			<xsl:when test="$input='L65'">
				<xsl:copy-of select="'L65'"/>
			</xsl:when>
			<xsl:when test="$input='L66'">
				<xsl:copy-of select="'L66'"/>
			</xsl:when>
			<xsl:when test="$input='L67'">
				<xsl:copy-of select="'L67'"/>
			</xsl:when>
			<xsl:when test="$input='L68'">
				<xsl:copy-of select="'L68'"/>
			</xsl:when>
			<xsl:when test="$input='L69'">
				<xsl:copy-of select="'L69'"/>
			</xsl:when>
			<xsl:when test="$input='L70'">
				<xsl:copy-of select="'L70'"/>
			</xsl:when>
			<xsl:when test="$input='L71'">
				<xsl:copy-of select="'L71'"/>
			</xsl:when>
			<xsl:when test="$input='L72'">
				<xsl:copy-of select="'L72'"/>
			</xsl:when>
			<xsl:when test="$input='L73'">
				<xsl:copy-of select="'L73'"/>
			</xsl:when>
			<xsl:when test="$input='L74'">
				<xsl:copy-of select="'L74'"/>
			</xsl:when>
			<xsl:when test="$input='L75'">
				<xsl:copy-of select="'L75'"/>
			</xsl:when>
			<xsl:when test="$input='L76'">
				<xsl:copy-of select="'L76'"/>
			</xsl:when>
			<xsl:when test="$input='L77'">
				<xsl:copy-of select="'L77'"/>
			</xsl:when>
			<xsl:when test="$input='L78'">
				<xsl:copy-of select="'L78'"/>
			</xsl:when>
			<xsl:when test="$input='L79'">
				<xsl:copy-of select="'L79'"/>
			</xsl:when>
			<xsl:when test="$input='L80'">
				<xsl:copy-of select="'L80'"/>
			</xsl:when>
			<xsl:when test="$input='L81'">
				<xsl:copy-of select="'L81'"/>
			</xsl:when>
			<xsl:when test="$input='L82'">
				<xsl:copy-of select="'L82'"/>
			</xsl:when>
			<xsl:when test="$input='L83'">
				<xsl:copy-of select="'L83'"/>
			</xsl:when>
			<xsl:when test="$input='L84'">
				<xsl:copy-of select="'L84'"/>
			</xsl:when>
			<xsl:when test="$input='L85'">
				<xsl:copy-of select="'L85'"/>
			</xsl:when>
			<xsl:when test="$input='L86'">
				<xsl:copy-of select="'L86'"/>
			</xsl:when>
			<xsl:when test="$input='L87'">
				<xsl:copy-of select="'L87'"/>
			</xsl:when>
			<xsl:when test="$input='L88'">
				<xsl:copy-of select="'L88'"/>
			</xsl:when>
			<xsl:when test="$input='L89'">
				<xsl:copy-of select="'L89'"/>
			</xsl:when>
			<xsl:when test="$input='L90'">
				<xsl:copy-of select="'L90'"/>
			</xsl:when>
			<xsl:when test="$input='L91'">
				<xsl:copy-of select="'L91'"/>
			</xsl:when>
			<xsl:when test="$input='L92'">
				<xsl:copy-of select="'L92'"/>
			</xsl:when>
			<xsl:when test="$input='L93'">
				<xsl:copy-of select="'L93'"/>
			</xsl:when>
			<xsl:when test="$input='L94'">
				<xsl:copy-of select="'L94'"/>
			</xsl:when>
			<xsl:when test="$input='L95'">
				<xsl:copy-of select="'L95'"/>
			</xsl:when>
			<xsl:when test="$input='L96'">
				<xsl:copy-of select="'L96'"/>
			</xsl:when>
			<xsl:when test="$input='L98'">
				<xsl:copy-of select="'L98'"/>
			</xsl:when>
			<xsl:when test="$input='L99'">
				<xsl:copy-of select="'L99'"/>
			</xsl:when>
			<xsl:when test="$input='LA'">
				<xsl:copy-of select="'LA'"/>
			</xsl:when>
			<xsl:when test="$input='LAC'">
				<xsl:copy-of select="'LAC'"/>
			</xsl:when>
			<xsl:when test="$input='LBR'">
				<xsl:copy-of select="'LBR'"/>
			</xsl:when>
			<xsl:when test="$input='LBT'">
				<xsl:copy-of select="'LBT'"/>
			</xsl:when>
			<xsl:when test="$input='LD'">
				<xsl:copy-of select="'LD'"/>
			</xsl:when>
			<xsl:when test="$input='LEF'">
				<xsl:copy-of select="'LEF'"/>
			</xsl:when>
			<xsl:when test="$input='LF'">
				<xsl:copy-of select="'LF'"/>
			</xsl:when>
			<xsl:when test="$input='LH'">
				<xsl:copy-of select="'LH'"/>
			</xsl:when>
			<xsl:when test="$input='LK'">
				<xsl:copy-of select="'LK'"/>
			</xsl:when>
			<xsl:when test="$input='LM'">
				<xsl:copy-of select="'LM'"/>
			</xsl:when>
			<xsl:when test="$input='LN'">
				<xsl:copy-of select="'LN'"/>
			</xsl:when>
			<xsl:when test="$input='LO'">
				<xsl:copy-of select="'LO'"/>
			</xsl:when>
			<xsl:when test="$input='LP'">
				<xsl:copy-of select="'LP'"/>
			</xsl:when>
			<xsl:when test="$input='LPA'">
				<xsl:copy-of select="'LPA'"/>
			</xsl:when>
			<xsl:when test="$input='LR'">
				<xsl:copy-of select="'LR'"/>
			</xsl:when>
			<xsl:when test="$input='LS'">
				<xsl:copy-of select="'LS'"/>
			</xsl:when>
			<xsl:when test="$input='LTN'">
				<xsl:copy-of select="'LTN'"/>
			</xsl:when>
			<xsl:when test="$input='LTR'">
				<xsl:copy-of select="'LTR'"/>
			</xsl:when>
			<xsl:when test="$input='LUB'">
				<xsl:copy-of select="'LUB'"/>
			</xsl:when>
			<xsl:when test="$input='LUM'">
				<xsl:copy-of select="'LUM'"/>
			</xsl:when>
			<xsl:when test="$input='LUX'">
				<xsl:copy-of select="'LUX'"/>
			</xsl:when>
			<xsl:when test="$input='LY'">
				<xsl:copy-of select="'LY'"/>
			</xsl:when>
			<xsl:when test="$input='M1'">
				<xsl:copy-of select="'M1'"/>
			</xsl:when>
			<xsl:when test="$input='M10'">
				<xsl:copy-of select="'M10'"/>
			</xsl:when>
			<xsl:when test="$input='M11'">
				<xsl:copy-of select="'M11'"/>
			</xsl:when>
			<xsl:when test="$input='M12'">
				<xsl:copy-of select="'M12'"/>
			</xsl:when>
			<xsl:when test="$input='M13'">
				<xsl:copy-of select="'M13'"/>
			</xsl:when>
			<xsl:when test="$input='M14'">
				<xsl:copy-of select="'M14'"/>
			</xsl:when>
			<xsl:when test="$input='M15'">
				<xsl:copy-of select="'M15'"/>
			</xsl:when>
			<xsl:when test="$input='M16'">
				<xsl:copy-of select="'M16'"/>
			</xsl:when>
			<xsl:when test="$input='M17'">
				<xsl:copy-of select="'M17'"/>
			</xsl:when>
			<xsl:when test="$input='M18'">
				<xsl:copy-of select="'M18'"/>
			</xsl:when>
			<xsl:when test="$input='M19'">
				<xsl:copy-of select="'M19'"/>
			</xsl:when>
			<xsl:when test="$input='M20'">
				<xsl:copy-of select="'M20'"/>
			</xsl:when>
			<xsl:when test="$input='M21'">
				<xsl:copy-of select="'M21'"/>
			</xsl:when>
			<xsl:when test="$input='M22'">
				<xsl:copy-of select="'M22'"/>
			</xsl:when>
			<xsl:when test="$input='M23'">
				<xsl:copy-of select="'M23'"/>
			</xsl:when>
			<xsl:when test="$input='M24'">
				<xsl:copy-of select="'M24'"/>
			</xsl:when>
			<xsl:when test="$input='M25'">
				<xsl:copy-of select="'M25'"/>
			</xsl:when>
			<xsl:when test="$input='M26'">
				<xsl:copy-of select="'M26'"/>
			</xsl:when>
			<xsl:when test="$input='M27'">
				<xsl:copy-of select="'M27'"/>
			</xsl:when>
			<xsl:when test="$input='M29'">
				<xsl:copy-of select="'M29'"/>
			</xsl:when>
			<xsl:when test="$input='M30'">
				<xsl:copy-of select="'M30'"/>
			</xsl:when>
			<xsl:when test="$input='M31'">
				<xsl:copy-of select="'M31'"/>
			</xsl:when>
			<xsl:when test="$input='M32'">
				<xsl:copy-of select="'M32'"/>
			</xsl:when>
			<xsl:when test="$input='M33'">
				<xsl:copy-of select="'M33'"/>
			</xsl:when>
			<xsl:when test="$input='M34'">
				<xsl:copy-of select="'M34'"/>
			</xsl:when>
			<xsl:when test="$input='M35'">
				<xsl:copy-of select="'M35'"/>
			</xsl:when>
			<xsl:when test="$input='M36'">
				<xsl:copy-of select="'M36'"/>
			</xsl:when>
			<xsl:when test="$input='M37'">
				<xsl:copy-of select="'M37'"/>
			</xsl:when>
			<xsl:when test="$input='M4'">
				<xsl:copy-of select="'M4'"/>
			</xsl:when>
			<xsl:when test="$input='M5'">
				<xsl:copy-of select="'M5'"/>
			</xsl:when>
			<xsl:when test="$input='M7'">
				<xsl:copy-of select="'M7'"/>
			</xsl:when>
			<xsl:when test="$input='M9'">
				<xsl:copy-of select="'M9'"/>
			</xsl:when>
			<xsl:when test="$input='MAH'">
				<xsl:copy-of select="'MAH'"/>
			</xsl:when>
			<xsl:when test="$input='MAL'">
				<xsl:copy-of select="'MAL'"/>
			</xsl:when>
			<xsl:when test="$input='MAM'">
				<xsl:copy-of select="'MAM'"/>
			</xsl:when>
			<xsl:when test="$input='MAR'">
				<xsl:copy-of select="'MAR'"/>
			</xsl:when>
			<xsl:when test="$input='MAW'">
				<xsl:copy-of select="'MAW'"/>
			</xsl:when>
			<xsl:when test="$input='MBE'">
				<xsl:copy-of select="'MBE'"/>
			</xsl:when>
			<xsl:when test="$input='MBF'">
				<xsl:copy-of select="'MBF'"/>
			</xsl:when>
			<xsl:when test="$input='MBR'">
				<xsl:copy-of select="'MBR'"/>
			</xsl:when>
			<xsl:when test="$input='MC'">
				<xsl:copy-of select="'MC'"/>
			</xsl:when>
			<xsl:when test="$input='MCU'">
				<xsl:copy-of select="'MCU'"/>
			</xsl:when>
			<xsl:when test="$input='MD'">
				<xsl:copy-of select="'MD'"/>
			</xsl:when>
			<xsl:when test="$input='MGM'">
				<xsl:copy-of select="'MGM'"/>
			</xsl:when>
			<xsl:when test="$input='MHZ'">
				<xsl:copy-of select="'MHZ'"/>
			</xsl:when>
			<xsl:when test="$input='MIK'">
				<xsl:copy-of select="'MIK'"/>
			</xsl:when>
			<xsl:when test="$input='MIL'">
				<xsl:copy-of select="'MIL'"/>
			</xsl:when>
			<xsl:when test="$input='MIN'">
				<xsl:copy-of select="'MIN'"/>
			</xsl:when>
			<xsl:when test="$input='MIO'">
				<xsl:copy-of select="'MIO'"/>
			</xsl:when>
			<xsl:when test="$input='MIU'">
				<xsl:copy-of select="'MIU'"/>
			</xsl:when>
			<xsl:when test="$input='MLD'">
				<xsl:copy-of select="'MLD'"/>
			</xsl:when>
			<xsl:when test="$input='MLT'">
				<xsl:copy-of select="'MLT'"/>
			</xsl:when>
			<xsl:when test="$input='MMK'">
				<xsl:copy-of select="'MMK'"/>
			</xsl:when>
			<xsl:when test="$input='MMQ'">
				<xsl:copy-of select="'MMQ'"/>
			</xsl:when>
			<xsl:when test="$input='MMT'">
				<xsl:copy-of select="'MMT'"/>
			</xsl:when>
			<xsl:when test="$input='MND'">
				<xsl:copy-of select="'MND'"/>
			</xsl:when>
			<xsl:when test="$input='MON'">
				<xsl:copy-of select="'MON'"/>
			</xsl:when>
			<xsl:when test="$input='MPA'">
				<xsl:copy-of select="'MPA'"/>
			</xsl:when>
			<xsl:when test="$input='MQH'">
				<xsl:copy-of select="'MQH'"/>
			</xsl:when>
			<xsl:when test="$input='MQS'">
				<xsl:copy-of select="'MQS'"/>
			</xsl:when>
			<xsl:when test="$input='MSK'">
				<xsl:copy-of select="'MSK'"/>
			</xsl:when>
			<xsl:when test="$input='MTK'">
				<xsl:copy-of select="'MTK'"/>
			</xsl:when>
			<xsl:when test="$input='MTQ'">
				<xsl:copy-of select="'MTQ'"/>
			</xsl:when>
			<xsl:when test="$input='MTR'">
				<xsl:copy-of select="'MTR'"/>
			</xsl:when>
			<xsl:when test="$input='MTS'">
				<xsl:copy-of select="'MTS'"/>
			</xsl:when>
			<xsl:when test="$input='MVA'">
				<xsl:copy-of select="'MVA'"/>
			</xsl:when>
			<xsl:when test="$input='MWH'">
				<xsl:copy-of select="'MWH'"/>
			</xsl:when>
			<xsl:when test="$input='N1'">
				<xsl:copy-of select="'N1'"/>
			</xsl:when>
			<xsl:when test="$input='N3'">
				<xsl:copy-of select="'N3'"/>
			</xsl:when>
			<xsl:when test="$input='NA'">
				<xsl:copy-of select="'NA'"/>
			</xsl:when>
			<xsl:when test="$input='NAR'">
				<xsl:copy-of select="'NAR'"/>
			</xsl:when>
			<xsl:when test="$input='NCL'">
				<xsl:copy-of select="'NCL'"/>
			</xsl:when>
			<xsl:when test="$input='NEW'">
				<xsl:copy-of select="'NEW'"/>
			</xsl:when>
			<xsl:when test="$input='NF'">
				<xsl:copy-of select="'NF'"/>
			</xsl:when>
			<xsl:when test="$input='NIL'">
				<xsl:copy-of select="'NIL'"/>
			</xsl:when>
			<xsl:when test="$input='NIU'">
				<xsl:copy-of select="'NIU'"/>
			</xsl:when>
			<xsl:when test="$input='NL'">
				<xsl:copy-of select="'NL'"/>
			</xsl:when>
			<xsl:when test="$input='NMI'">
				<xsl:copy-of select="'NMI'"/>
			</xsl:when>
			<xsl:when test="$input='NMP'">
				<xsl:copy-of select="'NMP'"/>
			</xsl:when>
			<xsl:when test="$input='NPR'">
				<xsl:copy-of select="'NPR'"/>
			</xsl:when>
			<xsl:when test="$input='NPT'">
				<xsl:copy-of select="'NPT'"/>
			</xsl:when>
			<xsl:when test="$input='NQ'">
				<xsl:copy-of select="'NQ'"/>
			</xsl:when>
			<xsl:when test="$input='NR'">
				<xsl:copy-of select="'NR'"/>
			</xsl:when>
			<xsl:when test="$input='NT'">
				<xsl:copy-of select="'NT'"/>
			</xsl:when>
			<xsl:when test="$input='NTT'">
				<xsl:copy-of select="'NTT'"/>
			</xsl:when>
			<xsl:when test="$input='NU'">
				<xsl:copy-of select="'NU'"/>
			</xsl:when>
			<xsl:when test="$input='NX'">
				<xsl:copy-of select="'NX'"/>
			</xsl:when>
			<xsl:when test="$input='OA'">
				<xsl:copy-of select="'OA'"/>
			</xsl:when>
			<xsl:when test="$input='ODE'">
				<xsl:copy-of select="'ODE'"/>
			</xsl:when>
			<xsl:when test="$input='OHM'">
				<xsl:copy-of select="'OHM'"/>
			</xsl:when>
			<xsl:when test="$input='ON'">
				<xsl:copy-of select="'ON'"/>
			</xsl:when>
			<xsl:when test="$input='ONZ'">
				<xsl:copy-of select="'ONZ'"/>
			</xsl:when>
			<xsl:when test="$input='OT'">
				<xsl:copy-of select="'OT'"/>
			</xsl:when>
			<xsl:when test="$input='OZ'">
				<xsl:copy-of select="'OZ'"/>
			</xsl:when>
			<xsl:when test="$input='OZA'">
				<xsl:copy-of select="'OZA'"/>
			</xsl:when>
			<xsl:when test="$input='OZI'">
				<xsl:copy-of select="'OZI'"/>
			</xsl:when>
			<xsl:when test="$input='P1'">
				<xsl:copy-of select="'P1'"/>
			</xsl:when>
			<xsl:when test="$input='P2'">
				<xsl:copy-of select="'P2'"/>
			</xsl:when>
			<xsl:when test="$input='P5'">
				<xsl:copy-of select="'P5'"/>
			</xsl:when>
			<xsl:when test="$input='PAL'">
				<xsl:copy-of select="'PAL'"/>
			</xsl:when>
			<xsl:when test="$input='PD'">
				<xsl:copy-of select="'PD'"/>
			</xsl:when>
			<xsl:when test="$input='PFL'">
				<xsl:copy-of select="'PFL'"/>
			</xsl:when>
			<xsl:when test="$input='PGL'">
				<xsl:copy-of select="'PGL'"/>
			</xsl:when>
			<xsl:when test="$input='PI'">
				<xsl:copy-of select="'PI'"/>
			</xsl:when>
			<xsl:when test="$input='PLA'">
				<xsl:copy-of select="'PLA'"/>
			</xsl:when>
			<xsl:when test="$input='PO'">
				<xsl:copy-of select="'PO'"/>
			</xsl:when>
			<xsl:when test="$input='PQ'">
				<xsl:copy-of select="'PQ'"/>
			</xsl:when>
			<xsl:when test="$input='PR'">
				<xsl:copy-of select="'PR'"/>
			</xsl:when>
			<xsl:when test="$input='PS'">
				<xsl:copy-of select="'PS'"/>
			</xsl:when>
			<xsl:when test="$input='PT'">
				<xsl:copy-of select="'PT'"/>
			</xsl:when>
			<xsl:when test="$input='PTD'">
				<xsl:copy-of select="'PTD'"/>
			</xsl:when>
			<xsl:when test="$input='PTI'">
				<xsl:copy-of select="'PTI'"/>
			</xsl:when>
			<xsl:when test="$input='PTL'">
				<xsl:copy-of select="'PTL'"/>
			</xsl:when>
			<xsl:when test="$input='Q3'">
				<xsl:copy-of select="'Q3'"/>
			</xsl:when>
			<xsl:when test="$input='QA'">
				<xsl:copy-of select="'QA'"/>
			</xsl:when>
			<xsl:when test="$input='QAN'">
				<xsl:copy-of select="'QAN'"/>
			</xsl:when>
			<xsl:when test="$input='QB'">
				<xsl:copy-of select="'QB'"/>
			</xsl:when>
			<xsl:when test="$input='QR'">
				<xsl:copy-of select="'QR'"/>
			</xsl:when>
			<xsl:when test="$input='QT'">
				<xsl:copy-of select="'QT'"/>
			</xsl:when>
			<xsl:when test="$input='QTD'">
				<xsl:copy-of select="'QTD'"/>
			</xsl:when>
			<xsl:when test="$input='QTI'">
				<xsl:copy-of select="'QTI'"/>
			</xsl:when>
			<xsl:when test="$input='QTL'">
				<xsl:copy-of select="'QTL'"/>
			</xsl:when>
			<xsl:when test="$input='QTR'">
				<xsl:copy-of select="'QTR'"/>
			</xsl:when>
			<xsl:when test="$input='R1'">
				<xsl:copy-of select="'R1'"/>
			</xsl:when>
			<xsl:when test="$input='R9'">
				<xsl:copy-of select="'R9'"/>
			</xsl:when>
			<xsl:when test="$input='RH'">
				<xsl:copy-of select="'RH'"/>
			</xsl:when>
			<xsl:when test="$input='RM'">
				<xsl:copy-of select="'RM'"/>
			</xsl:when>
			<xsl:when test="$input='RP'">
				<xsl:copy-of select="'RP'"/>
			</xsl:when>
			<xsl:when test="$input='RPM'">
				<xsl:copy-of select="'RPM'"/>
			</xsl:when>
			<xsl:when test="$input='RPS'">
				<xsl:copy-of select="'RPS'"/>
			</xsl:when>
			<xsl:when test="$input='RT'">
				<xsl:copy-of select="'RT'"/>
			</xsl:when>
			<xsl:when test="$input='S3'">
				<xsl:copy-of select="'S3'"/>
			</xsl:when>
			<xsl:when test="$input='S4'">
				<xsl:copy-of select="'S4'"/>
			</xsl:when>
			<xsl:when test="$input='SAN'">
				<xsl:copy-of select="'SAN'"/>
			</xsl:when>
			<xsl:when test="$input='SCO'">
				<xsl:copy-of select="'SCO'"/>
			</xsl:when>
			<xsl:when test="$input='SCR'">
				<xsl:copy-of select="'SCR'"/>
			</xsl:when>
			<xsl:when test="$input='SEC'">
				<xsl:copy-of select="'SEC'"/>
			</xsl:when>
			<xsl:when test="$input='SET'">
				<xsl:copy-of select="'SET'"/>
			</xsl:when>
			<xsl:when test="$input='SG'">
				<xsl:copy-of select="'SG'"/>
			</xsl:when>
			<xsl:when test="$input='SHT'">
				<xsl:copy-of select="'SHT'"/>
			</xsl:when>
			<xsl:when test="$input='SIE'">
				<xsl:copy-of select="'SIE'"/>
			</xsl:when>
			<xsl:when test="$input='SMI'">
				<xsl:copy-of select="'SMI'"/>
			</xsl:when>
			<xsl:when test="$input='SQ'">
				<xsl:copy-of select="'SQ'"/>
			</xsl:when>
			<xsl:when test="$input='SQR'">
				<xsl:copy-of select="'SQR'"/>
			</xsl:when>
			<xsl:when test="$input='SR'">
				<xsl:copy-of select="'SR'"/>
			</xsl:when>
			<xsl:when test="$input='STI'">
				<xsl:copy-of select="'STI'"/>
			</xsl:when>
			<xsl:when test="$input='STK'">
				<xsl:copy-of select="'STK'"/>
			</xsl:when>
			<xsl:when test="$input='STL'">
				<xsl:copy-of select="'STL'"/>
			</xsl:when>
			<xsl:when test="$input='STN'">
				<xsl:copy-of select="'STN'"/>
			</xsl:when>
			<xsl:when test="$input='SW'">
				<xsl:copy-of select="'SW'"/>
			</xsl:when>
			<xsl:when test="$input='SX'">
				<xsl:copy-of select="'SX'"/>
			</xsl:when>
			<xsl:when test="$input='T0'">
				<xsl:copy-of select="'T0'"/>
			</xsl:when>
			<xsl:when test="$input='T3'">
				<xsl:copy-of select="'T3'"/>
			</xsl:when>
			<xsl:when test="$input='TAH'">
				<xsl:copy-of select="'TAH'"/>
			</xsl:when>
			<xsl:when test="$input='TI'">
				<xsl:copy-of select="'TI'"/>
			</xsl:when>
			<xsl:when test="$input='TIC'">
				<xsl:copy-of select="'TIC'"/>
			</xsl:when>
			<xsl:when test="$input='TIP'">
				<xsl:copy-of select="'TIP'"/>
			</xsl:when>
			<xsl:when test="$input='TMS'">
				<xsl:copy-of select="'TMS'"/>
			</xsl:when>
			<xsl:when test="$input='TNE'">
				<xsl:copy-of select="'TNE'"/>
			</xsl:when>
			<xsl:when test="$input='TP'">
				<xsl:copy-of select="'TP'"/>
			</xsl:when>
			<xsl:when test="$input='TPR'">
				<xsl:copy-of select="'TPR'"/>
			</xsl:when>
			<xsl:when test="$input='TQD'">
				<xsl:copy-of select="'TQD'"/>
			</xsl:when>
			<xsl:when test="$input='TRL'">
				<xsl:copy-of select="'TRL'"/>
			</xsl:when>
			<xsl:when test="$input='U1'">
				<xsl:copy-of select="'U1'"/>
			</xsl:when>
			<xsl:when test="$input='U2'">
				<xsl:copy-of select="'U2'"/>
			</xsl:when>
			<xsl:when test="$input='UA'">
				<xsl:copy-of select="'UA'"/>
			</xsl:when>
			<xsl:when test="$input='UB'">
				<xsl:copy-of select="'UB'"/>
			</xsl:when>
			<xsl:when test="$input='UC'">
				<xsl:copy-of select="'UC'"/>
			</xsl:when>
			<xsl:when test="$input='VA'">
				<xsl:copy-of select="'VA'"/>
			</xsl:when>
			<xsl:when test="$input='VLT'">
				<xsl:copy-of select="'VLT'"/>
			</xsl:when>
			<xsl:when test="$input='VP'">
				<xsl:copy-of select="'VP'"/>
			</xsl:when>
			<xsl:when test="$input='W2'">
				<xsl:copy-of select="'W2'"/>
			</xsl:when>
			<xsl:when test="$input='WA'">
				<xsl:copy-of select="'WA'"/>
			</xsl:when>
			<xsl:when test="$input='WB'">
				<xsl:copy-of select="'WB'"/>
			</xsl:when>
			<xsl:when test="$input='WCD'">
				<xsl:copy-of select="'WCD'"/>
			</xsl:when>
			<xsl:when test="$input='WE'">
				<xsl:copy-of select="'WE'"/>
			</xsl:when>
			<xsl:when test="$input='WEB'">
				<xsl:copy-of select="'WEB'"/>
			</xsl:when>
			<xsl:when test="$input='WEE'">
				<xsl:copy-of select="'WEE'"/>
			</xsl:when>
			<xsl:when test="$input='WG'">
				<xsl:copy-of select="'WG'"/>
			</xsl:when>
			<xsl:when test="$input='WHR'">
				<xsl:copy-of select="'WHR'"/>
			</xsl:when>
			<xsl:when test="$input='WM'">
				<xsl:copy-of select="'WM'"/>
			</xsl:when>
			<xsl:when test="$input='WSD'">
				<xsl:copy-of select="'WSD'"/>
			</xsl:when>
			<xsl:when test="$input='WTT'">
				<xsl:copy-of select="'WTT'"/>
			</xsl:when>
			<xsl:when test="$input='WW'">
				<xsl:copy-of select="'WW'"/>
			</xsl:when>
			<xsl:when test="$input='X1'">
				<xsl:copy-of select="'X1'"/>
			</xsl:when>
			<xsl:when test="$input='YDK'">
				<xsl:copy-of select="'YDK'"/>
			</xsl:when>
			<xsl:when test="$input='YDQ'">
				<xsl:copy-of select="'YDQ'"/>
			</xsl:when>
			<xsl:when test="$input='YRD'">
				<xsl:copy-of select="'YRD'"/>
			</xsl:when>
			<xsl:when test="$input='ZP'">
				<xsl:copy-of select="'ZP'"/>
			</xsl:when>
			<xsl:when test="$input='ZZ'">
				<xsl:copy-of select="'ZZ'"/>
			</xsl:when>
			<xsl:when test="$input='5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='16'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='17'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='18'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='19'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='26'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='29'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='30'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='31'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='32'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='36'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='45'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='46'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='47'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='48'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='53'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='54'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='62'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='63'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='69'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='71'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='72'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='73'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='90'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='92'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='93'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='94'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='95'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='96'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='97'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='98'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1C'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1H'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1J'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1K'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1L'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1M'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='1X'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='2V'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='2W'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='3E'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='3G'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='3I'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='4B'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='4E'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5C'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5F'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5G'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5I'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5K'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5P'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='5Q'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='AR'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='AW'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B0'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='B9'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C77'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='C98'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D14'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D28'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D40'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D64'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D66'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D67'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D79'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D90'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D92'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D96'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D97'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D98'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='D99'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='DE'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='DQ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='DRM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='E2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='E3'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='E5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='EP'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='EV'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='F1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='F9'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='FG'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='FM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='G7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GC'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GK'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='GW'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='H1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='H2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HE'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HK'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HL'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HO'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HS'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HT'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='HY'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='II'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='IM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='IP'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='IT'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='JO'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KS'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='KTM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='L61'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='L62'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LC'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LJ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='LX'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='M0'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MK'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MQ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='MV'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='N2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NB'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NBB'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NC'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='ND'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NJ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NPL'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NRL'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='NY'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='OP'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P0'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P3'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='P9'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='PM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='PW'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='R4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RA'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RS'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='RU'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='S8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='SN'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='SST'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T7'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='T8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TA'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TJ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TQ'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TSD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='TSH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UD'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UE'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UF'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UH'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='UM'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='W4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='WI'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z1'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z2'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z3'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z4'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z5'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z6'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='Z8'">
				<xsl:copy-of select="'EA'"/>
			</xsl:when>
			<xsl:when test="$input='43'">
				<xsl:copy-of select="'X43'"/>
			</xsl:when>
			<xsl:when test="$input='44'">
				<xsl:copy-of select="'X44'"/>
			</xsl:when>
			<xsl:when test="$input='1A'">
				<xsl:copy-of select="'X1A'"/>
			</xsl:when>
			<xsl:when test="$input='1B'">
				<xsl:copy-of select="'X1B'"/>
			</xsl:when>
			<xsl:when test="$input='1D'">
				<xsl:copy-of select="'X1D'"/>
			</xsl:when>
			<xsl:when test="$input='1F'">
				<xsl:copy-of select="'X1F'"/>
			</xsl:when>
			<xsl:when test="$input='1G'">
				<xsl:copy-of select="'X1G'"/>
			</xsl:when>
			<xsl:when test="$input='3H'">
				<xsl:copy-of select="'X3H'"/>
			</xsl:when>
			<xsl:when test="$input='4A'">
				<xsl:copy-of select="'X4A'"/>
			</xsl:when>
			<xsl:when test="$input='5H'">
				<xsl:copy-of select="'X5H'"/>
			</xsl:when>
			<xsl:when test="$input='AJ'">
				<xsl:copy-of select="'XAJ'"/>
			</xsl:when>
			<xsl:when test="$input='AM'">
				<xsl:copy-of select="'XAM'"/>
			</xsl:when>
			<xsl:when test="$input='AP'">
				<xsl:copy-of select="'XAP'"/>
			</xsl:when>
			<xsl:when test="$input='AV'">
				<xsl:copy-of select="'XAV'"/>
			</xsl:when>
			<xsl:when test="$input='BD'">
				<xsl:copy-of select="'XBD'"/>
			</xsl:when>
			<xsl:when test="$input='BE'">
				<xsl:copy-of select="'XBE'"/>
			</xsl:when>
			<xsl:when test="$input='BG'">
				<xsl:copy-of select="'XBG'"/>
			</xsl:when>
			<xsl:when test="$input='BH'">
				<xsl:copy-of select="'XBH'"/>
			</xsl:when>
			<xsl:when test="$input='BJ'">
				<xsl:copy-of select="'XBJ'"/>
			</xsl:when>
			<xsl:when test="$input='BK'">
				<xsl:copy-of select="'XBK'"/>
			</xsl:when>
			<xsl:when test="$input='BL'">
				<xsl:copy-of select="'XBL'"/>
			</xsl:when>
			<xsl:when test="$input='BO'">
				<xsl:copy-of select="'XBO'"/>
			</xsl:when>
			<xsl:when test="$input='BR'">
				<xsl:copy-of select="'XBR'"/>
			</xsl:when>
			<xsl:when test="$input='BT'">
				<xsl:copy-of select="'XBT'"/>
			</xsl:when>
			<xsl:when test="$input='BW'">
				<xsl:copy-of select="'XBW'"/>
			</xsl:when>
			<xsl:when test="$input='BX'">
				<xsl:copy-of select="'XBX'"/>
			</xsl:when>
			<xsl:when test="$input='BZ'">
				<xsl:copy-of select="'XBZ'"/>
			</xsl:when>
			<xsl:when test="$input='CA'">
				<xsl:copy-of select="'XCA'"/>
			</xsl:when>
			<xsl:when test="$input='CH'">
				<xsl:copy-of select="'XCH'"/>
			</xsl:when>
			<xsl:when test="$input='CJ'">
				<xsl:copy-of select="'XCJ'"/>
			</xsl:when>
			<xsl:when test="$input='CK'">
				<xsl:copy-of select="'XCK'"/>
			</xsl:when>
			<xsl:when test="$input='CL'">
				<xsl:copy-of select="'XCL'"/>
			</xsl:when>
			<xsl:when test="$input='CO'">
				<xsl:copy-of select="'XCO'"/>
			</xsl:when>
			<xsl:when test="$input='CQ'">
				<xsl:copy-of select="'XCQ'"/>
			</xsl:when>
			<xsl:when test="$input='CR'">
				<xsl:copy-of select="'XCR'"/>
			</xsl:when>
			<xsl:when test="$input='CS'">
				<xsl:copy-of select="'XCS'"/>
			</xsl:when>
			<xsl:when test="$input='CT'">
				<xsl:copy-of select="'XCT'"/>
			</xsl:when>
			<xsl:when test="$input='CU'">
				<xsl:copy-of select="'XCU'"/>
			</xsl:when>
			<xsl:when test="$input='CV'">
				<xsl:copy-of select="'XCV'"/>
			</xsl:when>
			<xsl:when test="$input='CY'">
				<xsl:copy-of select="'XCY'"/>
			</xsl:when>
			<xsl:when test="$input='CZ'">
				<xsl:copy-of select="'XCZ'"/>
			</xsl:when>
			<xsl:when test="$input='DC'">
				<xsl:copy-of select="'XDC'"/>
			</xsl:when>
			<xsl:when test="$input='DI'">
				<xsl:copy-of select="'XDI'"/>
			</xsl:when>
			<xsl:when test="$input='DR'">
				<xsl:copy-of select="'XDR'"/>
			</xsl:when>
			<xsl:when test="$input='DS'">
				<xsl:copy-of select="'XDS'"/>
			</xsl:when>
			<xsl:when test="$input='DY'">
				<xsl:copy-of select="'XDY'"/>
			</xsl:when>
			<xsl:when test="$input='EC'">
				<xsl:copy-of select="'XEC'"/>
			</xsl:when>
			<xsl:when test="$input='FB'">
				<xsl:copy-of select="'XFB'"/>
			</xsl:when>
			<xsl:when test="$input='FD'">
				<xsl:copy-of select="'XFD'"/>
			</xsl:when>
			<xsl:when test="$input='FE'">
				<xsl:copy-of select="'XFE'"/>
			</xsl:when>
			<xsl:when test="$input='GY'">
				<xsl:copy-of select="'XGY'"/>
			</xsl:when>
			<xsl:when test="$input='GZ'">
				<xsl:copy-of select="'XGZ'"/>
			</xsl:when>
			<xsl:when test="$input='IC'">
				<xsl:copy-of select="'XIC'"/>
			</xsl:when>
			<xsl:when test="$input='IF'">
				<xsl:copy-of select="'XIF'"/>
			</xsl:when>
			<xsl:when test="$input='IL'">
				<xsl:copy-of select="'XIL'"/>
			</xsl:when>
			<xsl:when test="$input='JB'">
				<xsl:copy-of select="'XJB'"/>
			</xsl:when>
			<xsl:when test="$input='JG'">
				<xsl:copy-of select="'XJG'"/>
			</xsl:when>
			<xsl:when test="$input='JR'">
				<xsl:copy-of select="'XJR'"/>
			</xsl:when>
			<xsl:when test="$input='KG'">
				<xsl:copy-of select="'XKG'"/>
			</xsl:when>
			<xsl:when test="$input='LE'">
				<xsl:copy-of select="'XLE'"/>
			</xsl:when>
			<xsl:when test="$input='MA'">
				<xsl:copy-of select="'XMA'"/>
			</xsl:when>
			<xsl:when test="$input='MT'">
				<xsl:copy-of select="'XMT'"/>
			</xsl:when>
			<xsl:when test="$input='NE'">
				<xsl:copy-of select="'XNE'"/>
			</xsl:when>
			<xsl:when test="$input='NG'">
				<xsl:copy-of select="'XNG'"/>
			</xsl:when>
			<xsl:when test="$input='NV'">
				<xsl:copy-of select="'XNV'"/>
			</xsl:when>
			<xsl:when test="$input='PA'">
				<xsl:copy-of select="'XPA'"/>
			</xsl:when>
			<xsl:when test="$input='PB'">
				<xsl:copy-of select="'XPB'"/>
			</xsl:when>
			<xsl:when test="$input='PE'">
				<xsl:copy-of select="'XPE'"/>
			</xsl:when>
			<xsl:when test="$input='PF'">
				<xsl:copy-of select="'XPF'"/>
			</xsl:when>
			<xsl:when test="$input='PG'">
				<xsl:copy-of select="'XPG'"/>
			</xsl:when>
			<xsl:when test="$input='PK'">
				<xsl:copy-of select="'XPK'"/>
			</xsl:when>
			<xsl:when test="$input='PL'">
				<xsl:copy-of select="'XPL'"/>
			</xsl:when>
			<xsl:when test="$input='PN'">
				<xsl:copy-of select="'XPN'"/>
			</xsl:when>
			<xsl:when test="$input='PU'">
				<xsl:copy-of select="'XPU'"/>
			</xsl:when>
			<xsl:when test="$input='PV'">
				<xsl:copy-of select="'XPV'"/>
			</xsl:when>
			<xsl:when test="$input='PY'">
				<xsl:copy-of select="'XPY'"/>
			</xsl:when>
			<xsl:when test="$input='PZ'">
				<xsl:copy-of select="'XPZ'"/>
			</xsl:when>
			<xsl:when test="$input='QD'">
				<xsl:copy-of select="'XQD'"/>
			</xsl:when>
			<xsl:when test="$input='QH'">
				<xsl:copy-of select="'XQH'"/>
			</xsl:when>
			<xsl:when test="$input='QK'">
				<xsl:copy-of select="'XQK'"/>
			</xsl:when>
			<xsl:when test="$input='RD'">
				<xsl:copy-of select="'XRD'"/>
			</xsl:when>
			<xsl:when test="$input='RG'">
				<xsl:copy-of select="'XRG'"/>
			</xsl:when>
			<xsl:when test="$input='RK'">
				<xsl:copy-of select="'XRK'"/>
			</xsl:when>
			<xsl:when test="$input='RL'">
				<xsl:copy-of select="'XRL'"/>
			</xsl:when>
			<xsl:when test="$input='RO'">
				<xsl:copy-of select="'XRO'"/>
			</xsl:when>
			<xsl:when test="$input='SA'">
				<xsl:copy-of select="'XSA'"/>
			</xsl:when>
			<xsl:when test="$input='SD'">
				<xsl:copy-of select="'XSD'"/>
			</xsl:when>
			<xsl:when test="$input='SE'">
				<xsl:copy-of select="'XSE'"/>
			</xsl:when>
			<xsl:when test="$input='SK'">
				<xsl:copy-of select="'XSK'"/>
			</xsl:when>
			<xsl:when test="$input='SL'">
				<xsl:copy-of select="'XSL'"/>
			</xsl:when>
			<xsl:when test="$input='SO'">
				<xsl:copy-of select="'XSO'"/>
			</xsl:when>
			<xsl:when test="$input='SP'">
				<xsl:copy-of select="'XSP'"/>
			</xsl:when>
			<xsl:when test="$input='SS'">
				<xsl:copy-of select="'XSS'"/>
			</xsl:when>
			<xsl:when test="$input='ST'">
				<xsl:copy-of select="'XST'"/>
			</xsl:when>
			<xsl:when test="$input='SV'">
				<xsl:copy-of select="'XSV'"/>
			</xsl:when>
			<xsl:when test="$input='T1'">
				<xsl:copy-of select="'XT1'"/>
			</xsl:when>
			<xsl:when test="$input='TC'">
				<xsl:copy-of select="'XTC'"/>
			</xsl:when>
			<xsl:when test="$input='TD'">
				<xsl:copy-of select="'XTD'"/>
			</xsl:when>
			<xsl:when test="$input='TE'">
				<xsl:copy-of select="'XTE'"/>
			</xsl:when>
			<xsl:when test="$input='TK'">
				<xsl:copy-of select="'XTK'"/>
			</xsl:when>
			<xsl:when test="$input='TL'">
				<xsl:copy-of select="'XTL'"/>
			</xsl:when>
			<xsl:when test="$input='TN'">
				<xsl:copy-of select="'XTN'"/>
			</xsl:when>
			<xsl:when test="$input='TR'">
				<xsl:copy-of select="'XTR'"/>
			</xsl:when>
			<xsl:when test="$input='TS'">
				<xsl:copy-of select="'XTS'"/>
			</xsl:when>
			<xsl:when test="$input='TT'">
				<xsl:copy-of select="'XTT'"/>
			</xsl:when>
			<xsl:when test="$input='TU'">
				<xsl:copy-of select="'XTU'"/>
			</xsl:when>
			<xsl:when test="$input='TV'">
				<xsl:copy-of select="'XTV'"/>
			</xsl:when>
			<xsl:when test="$input='TW'">
				<xsl:copy-of select="'XTW'"/>
			</xsl:when>
			<xsl:when test="$input='TY'">
				<xsl:copy-of select="'XTY'"/>
			</xsl:when>
			<xsl:when test="$input='VI'">
				<xsl:copy-of select="'XVI'"/>
			</xsl:when>
			<xsl:when test="$input='VQ'">
				<xsl:copy-of select="'XVQ'"/>
			</xsl:when>
			<xsl:when test="$input='VS'">
				<xsl:copy-of select="'XVS'"/>
			</xsl:when>
			<xsl:when test="$input='WH'">
				<xsl:copy-of select="'XWH'"/>
			</xsl:when>
			<xsl:when test="$input='WR'">
				<xsl:copy-of select="'XWR'"/>
			</xsl:when>
			<xsl:when test="$input='YL'">
				<xsl:copy-of select="'XYL'"/>
			</xsl:when>
			<xsl:when test="$input='YT'">
				<xsl:copy-of select="'XYT'"/>
			</xsl:when>
			<xsl:when test="$input='XPR'">
				<xsl:copy-of select="'XPR'"/>
			</xsl:when>
			<xsl:when test="$input='X43'">
				<xsl:copy-of select="'X43'"/>
			</xsl:when>
			<xsl:when test="$input='X44'">
				<xsl:copy-of select="'X44'"/>
			</xsl:when>
			<xsl:when test="$input='X1A'">
				<xsl:copy-of select="'X1A'"/>
			</xsl:when>
			<xsl:when test="$input='X1B'">
				<xsl:copy-of select="'X1B'"/>
			</xsl:when>
			<xsl:when test="$input='X1D'">
				<xsl:copy-of select="'X1D'"/>
			</xsl:when>
			<xsl:when test="$input='X1F'">
				<xsl:copy-of select="'X1F'"/>
			</xsl:when>
			<xsl:when test="$input='X1G'">
				<xsl:copy-of select="'X1G'"/>
			</xsl:when>
			<xsl:when test="$input='X3H'">
				<xsl:copy-of select="'X3H'"/>
			</xsl:when>
			<xsl:when test="$input='X4A'">
				<xsl:copy-of select="'X4A'"/>
			</xsl:when>
			<xsl:when test="$input='X4B'">
				<xsl:copy-of select="'X4B'"/>
			</xsl:when>
			<xsl:when test="$input='X5H'">
				<xsl:copy-of select="'X5H'"/>
			</xsl:when>
			<xsl:when test="$input='XAJ'">
				<xsl:copy-of select="'XAJ'"/>
			</xsl:when>
			<xsl:when test="$input='XAM'">
				<xsl:copy-of select="'XAM'"/>
			</xsl:when>
			<xsl:when test="$input='XAP'">
				<xsl:copy-of select="'XAP'"/>
			</xsl:when>
			<xsl:when test="$input='XAV'">
				<xsl:copy-of select="'XAV'"/>
			</xsl:when>
			<xsl:when test="$input='XBD'">
				<xsl:copy-of select="'XBD'"/>
			</xsl:when>
			<xsl:when test="$input='XBE'">
				<xsl:copy-of select="'XBE'"/>
			</xsl:when>
			<xsl:when test="$input='XBG'">
				<xsl:copy-of select="'XBG'"/>
			</xsl:when>
			<xsl:when test="$input='XBH'">
				<xsl:copy-of select="'XBH'"/>
			</xsl:when>
			<xsl:when test="$input='XBJ'">
				<xsl:copy-of select="'XBJ'"/>
			</xsl:when>
			<xsl:when test="$input='XBK'">
				<xsl:copy-of select="'XBK'"/>
			</xsl:when>
			<xsl:when test="$input='XBL'">
				<xsl:copy-of select="'XBL'"/>
			</xsl:when>
			<xsl:when test="$input='XBO'">
				<xsl:copy-of select="'XBO'"/>
			</xsl:when>
			<xsl:when test="$input='XBR'">
				<xsl:copy-of select="'XBR'"/>
			</xsl:when>
			<xsl:when test="$input='XBT'">
				<xsl:copy-of select="'XBT'"/>
			</xsl:when>
			<xsl:when test="$input='XBW'">
				<xsl:copy-of select="'XBW'"/>
			</xsl:when>
			<xsl:when test="$input='XBX'">
				<xsl:copy-of select="'XBX'"/>
			</xsl:when>
			<xsl:when test="$input='XBZ'">
				<xsl:copy-of select="'XBZ'"/>
			</xsl:when>
			<xsl:when test="$input='XCA'">
				<xsl:copy-of select="'XCA'"/>
			</xsl:when>
			<xsl:when test="$input='XCH'">
				<xsl:copy-of select="'XCH'"/>
			</xsl:when>
			<xsl:when test="$input='XCJ'">
				<xsl:copy-of select="'XCJ'"/>
			</xsl:when>
			<xsl:when test="$input='XCK'">
				<xsl:copy-of select="'XCK'"/>
			</xsl:when>
			<xsl:when test="$input='XCL'">
				<xsl:copy-of select="'XCL'"/>
			</xsl:when>
			<xsl:when test="$input='XCO'">
				<xsl:copy-of select="'XCO'"/>
			</xsl:when>
			<xsl:when test="$input='XCQ'">
				<xsl:copy-of select="'XCQ'"/>
			</xsl:when>
			<xsl:when test="$input='XCR'">
				<xsl:copy-of select="'XCR'"/>
			</xsl:when>
			<xsl:when test="$input='XCS'">
				<xsl:copy-of select="'XCS'"/>
			</xsl:when>
			<xsl:when test="$input='XCT'">
				<xsl:copy-of select="'XCT'"/>
			</xsl:when>
			<xsl:when test="$input='XCU'">
				<xsl:copy-of select="'XCU'"/>
			</xsl:when>
			<xsl:when test="$input='XCV'">
				<xsl:copy-of select="'XCV'"/>
			</xsl:when>
			<xsl:when test="$input='XCY'">
				<xsl:copy-of select="'XCY'"/>
			</xsl:when>
			<xsl:when test="$input='XCZ'">
				<xsl:copy-of select="'XCZ'"/>
			</xsl:when>
			<xsl:when test="$input='XDC'">
				<xsl:copy-of select="'XDC'"/>
			</xsl:when>
			<xsl:when test="$input='XDI'">
				<xsl:copy-of select="'XDI'"/>
			</xsl:when>
			<xsl:when test="$input='XDR'">
				<xsl:copy-of select="'XDR'"/>
			</xsl:when>
			<xsl:when test="$input='XDS'">
				<xsl:copy-of select="'XDS'"/>
			</xsl:when>
			<xsl:when test="$input='XDY'">
				<xsl:copy-of select="'XDY'"/>
			</xsl:when>
			<xsl:when test="$input='XEC'">
				<xsl:copy-of select="'XEC'"/>
			</xsl:when>
			<xsl:when test="$input='XFB'">
				<xsl:copy-of select="'XFB'"/>
			</xsl:when>
			<xsl:when test="$input='XFD'">
				<xsl:copy-of select="'XFD'"/>
			</xsl:when>
			<xsl:when test="$input='XFE'">
				<xsl:copy-of select="'XFE'"/>
			</xsl:when>
			<xsl:when test="$input='XGY'">
				<xsl:copy-of select="'XGY'"/>
			</xsl:when>
			<xsl:when test="$input='XGZ'">
				<xsl:copy-of select="'XGZ'"/>
			</xsl:when>
			<xsl:when test="$input='XIC'">
				<xsl:copy-of select="'XIC'"/>
			</xsl:when>
			<xsl:when test="$input='XIF'">
				<xsl:copy-of select="'XIF'"/>
			</xsl:when>
			<xsl:when test="$input='XIL'">
				<xsl:copy-of select="'XIL'"/>
			</xsl:when>
			<xsl:when test="$input='XJB'">
				<xsl:copy-of select="'XJB'"/>
			</xsl:when>
			<xsl:when test="$input='XJG'">
				<xsl:copy-of select="'XJG'"/>
			</xsl:when>
			<xsl:when test="$input='XJR'">
				<xsl:copy-of select="'XJR'"/>
			</xsl:when>
			<xsl:when test="$input='XKG'">
				<xsl:copy-of select="'XKG'"/>
			</xsl:when>
			<xsl:when test="$input='XLE'">
				<xsl:copy-of select="'XLE'"/>
			</xsl:when>
			<xsl:when test="$input='XMA'">
				<xsl:copy-of select="'XMA'"/>
			</xsl:when>
			<xsl:when test="$input='XMT'">
				<xsl:copy-of select="'XMT'"/>
			</xsl:when>
			<xsl:when test="$input='XNE'">
				<xsl:copy-of select="'XNE'"/>
			</xsl:when>
			<xsl:when test="$input='XNG'">
				<xsl:copy-of select="'XNG'"/>
			</xsl:when>
			<xsl:when test="$input='XNV'">
				<xsl:copy-of select="'XNV'"/>
			</xsl:when>
			<xsl:when test="$input='XPA'">
				<xsl:copy-of select="'XPA'"/>
			</xsl:when>
			<xsl:when test="$input='XPB'">
				<xsl:copy-of select="'XPB'"/>
			</xsl:when>
			<xsl:when test="$input='XPE'">
				<xsl:copy-of select="'XPE'"/>
			</xsl:when>
			<xsl:when test="$input='XPF'">
				<xsl:copy-of select="'XPF'"/>
			</xsl:when>
			<xsl:when test="$input='XPG'">
				<xsl:copy-of select="'XPG'"/>
			</xsl:when>
			<xsl:when test="$input='XPK'">
				<xsl:copy-of select="'XPK'"/>
			</xsl:when>
			<xsl:when test="$input='XPL'">
				<xsl:copy-of select="'XPL'"/>
			</xsl:when>
			<xsl:when test="$input='XPN'">
				<xsl:copy-of select="'XPN'"/>
			</xsl:when>
			<xsl:when test="$input='XPU'">
				<xsl:copy-of select="'XPU'"/>
			</xsl:when>
			<xsl:when test="$input='XPV'">
				<xsl:copy-of select="'XPV'"/>
			</xsl:when>
			<xsl:when test="$input='XPY'">
				<xsl:copy-of select="'XPY'"/>
			</xsl:when>
			<xsl:when test="$input='XPZ'">
				<xsl:copy-of select="'XPZ'"/>
			</xsl:when>
			<xsl:when test="$input='XQD'">
				<xsl:copy-of select="'XQD'"/>
			</xsl:when>
			<xsl:when test="$input='XQH'">
				<xsl:copy-of select="'XQH'"/>
			</xsl:when>
			<xsl:when test="$input='XQK'">
				<xsl:copy-of select="'XQK'"/>
			</xsl:when>
			<xsl:when test="$input='XRD'">
				<xsl:copy-of select="'XRD'"/>
			</xsl:when>
			<xsl:when test="$input='XRG'">
				<xsl:copy-of select="'XRG'"/>
			</xsl:when>
			<xsl:when test="$input='XRK'">
				<xsl:copy-of select="'XRK'"/>
			</xsl:when>
			<xsl:when test="$input='XRL'">
				<xsl:copy-of select="'XRL'"/>
			</xsl:when>
			<xsl:when test="$input='XRO'">
				<xsl:copy-of select="'XRO'"/>
			</xsl:when>
			<xsl:when test="$input='XSA'">
				<xsl:copy-of select="'XSA'"/>
			</xsl:when>
			<xsl:when test="$input='XSD'">
				<xsl:copy-of select="'XSD'"/>
			</xsl:when>
			<xsl:when test="$input='XSE'">
				<xsl:copy-of select="'XSE'"/>
			</xsl:when>
			<xsl:when test="$input='XSK'">
				<xsl:copy-of select="'XSK'"/>
			</xsl:when>
			<xsl:when test="$input='XSL'">
				<xsl:copy-of select="'XSL'"/>
			</xsl:when>
			<xsl:when test="$input='XSO'">
				<xsl:copy-of select="'XSO'"/>
			</xsl:when>
			<xsl:when test="$input='XSP'">
				<xsl:copy-of select="'XSP'"/>
			</xsl:when>
			<xsl:when test="$input='XSS'">
				<xsl:copy-of select="'XSS'"/>
			</xsl:when>
			<xsl:when test="$input='XST'">
				<xsl:copy-of select="'XST'"/>
			</xsl:when>
			<xsl:when test="$input='XSV'">
				<xsl:copy-of select="'XSV'"/>
			</xsl:when>
			<xsl:when test="$input='XT1'">
				<xsl:copy-of select="'XT1'"/>
			</xsl:when>
			<xsl:when test="$input='XTC'">
				<xsl:copy-of select="'XTC'"/>
			</xsl:when>
			<xsl:when test="$input='XTD'">
				<xsl:copy-of select="'XTD'"/>
			</xsl:when>
			<xsl:when test="$input='XTE'">
				<xsl:copy-of select="'XTE'"/>
			</xsl:when>
			<xsl:when test="$input='XTK'">
				<xsl:copy-of select="'XTK'"/>
			</xsl:when>
			<xsl:when test="$input='XTL'">
				<xsl:copy-of select="'XTL'"/>
			</xsl:when>
			<xsl:when test="$input='XTN'">
				<xsl:copy-of select="'XTN'"/>
			</xsl:when>
			<xsl:when test="$input='XTR'">
				<xsl:copy-of select="'XTR'"/>
			</xsl:when>
			<xsl:when test="$input='XTS'">
				<xsl:copy-of select="'XTS'"/>
			</xsl:when>
			<xsl:when test="$input='XTT'">
				<xsl:copy-of select="'XTT'"/>
			</xsl:when>
			<xsl:when test="$input='XTU'">
				<xsl:copy-of select="'XTU'"/>
			</xsl:when>
			<xsl:when test="$input='XTV'">
				<xsl:copy-of select="'XTV'"/>
			</xsl:when>
			<xsl:when test="$input='XTW'">
				<xsl:copy-of select="'XTW'"/>
			</xsl:when>
			<xsl:when test="$input='XTY'">
				<xsl:copy-of select="'XTY'"/>
			</xsl:when>
			<xsl:when test="$input='XVI'">
				<xsl:copy-of select="'XVI'"/>
			</xsl:when>
			<xsl:when test="$input='XVQ'">
				<xsl:copy-of select="'XVQ'"/>
			</xsl:when>
			<xsl:when test="$input='XVS'">
				<xsl:copy-of select="'XVS'"/>
			</xsl:when>
			<xsl:when test="$input='XWH'">
				<xsl:copy-of select="'XWH'"/>
			</xsl:when>
			<xsl:when test="$input='XWR'">
				<xsl:copy-of select="'XWR'"/>
			</xsl:when>
			<xsl:when test="$input='XYL'">
				<xsl:copy-of select="'XYL'"/>
			</xsl:when>
			<xsl:when test="$input='XYT'">
				<xsl:copy-of select="'XYT'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="''"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var359_Invoice" as="node()?" select="ns0:Invoice"/>
		<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:udt="urn:oasis:names:specification:ubl:schema:xsd:UnqualifiedDataTypes-2" xmlns:ccts-cct="urn:un:unece:uncefact:data:specification:CoreComponentTypeSchemaModule:2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:qdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDataTypes-2" xmlns:ccts="urn:un:unece:uncefact:documentation:2">
			<xsl:for-each select="$var359_Invoice/ext:UBLExtensions">
				<ext:UBLExtensions>
					<xsl:for-each select="ext:UBLExtension">
						<ext:UBLExtension>
							<xsl:sequence select="(./@node(), ./node())"/>
						</ext:UBLExtension>
					</xsl:for-each>
				</ext:UBLExtensions>
			</xsl:for-each>
			<cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>
			<cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>
			<xsl:for-each select="$var359_Invoice/cbc:ProfileExecutionID">
				<cbc:ProfileExecutionID>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:ProfileExecutionID>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<cbc:ID>
					<xsl:sequence select="fn:string(cbc:ID)"/>
				</cbc:ID>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:CopyIndicator">
				<cbc:CopyIndicator>
					<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
				</cbc:CopyIndicator>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:UUID">
				<cbc:UUID>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:UUID>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<cbc:IssueDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(cbc:IssueDate)))"/>
				</cbc:IssueDate>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:IssueTime">
				<cbc:IssueTime>
					<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
				</cbc:IssueTime>
			</xsl:for-each>
			<xsl:variable name="var1_test_resultof_any" as="xs:string?">
				<xsl:choose>
					<xsl:when test="fn:exists(($var359_Invoice)[fn:exists(cbc:DueDate)])">
						<xsl:for-each select="$var359_Invoice/cbc:DueDate">
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="''"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:for-each select="$var1_test_resultof_any">
				<xsl:variable name="var6_test_resultof_greater" as="xs:date?">
					<xsl:choose>
						<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
							<xsl:for-each select="$var359_Invoice/cbc:DueDate">
								<xsl:sequence select="xs:date(fn:string(.))"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="var5_resultof_first_items" as="node()*" select="($var359_Invoice/cac:PaymentMeans/cbc:PaymentDueDate)[(fn:position() &lt;= xs:integer('1'))]"/>
							<xsl:variable name="var4_resultof_exists" as="xs:boolean" select="fn:exists($var5_resultof_first_items)"/>
							<xsl:variable name="var2_test_exists" as="xs:string*">
								<xsl:choose>
									<xsl:when test="$var4_resultof_exists">
										<xsl:for-each select="$var5_resultof_first_items">
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="(fn:string-length(xs:string(fn:string-join(for $x in $var2_test_exists return xs:string($x), ' '))) &gt; xs:decimal('0'))">
								<xsl:if test="$var4_resultof_exists">
									<xsl:variable name="var3_cur_of_first_items" as="xs:date*">
										<xsl:for-each select="$var5_resultof_first_items">
											<xsl:sequence select="xs:date(fn:string(.))"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:sequence select="xs:date(fn:string-join(for $x in $var3_cur_of_first_items return xs:string($x), ' '))"/>
								</xsl:if>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:for-each select="$var6_test_resultof_greater">
					<cbc:DueDate>
						<xsl:sequence select="xs:string(.)"/>
					</cbc:DueDate>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:InvoiceTypeCode">
				<cbc:InvoiceTypeCode>
					<xsl:attribute name="listID" namespace="" select="'UNCL1001'"/>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:InvoiceTypeCode>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:Note">
				<cbc:Note>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:Note>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:TaxPointDate">
				<cbc:TaxPointDate>
					<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
				</cbc:TaxPointDate>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:DocumentCurrencyCode">
				<cbc:DocumentCurrencyCode>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:DocumentCurrencyCode>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<xsl:variable name="var8_cur" as="node()" select="."/>
				<xsl:for-each select="cbc:TaxCurrencyCode">
					<xsl:variable name="var7_cur" as="node()" select="."/>
					<xsl:for-each select="($var8_cur/cbc:DocumentCurrencyCode)[(fn:string($var7_cur) != fn:string(.))]">
						<cbc:TaxCurrencyCode>
							<xsl:sequence select="fn:string($var7_cur)"/>
						</cbc:TaxCurrencyCode>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:PricingCurrencyCode">
				<cbc:PricingCurrencyCode>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:PricingCurrencyCode>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:PaymentCurrencyCode">
				<cbc:PaymentCurrencyCode>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:PaymentCurrencyCode>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:PaymentAlternativeCurrencyCode">
				<cbc:PaymentAlternativeCurrencyCode>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:PaymentAlternativeCurrencyCode>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:AccountingCostCode">
				<cbc:AccountingCostCode>
					<xsl:sequence select="fn:string(.)"/>
				</cbc:AccountingCostCode>
			</xsl:for-each>
			<xsl:variable name="var9_test_resultof_any" as="xs:string?">
				<xsl:choose>
					<xsl:when test="fn:exists(($var359_Invoice)[fn:exists(cbc:AccountingCost)])">
						<xsl:for-each select="$var359_Invoice/cbc:AccountingCost">
							<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="''"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:for-each select="($var9_test_resultof_any)[(fn:string-length(.) &gt; xs:decimal('0'))]">
				<xsl:for-each select="$var359_Invoice/cbc:AccountingCost">
					<cbc:AccountingCost>
						<xsl:sequence select="fn:string(.)"/>
					</cbc:AccountingCost>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cbc:LineCountNumeric">
				<cbc:LineCountNumeric>
					<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
				</cbc:LineCountNumeric>
			</xsl:for-each>
			<xsl:variable name="var10_test_resultof_any" as="xs:string?">
				<xsl:choose>
					<xsl:when test="fn:exists(($var359_Invoice)[fn:exists(cbc:BuyerReference)])">
						<xsl:for-each select="$var359_Invoice/cbc:BuyerReference">
							<xsl:sequence select="fn:string(.)"/>
						</xsl:for-each>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="''"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:for-each select="$var10_test_resultof_any">
				<xsl:variable name="var15_test_resultof_greater" as="xs:string?">
					<xsl:choose>
						<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
							<xsl:for-each select="$var359_Invoice/cbc:BuyerReference">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="var14_resultof_any" as="xs:boolean" select="fn:exists(($var359_Invoice)[fn:exists((./cac:AccountingCustomerParty/cac:Party)[fn:exists((./cac:Contact)[fn:exists(cbc:ID)])])])"/>
							<xsl:variable name="var12_test_any" as="xs:string?">
								<xsl:choose>
									<xsl:when test="$var14_resultof_any">
										<xsl:for-each select="$var359_Invoice/cac:AccountingCustomerParty/cac:Party/cac:Contact/cbc:ID">
											<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var13_resultof_filter" as="xs:string?" select="($var12_test_any)[(fn:string-length(.) &gt; xs:decimal('0'))]"/>
							<xsl:variable name="var11_test_resultof_any" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists(($var13_resultof_filter)[$var14_resultof_any])">
										<xsl:for-each select="$var13_resultof_filter">
											<xsl:for-each select="$var359_Invoice/cac:AccountingCustomerParty/cac:Party/cac:Contact/cbc:ID">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var11_test_resultof_any">
								<xsl:choose>
									<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
										<xsl:for-each select="$var13_resultof_filter">
											<xsl:for-each select="$var359_Invoice/cac:AccountingCustomerParty/cac:Party/cac:Contact/cbc:ID">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:for-each select="$var359_Invoice/cac:AccountingCustomerParty/cac:Party/cac:Contact/cbc:Name">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:for-each select="$var15_test_resultof_greater">
					<cbc:BuyerReference>
						<xsl:sequence select="."/>
					</cbc:BuyerReference>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:InvoicePeriod">
				<cac:InvoicePeriod>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:InvoicePeriod>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:OrderReference">
				<cac:OrderReference>
					<xsl:variable name="var16_ID" as="node()" select="cbc:ID"/>
					<cbc:ID>
						<xsl:sequence select="($var16_ID/@node(), $var16_ID/node())"/>
					</cbc:ID>
					<xsl:for-each select="cbc:SalesOrderID">
						<cbc:SalesOrderID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:SalesOrderID>
					</xsl:for-each>
					<xsl:for-each select="cbc:CopyIndicator">
						<cbc:CopyIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:CopyIndicator>
					</xsl:for-each>
					<xsl:for-each select="cbc:UUID">
						<cbc:UUID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:UUID>
					</xsl:for-each>
					<xsl:for-each select="cbc:IssueDate">
						<cbc:IssueDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:IssueDate>
					</xsl:for-each>
					<xsl:for-each select="cbc:IssueTime">
						<cbc:IssueTime>
							<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
						</cbc:IssueTime>
					</xsl:for-each>
					<xsl:for-each select="cbc:CustomerReference">
						<cbc:CustomerReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:CustomerReference>
					</xsl:for-each>
					<xsl:for-each select="cbc:OrderTypeCode">
						<cbc:OrderTypeCode>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:OrderTypeCode>
					</xsl:for-each>
					<xsl:for-each select="cac:DocumentReference">
						<cac:DocumentReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DocumentReference>
					</xsl:for-each>
				</cac:OrderReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:BillingReference">
				<cac:BillingReference>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:BillingReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:DespatchDocumentReference">
				<cac:DespatchDocumentReference>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:DespatchDocumentReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:ReceiptDocumentReference">
				<cac:ReceiptDocumentReference>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:ReceiptDocumentReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:StatementDocumentReference">
				<cac:StatementDocumentReference>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:StatementDocumentReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:OriginatorDocumentReference">
				<cac:OriginatorDocumentReference>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:OriginatorDocumentReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:ContractDocumentReference">
				<cac:ContractDocumentReference>
					<cbc:ID>
						<xsl:sequence select="fn:string(cbc:ID)"/>
					</cbc:ID>
					<xsl:for-each select="cbc:CopyIndicator">
						<cbc:CopyIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:CopyIndicator>
					</xsl:for-each>
					<xsl:for-each select="cbc:UUID">
						<cbc:UUID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:UUID>
					</xsl:for-each>
					<xsl:for-each select="cbc:IssueDate">
						<cbc:IssueDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:IssueDate>
					</xsl:for-each>
					<xsl:for-each select="cbc:IssueTime">
						<cbc:IssueTime>
							<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
						</cbc:IssueTime>
					</xsl:for-each>
					<xsl:for-each select="cbc:XPath">
						<cbc:XPath>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:XPath>
					</xsl:for-each>
					<xsl:for-each select="cbc:LanguageID">
						<cbc:LanguageID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:LanguageID>
					</xsl:for-each>
					<xsl:for-each select="cbc:LocaleCode">
						<cbc:LocaleCode>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:LocaleCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:VersionID">
						<cbc:VersionID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:VersionID>
					</xsl:for-each>
					<xsl:for-each select="cbc:DocumentStatusCode">
						<cbc:DocumentStatusCode>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:DocumentStatusCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:DocumentDescription">
						<cbc:DocumentDescription>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:DocumentDescription>
					</xsl:for-each>
					<xsl:for-each select="cac:Attachment">
						<cac:Attachment>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:Attachment>
					</xsl:for-each>
					<xsl:for-each select="cac:ValidityPeriod">
						<cac:ValidityPeriod>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:ValidityPeriod>
					</xsl:for-each>
					<xsl:for-each select="cac:IssuerParty">
						<cac:IssuerParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:IssuerParty>
					</xsl:for-each>
					<xsl:for-each select="cac:ResultOfVerification">
						<cac:ResultOfVerification>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:ResultOfVerification>
					</xsl:for-each>
				</cac:ContractDocumentReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:AdditionalDocumentReference">
				<xsl:variable name="var22_ID_as_string" as="xs:string" select="fn:string(cbc:ID)"/>
				<xsl:variable name="var21_create_cbc_DocumentDescription_of_DocumentDescription" as="node()*">
					<xsl:for-each select="cbc:DocumentDescription">
						<cbc:DocumentDescription>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:DocumentDescription>
					</xsl:for-each>
				</xsl:variable>
				<cac:AdditionalDocumentReference>
					<cbc:ID>
						<xsl:sequence select="$var22_ID_as_string"/>
					</cbc:ID>
					<xsl:for-each select="cbc:CopyIndicator">
						<cbc:CopyIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:CopyIndicator>
					</xsl:for-each>
					<xsl:for-each select="cbc:UUID">
						<cbc:UUID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:UUID>
					</xsl:for-each>
					<xsl:for-each select="cbc:IssueDate">
						<cbc:IssueDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:IssueDate>
					</xsl:for-each>
					<xsl:for-each select="cbc:IssueTime">
						<cbc:IssueTime>
							<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
						</cbc:IssueTime>
					</xsl:for-each>
					<xsl:for-each select="cbc:XPath">
						<cbc:XPath>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:XPath>
					</xsl:for-each>
					<xsl:for-each select="cbc:LanguageID">
						<cbc:LanguageID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:LanguageID>
					</xsl:for-each>
					<xsl:for-each select="cbc:LocaleCode">
						<cbc:LocaleCode>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:LocaleCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:VersionID">
						<cbc:VersionID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:VersionID>
					</xsl:for-each>
					<xsl:for-each select="cbc:DocumentStatusCode">
						<cbc:DocumentStatusCode>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:DocumentStatusCode>
					</xsl:for-each>
					<xsl:sequence select="$var21_create_cbc_DocumentDescription_of_DocumentDescription"/>
					<xsl:sequence select="$var21_create_cbc_DocumentDescription_of_DocumentDescription"/>
					<xsl:for-each select="cac:Attachment">
						<cac:Attachment>
							<xsl:for-each select="cbc:EmbeddedDocumentBinaryObject">
								<xsl:variable name="var20_filename" as="node()?" select="@filename"/>
								<xsl:variable name="var19_cur_as_string" as="xs:string" select="xs:string(xs:base64Binary(fn:string(.)))"/>
								<cbc:EmbeddedDocumentBinaryObject>
									<xsl:for-each select="@format">
										<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@encodingCode">
										<xsl:attribute name="encodingCode" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@characterSetCode">
										<xsl:attribute name="characterSetCode" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@uri">
										<xsl:attribute name="uri" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:variable name="var17_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var20_filename)">
												<xsl:for-each select="$var20_filename">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="$var17_test_resultof_exists">
										<xsl:variable name="var18_test_resultof_greater" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
													<xsl:for-each select="$var20_filename">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:if test="(fn:string-length($var19_cur_as_string) &gt; xs:decimal('0'))">
														<xsl:sequence select="$var22_ID_as_string"/>
													</xsl:if>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var18_test_resultof_greater">
											<xsl:attribute name="filename" namespace="" select="."/>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:attribute name="mimeCode" namespace="" select="fn:string(@mimeCode)"/>
									<xsl:sequence select="$var19_cur_as_string"/>
								</cbc:EmbeddedDocumentBinaryObject>
							</xsl:for-each>
							<xsl:for-each select="cac:ExternalReference">
								<cac:ExternalReference>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ExternalReference>
							</xsl:for-each>
						</cac:Attachment>
					</xsl:for-each>
					<xsl:for-each select="cac:ValidityPeriod">
						<cac:ValidityPeriod>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:ValidityPeriod>
					</xsl:for-each>
					<xsl:for-each select="cac:IssuerParty">
						<cac:IssuerParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:IssuerParty>
					</xsl:for-each>
					<xsl:for-each select="cac:ResultOfVerification">
						<cac:ResultOfVerification>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:ResultOfVerification>
					</xsl:for-each>
				</cac:AdditionalDocumentReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:ProjectReference">
				<cac:ProjectReference>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:ProjectReference>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:Signature">
				<cac:Signature>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:Signature>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<xsl:variable name="var59_AccountingSupplierParty" as="node()" select="cac:AccountingSupplierParty"/>
				<cac:AccountingSupplierParty>
					<xsl:for-each select="$var59_AccountingSupplierParty/cbc:CustomerAssignedAccountID">
						<cbc:CustomerAssignedAccountID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:CustomerAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var59_AccountingSupplierParty/cbc:AdditionalAccountID">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var59_AccountingSupplierParty/cbc:DataSendingCapability">
						<cbc:DataSendingCapability>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:DataSendingCapability>
					</xsl:for-each>
					<xsl:for-each select="$var59_AccountingSupplierParty/cac:Party">
						<xsl:variable name="var56_EndpointID" as="node()?" select="cbc:EndpointID"/>
						<xsl:variable name="var57_PostalAddress" as="node()?" select="cac:PostalAddress"/>
						<xsl:variable name="var58_PartyLegalEntity" as="node()*" select="cac:PartyLegalEntity"/>
						<cac:Party>
							<xsl:for-each select="cbc:MarkCareIndicator">
								<cbc:MarkCareIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkCareIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttentionIndicator">
								<cbc:MarkAttentionIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkAttentionIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:WebsiteURI">
								<cbc:WebsiteURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:WebsiteURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:LogoReferenceID">
								<cbc:LogoReferenceID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LogoReferenceID>
							</xsl:for-each>
							<xsl:variable name="var23_test_resultof_exists" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists($var56_EndpointID)">
										<xsl:for-each select="$var56_EndpointID">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var25_resultof_filter" as="xs:string?">
								<xsl:for-each select="$var23_test_resultof_exists">
									<xsl:variable name="var24_test_resultof_greater" as="xs:string*">
										<xsl:choose>
											<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
												<xsl:for-each select="$var56_EndpointID">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:for-each select="$var58_PartyLegalEntity/cbc:CompanyID">
													<xsl:sequence select="fn:replace(fn:string(.), '[^0-9]', '')"/>
												</xsl:for-each>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:if test="fn:exists($var24_test_resultof_greater)">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var25_resultof_filter">
								<cbc:EndpointID>
									<xsl:for-each select="$var56_EndpointID/@schemeID">
										<xsl:attribute name="schemeID" namespace="">
											<xsl:choose>
												<xsl:when test="(fn:substring(fn:string(.), xs:double(xs:decimal('1')), xs:double(xs:decimal('3'))) = 'SE:')">
													<xsl:sequence select="'0007'"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="'0192'"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
									</xsl:for-each>
									<xsl:for-each select="$var56_EndpointID/@schemeName">
										<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var56_EndpointID/@schemeAgencyID">
										<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var56_EndpointID/@schemeAgencyName">
										<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var56_EndpointID/@schemeVersionID">
										<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var56_EndpointID/@schemeDataURI">
										<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:for-each select="$var56_EndpointID/@schemeURI">
										<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:variable name="var26_test_resultof_greater" as="xs:string*">
										<xsl:choose>
											<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
												<xsl:for-each select="$var56_EndpointID">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:for-each select="$var58_PartyLegalEntity/cbc:CompanyID">
													<xsl:sequence select="fn:replace(fn:string(.), '[^0-9]', '')"/>
												</xsl:for-each>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var26_test_resultof_greater return xs:string($x), ' '))"/>
								</cbc:EndpointID>
							</xsl:for-each>
							<xsl:for-each select="cbc:IndustryClassificationCode">
								<cbc:IndustryClassificationCode>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:IndustryClassificationCode>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyIdentification">
								<cac:PartyIdentification>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyIdentification>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyName">
								<cac:PartyName>
									<cbc:Name>
										<xsl:sequence select="fn:string(cbc:Name)"/>
									</cbc:Name>
								</cac:PartyName>
							</xsl:for-each>
							<xsl:for-each select="cac:Language">
								<cac:Language>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Language>
							</xsl:for-each>
							<xsl:for-each select="$var57_PostalAddress">
								<xsl:variable name="var31_CityName" as="node()?" select="cbc:CityName"/>
								<xsl:variable name="var32_AdditionalStreetName" as="node()?" select="cbc:AdditionalStreetName"/>
								<xsl:variable name="var33_PostalZone" as="node()?" select="cbc:PostalZone"/>
								<xsl:variable name="var34_StreetName" as="node()?" select="cbc:StreetName"/>
								<cac:PostalAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:variable name="var27_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var34_StreetName)">
												<xsl:for-each select="$var34_StreetName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var27_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var34_StreetName">
											<cbc:StreetName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:StreetName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var28_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var32_AdditionalStreetName)">
												<xsl:for-each select="$var32_AdditionalStreetName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var28_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var32_AdditionalStreetName">
											<cbc:AdditionalStreetName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:AdditionalStreetName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:variable name="var29_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var31_CityName)">
												<xsl:for-each select="$var31_CityName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var29_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var31_CityName">
											<cbc:CityName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CityName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var30_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var33_PostalZone)">
												<xsl:for-each select="$var33_PostalZone">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var30_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var33_PostalZone">
											<cbc:PostalZone>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:PostalZone>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<cbc:Line>
												<xsl:sequence select="fn:string(cbc:Line)"/>
											</cbc:Line>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:for-each select="@listAgencyID">
														<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listAgencyName">
														<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listName">
														<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listVersionID">
														<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@languageID">
														<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listURI">
														<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:for-each select="@listSchemeURI">
														<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:PostalAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:PhysicalLocation">
								<cac:PhysicalLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PhysicalLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyTaxScheme">
								<cac:PartyTaxScheme>
									<xsl:for-each select="cbc:RegistrationName">
										<cbc:RegistrationName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:RegistrationName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyID">
										<xsl:variable name="var39_cur" as="node()" select="."/>
										<xsl:variable name="var38_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:variable name="var37_test_resultof_equal" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:upper-case($var38_cur_as_string) = 'FORETAKSREGISTERET')">
													<xsl:sequence select="$var38_cur_as_string"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="$var57_PostalAddress/cac:Country/cbc:IdentificationCode">
														<xsl:variable name="var36_cur_as_string" as="xs:string" select="fn:string(.)"/>
														<xsl:variable name="var35_test_resultof_equal" as="xs:string">
															<xsl:choose>
																<xsl:when test="(fn:lower-case($var36_cur_as_string) = 'no')">
																	<xsl:sequence select="'MVA'"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:sequence select="''"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var36_cur_as_string, fn:replace($var38_cur_as_string, '[^0-9]', '')), $var35_test_resultof_equal)"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var37_test_resultof_equal">
											<cbc:CompanyID>
												<xsl:for-each select="$var39_cur/@schemeName">
													<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var39_cur/@schemeAgencyID">
													<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var39_cur/@schemeAgencyName">
													<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var39_cur/@schemeVersionID">
													<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var39_cur/@schemeDataURI">
													<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var39_cur/@schemeURI">
													<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:sequence select="."/>
											</cbc:CompanyID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:TaxLevelCode">
										<cbc:TaxLevelCode>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:TaxLevelCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:ExemptionReasonCode">
										<cbc:ExemptionReasonCode>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ExemptionReasonCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:ExemptionReason">
										<cbc:ExemptionReason>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ExemptionReason>
									</xsl:for-each>
									<xsl:for-each select="cac:RegistrationAddress">
										<cac:RegistrationAddress>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:RegistrationAddress>
									</xsl:for-each>
									<xsl:variable name="var40_TaxScheme" as="node()" select="cac:TaxScheme"/>
									<cac:TaxScheme>
										<xsl:for-each select="$var40_TaxScheme/cbc:ID">
											<cbc:ID>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:ID>
										</xsl:for-each>
										<xsl:for-each select="$var40_TaxScheme/cbc:Name">
											<cbc:Name>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Name>
										</xsl:for-each>
										<xsl:for-each select="$var40_TaxScheme/cbc:TaxTypeCode">
											<cbc:TaxTypeCode>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:TaxTypeCode>
										</xsl:for-each>
										<xsl:for-each select="$var40_TaxScheme/cbc:CurrencyCode">
											<cbc:CurrencyCode>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CurrencyCode>
										</xsl:for-each>
										<xsl:for-each select="$var40_TaxScheme/cac:JurisdictionRegionAddress">
											<cac:JurisdictionRegionAddress>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:JurisdictionRegionAddress>
										</xsl:for-each>
									</cac:TaxScheme>
								</cac:PartyTaxScheme>
							</xsl:for-each>
							<xsl:for-each select="$var58_PartyLegalEntity">
								<xsl:variable name="var43_CompanyID" as="node()?" select="cbc:CompanyID"/>
								<cac:PartyLegalEntity>
									<xsl:for-each select="cbc:RegistrationName">
										<cbc:RegistrationName>
											<xsl:for-each select="@languageID">
												<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@languageLocaleID">
												<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:RegistrationName>
									</xsl:for-each>
									<xsl:variable name="var41_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var43_CompanyID)">
												<xsl:for-each select="$var43_CompanyID">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var41_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var43_CompanyID">
											<cbc:CompanyID>
												<xsl:for-each select="$var43_CompanyID/@schemeID">
													<xsl:variable name="var42_resultof_vmf__inputtoresult" as="xs:string?">
														<xsl:call-template name="vmf:vmf1_inputtoresult">
															<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:for-each select="$var42_resultof_vmf__inputtoresult">
														<xsl:attribute name="schemeID" namespace="" select="."/>
													</xsl:for-each>
												</xsl:for-each>
												<xsl:for-each select="$var43_CompanyID/@schemeName">
													<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var43_CompanyID/@schemeAgencyID">
													<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var43_CompanyID/@schemeAgencyName">
													<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var43_CompanyID/@schemeVersionID">
													<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var43_CompanyID/@schemeDataURI">
													<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var43_CompanyID/@schemeURI">
													<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CompanyID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationDate">
										<cbc:RegistrationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationExpirationDate">
										<cbc:RegistrationExpirationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationExpirationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalFormCode">
										<cbc:CompanyLegalFormCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalFormCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalForm">
										<cbc:CompanyLegalForm>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalForm>
									</xsl:for-each>
									<xsl:for-each select="cbc:SoleProprietorshipIndicator">
										<cbc:SoleProprietorshipIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:SoleProprietorshipIndicator>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLiquidationStatusCode">
										<cbc:CompanyLiquidationStatusCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLiquidationStatusCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CorporateStockAmount">
										<cbc:CorporateStockAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CorporateStockAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:FullyPaidSharesIndicator">
										<cbc:FullyPaidSharesIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:FullyPaidSharesIndicator>
									</xsl:for-each>
									<xsl:for-each select="cac:RegistrationAddress">
										<cac:RegistrationAddress>
											<xsl:for-each select="cbc:ID">
												<cbc:ID>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:ID>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressTypeCode">
												<cbc:AddressTypeCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:AddressTypeCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressFormatCode">
												<cbc:AddressFormatCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:AddressFormatCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Postbox">
												<cbc:Postbox>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Postbox>
											</xsl:for-each>
											<xsl:for-each select="cbc:Floor">
												<cbc:Floor>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Floor>
											</xsl:for-each>
											<xsl:for-each select="cbc:Room">
												<cbc:Room>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Room>
											</xsl:for-each>
											<xsl:for-each select="cbc:StreetName">
												<cbc:StreetName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:StreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:AdditionalStreetName">
												<cbc:AdditionalStreetName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:AdditionalStreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BlockName">
												<cbc:BlockName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:BlockName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingName">
												<cbc:BuildingName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:BuildingName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingNumber">
												<cbc:BuildingNumber>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:BuildingNumber>
											</xsl:for-each>
											<xsl:for-each select="cbc:InhouseMail">
												<cbc:InhouseMail>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:InhouseMail>
											</xsl:for-each>
											<xsl:for-each select="cbc:Department">
												<cbc:Department>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Department>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkAttention">
												<cbc:MarkAttention>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:MarkAttention>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkCare">
												<cbc:MarkCare>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:MarkCare>
											</xsl:for-each>
											<xsl:for-each select="cbc:PlotIdentification">
												<cbc:PlotIdentification>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:PlotIdentification>
											</xsl:for-each>
											<xsl:for-each select="cbc:CitySubdivisionName">
												<cbc:CitySubdivisionName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CitySubdivisionName>
											</xsl:for-each>
											<xsl:for-each select="cbc:CityName">
												<cbc:CityName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CityName>
											</xsl:for-each>
											<xsl:for-each select="cbc:PostalZone">
												<cbc:PostalZone>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:PostalZone>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentity">
												<cbc:CountrySubentity>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CountrySubentity>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentityCode">
												<cbc:CountrySubentityCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CountrySubentityCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Region">
												<cbc:Region>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Region>
											</xsl:for-each>
											<xsl:for-each select="cbc:District">
												<cbc:District>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:District>
											</xsl:for-each>
											<xsl:for-each select="cbc:TimezoneOffset">
												<cbc:TimezoneOffset>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:TimezoneOffset>
											</xsl:for-each>
											<xsl:for-each select="cac:AddressLine">
												<cac:AddressLine>
													<cbc:Line>
														<xsl:sequence select="fn:string(cbc:Line)"/>
													</cbc:Line>
												</cac:AddressLine>
											</xsl:for-each>
											<xsl:for-each select="cac:Country">
												<cac:Country>
													<xsl:for-each select="cbc:IdentificationCode">
														<cbc:IdentificationCode>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:IdentificationCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:Name">
														<cbc:Name>
															<xsl:sequence select="fn:string(.)"/>
														</cbc:Name>
													</xsl:for-each>
												</cac:Country>
											</xsl:for-each>
											<xsl:for-each select="cac:LocationCoordinate">
												<cac:LocationCoordinate>
													<xsl:sequence select="()"/>
												</cac:LocationCoordinate>
											</xsl:for-each>
										</cac:RegistrationAddress>
									</xsl:for-each>
									<xsl:for-each select="cac:CorporateRegistrationScheme">
										<cac:CorporateRegistrationScheme>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:CorporateRegistrationScheme>
									</xsl:for-each>
									<xsl:for-each select="cac:HeadOfficeParty">
										<cac:HeadOfficeParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:HeadOfficeParty>
									</xsl:for-each>
									<xsl:for-each select="cac:ShareholderParty">
										<cac:ShareholderParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ShareholderParty>
									</xsl:for-each>
								</cac:PartyLegalEntity>
							</xsl:for-each>
							<xsl:for-each select="cac:Contact">
								<xsl:variable name="var51_Name" as="node()?" select="cbc:Name"/>
								<xsl:variable name="var52_ElectronicMail" as="node()?" select="cbc:ElectronicMail"/>
								<xsl:variable name="var53_Telefax" as="node()?" select="cbc:Telefax"/>
								<xsl:variable name="var54_ID" as="node()?" select="cbc:ID"/>
								<xsl:variable name="var55_Telephone" as="node()?" select="cbc:Telephone"/>
								<xsl:variable name="var49_test_resultof_exists" as="xs:string?">
									<xsl:choose>
										<xsl:when test="fn:exists($var54_ID)">
											<xsl:for-each select="$var54_ID">
												<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var50_resultof_filter" as="xs:string?" select="($var49_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]"/>
								<cac:Contact>
									<xsl:for-each select="$var50_resultof_filter">
										<xsl:for-each select="$var54_ID">
											<cbc:ID>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:ID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var44_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var51_Name)">
												<xsl:for-each select="$var51_Name">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="$var44_test_resultof_exists">
										<xsl:variable name="var45_test_resultof_greater" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
													<xsl:for-each select="$var51_Name">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="$var50_resultof_filter">
														<xsl:for-each select="$var54_ID">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var45_test_resultof_greater">
											<cbc:Name>
												<xsl:sequence select="."/>
											</cbc:Name>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var46_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var55_Telephone)">
												<xsl:for-each select="$var55_Telephone">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var46_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var55_Telephone">
											<cbc:Telephone>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Telephone>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var47_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var53_Telefax)">
												<xsl:for-each select="$var53_Telefax">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var47_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var53_Telefax">
											<cbc:Telefax>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Telefax>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var48_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var52_ElectronicMail)">
												<xsl:for-each select="$var52_ElectronicMail">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var48_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var52_ElectronicMail">
											<cbc:ElectronicMail>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:ElectronicMail>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:Note">
										<cbc:Note>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Note>
									</xsl:for-each>
									<xsl:for-each select="cac:OtherCommunication">
										<cac:OtherCommunication>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:OtherCommunication>
									</xsl:for-each>
								</cac:Contact>
							</xsl:for-each>
						</cac:Party>
					</xsl:for-each>
				</cac:AccountingSupplierParty>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<xsl:variable name="var103_AccountingCustomerParty" as="node()" select="cac:AccountingCustomerParty"/>
				<cac:AccountingCustomerParty>
					<xsl:for-each select="$var103_AccountingCustomerParty/cbc:CustomerAssignedAccountID">
						<cbc:CustomerAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:CustomerAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var103_AccountingCustomerParty/cbc:SupplierAssignedAccountID">
						<cbc:SupplierAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:SupplierAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var103_AccountingCustomerParty/cbc:AdditionalAccountID">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<xsl:for-each select="$var103_AccountingCustomerParty/cac:Party">
						<xsl:variable name="var99_EndpointID" as="node()?" select="cbc:EndpointID"/>
						<xsl:variable name="var100_PartyName" as="node()*" select="cac:PartyName"/>
						<xsl:variable name="var101_PostalAddress" as="node()?" select="cac:PostalAddress"/>
						<xsl:variable name="var102_PartyLegalEntity" as="node()*" select="cac:PartyLegalEntity"/>
						<cac:Party>
							<xsl:for-each select="cbc:MarkCareIndicator">
								<cbc:MarkCareIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkCareIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttentionIndicator">
								<cbc:MarkAttentionIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkAttentionIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:WebsiteURI">
								<cbc:WebsiteURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:WebsiteURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:LogoReferenceID">
								<cbc:LogoReferenceID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LogoReferenceID>
							</xsl:for-each>
							<xsl:variable name="var60_test_resultof_exists" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists($var99_EndpointID)">
										<xsl:for-each select="$var99_EndpointID">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var62_resultof_filter" as="xs:string?">
								<xsl:for-each select="$var60_test_resultof_exists">
									<xsl:variable name="var61_test_resultof_greater" as="xs:string*">
										<xsl:choose>
											<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
												<xsl:for-each select="$var99_EndpointID">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:for-each select="$var102_PartyLegalEntity/cbc:CompanyID">
													<xsl:sequence select="fn:replace(fn:string(.), '[^0-9]', '')"/>
												</xsl:for-each>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:if test="fn:exists($var61_test_resultof_greater)">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var62_resultof_filter">
								<cbc:EndpointID>
									<xsl:for-each select="$var99_EndpointID/@schemeID">
										<xsl:attribute name="schemeID" namespace="">
											<xsl:choose>
												<xsl:when test="(fn:substring(fn:string(.), xs:double(xs:decimal('1')), xs:double(xs:decimal('3'))) = 'SE:')">
													<xsl:sequence select="'0007'"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="'0192'"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
									</xsl:for-each>
									<xsl:for-each select="$var99_EndpointID/@schemeName">
										<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var99_EndpointID/@schemeAgencyID">
										<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var99_EndpointID/@schemeAgencyName">
										<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var99_EndpointID/@schemeVersionID">
										<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="$var99_EndpointID/@schemeDataURI">
										<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:for-each select="$var99_EndpointID/@schemeURI">
										<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:variable name="var63_test_resultof_greater" as="xs:string*">
										<xsl:choose>
											<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
												<xsl:for-each select="$var99_EndpointID">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:for-each select="$var102_PartyLegalEntity/cbc:CompanyID">
													<xsl:sequence select="fn:replace(fn:string(.), '[^0-9]', '')"/>
												</xsl:for-each>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:sequence select="xs:string(fn:string-join(for $x in $var63_test_resultof_greater return xs:string($x), ' '))"/>
								</cbc:EndpointID>
							</xsl:for-each>
							<xsl:for-each select="cbc:IndustryClassificationCode">
								<cbc:IndustryClassificationCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:IndustryClassificationCode>
							</xsl:for-each>
							<xsl:for-each select="(./cac:PartyIdentification)[(fn:position() &lt;= xs:integer('1'))]">
								<xsl:variable name="var66_ID" as="node()" select="cbc:ID"/>
								<xsl:variable name="var65_cur_as_string" as="xs:string" select="fn:string($var66_ID)"/>
								<cac:PartyIdentification>
									<xsl:if test="(fn:string-length(fn:normalize-space($var65_cur_as_string)) &gt; xs:decimal('0'))">
										<cbc:ID>
											<xsl:for-each select="$var66_ID/@schemeID">
												<xsl:variable name="var64_resultof_vmf__inputtoresult" as="xs:string?">
													<xsl:call-template name="vmf:vmf2_inputtoresult">
														<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:for-each select="$var64_resultof_vmf__inputtoresult">
													<xsl:attribute name="schemeID" namespace="" select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="$var66_ID/@schemeName">
												<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var66_ID/@schemeAgencyID">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var66_ID/@schemeAgencyName">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var66_ID/@schemeVersionID">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var66_ID/@schemeDataURI">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="$var66_ID/@schemeURI">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="$var65_cur_as_string"/>
										</cbc:ID>
									</xsl:if>
								</cac:PartyIdentification>
							</xsl:for-each>
							<xsl:for-each select="$var100_PartyName">
								<cac:PartyName>
									<cbc:Name>
										<xsl:sequence select="fn:string(cbc:Name)"/>
									</cbc:Name>
								</cac:PartyName>
							</xsl:for-each>
							<xsl:for-each select="cac:Language">
								<cac:Language>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Language>
							</xsl:for-each>
							<xsl:for-each select="$var101_PostalAddress">
								<xsl:variable name="var71_StreetName" as="node()?" select="cbc:StreetName"/>
								<xsl:variable name="var72_PostalZone" as="node()?" select="cbc:PostalZone"/>
								<xsl:variable name="var73_CityName" as="node()?" select="cbc:CityName"/>
								<xsl:variable name="var74_AdditionalStreetName" as="node()?" select="cbc:AdditionalStreetName"/>
								<cac:PostalAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:variable name="var67_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var71_StreetName)">
												<xsl:for-each select="$var71_StreetName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var67_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var71_StreetName">
											<cbc:StreetName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:StreetName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var68_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var74_AdditionalStreetName)">
												<xsl:for-each select="$var74_AdditionalStreetName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var68_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var74_AdditionalStreetName">
											<cbc:AdditionalStreetName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:AdditionalStreetName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:variable name="var69_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var73_CityName)">
												<xsl:for-each select="$var73_CityName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var69_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var73_CityName">
											<cbc:CityName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CityName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var70_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var72_PostalZone)">
												<xsl:for-each select="$var72_PostalZone">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var70_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var72_PostalZone">
											<cbc:PostalZone>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:PostalZone>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:for-each select="@listID">
														<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:PostalAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:PhysicalLocation">
								<cac:PhysicalLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PhysicalLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyTaxScheme">
								<cac:PartyTaxScheme>
									<xsl:for-each select="cbc:RegistrationName">
										<cbc:RegistrationName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:RegistrationName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyID">
										<xsl:variable name="var79_cur" as="node()" select="."/>
										<xsl:variable name="var78_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:variable name="var77_test_resultof_equal" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:upper-case($var78_cur_as_string) = 'FORETAKSREGISTERET')">
													<xsl:sequence select="$var78_cur_as_string"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="$var101_PostalAddress/cac:Country/cbc:IdentificationCode">
														<xsl:variable name="var76_cur_as_string" as="xs:string" select="fn:string(.)"/>
														<xsl:variable name="var75_test_resultof_equal" as="xs:string">
															<xsl:choose>
																<xsl:when test="(fn:lower-case($var76_cur_as_string) = 'no')">
																	<xsl:sequence select="'MVA'"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:sequence select="''"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:sequence select="fn:concat(fn:concat($var76_cur_as_string, fn:replace($var78_cur_as_string, '[^0-9]', '')), $var75_test_resultof_equal)"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var77_test_resultof_equal">
											<cbc:CompanyID>
												<xsl:for-each select="$var79_cur/@schemeName">
													<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var79_cur/@schemeAgencyID">
													<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var79_cur/@schemeAgencyName">
													<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var79_cur/@schemeVersionID">
													<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var79_cur/@schemeDataURI">
													<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var79_cur/@schemeURI">
													<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:sequence select="."/>
											</cbc:CompanyID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:TaxLevelCode">
										<cbc:TaxLevelCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TaxLevelCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:ExemptionReasonCode">
										<cbc:ExemptionReasonCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ExemptionReasonCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:ExemptionReason">
										<cbc:ExemptionReason>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ExemptionReason>
									</xsl:for-each>
									<xsl:for-each select="cac:RegistrationAddress">
										<cac:RegistrationAddress>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:RegistrationAddress>
									</xsl:for-each>
									<xsl:variable name="var80_TaxScheme" as="node()" select="cac:TaxScheme"/>
									<cac:TaxScheme>
										<xsl:for-each select="$var80_TaxScheme/cbc:ID">
											<cbc:ID>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:ID>
										</xsl:for-each>
										<xsl:for-each select="$var80_TaxScheme/cbc:Name">
											<cbc:Name>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Name>
										</xsl:for-each>
										<xsl:for-each select="$var80_TaxScheme/cbc:TaxTypeCode">
											<cbc:TaxTypeCode>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:TaxTypeCode>
										</xsl:for-each>
										<xsl:for-each select="$var80_TaxScheme/cbc:CurrencyCode">
											<cbc:CurrencyCode>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CurrencyCode>
										</xsl:for-each>
										<xsl:for-each select="$var80_TaxScheme/cac:JurisdictionRegionAddress">
											<cac:JurisdictionRegionAddress>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:JurisdictionRegionAddress>
										</xsl:for-each>
									</cac:TaxScheme>
								</cac:PartyTaxScheme>
							</xsl:for-each>
							<xsl:if test="(fn:count($var102_PartyLegalEntity) &lt; xs:decimal('1'))">
								<cac:PartyLegalEntity>
									<xsl:for-each select="$var100_PartyName">
										<cbc:RegistrationName>
											<xsl:sequence select="fn:string(cbc:Name)"/>
										</cbc:RegistrationName>
									</xsl:for-each>
								</cac:PartyLegalEntity>
							</xsl:if>
							<xsl:for-each select="$var102_PartyLegalEntity">
								<xsl:variable name="var83_CompanyID" as="node()?" select="cbc:CompanyID"/>
								<cac:PartyLegalEntity>
									<xsl:for-each select="cbc:RegistrationName">
										<cbc:RegistrationName>
											<xsl:for-each select="@languageID">
												<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@languageLocaleID">
												<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:RegistrationName>
									</xsl:for-each>
									<xsl:variable name="var81_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var83_CompanyID)">
												<xsl:for-each select="$var83_CompanyID">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var81_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var83_CompanyID">
											<cbc:CompanyID>
												<xsl:for-each select="$var83_CompanyID/@schemeID">
													<xsl:variable name="var82_resultof_vmf__inputtoresult" as="xs:string?">
														<xsl:call-template name="vmf:vmf3_inputtoresult">
															<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:for-each select="$var82_resultof_vmf__inputtoresult">
														<xsl:attribute name="schemeID" namespace="" select="."/>
													</xsl:for-each>
												</xsl:for-each>
												<xsl:for-each select="$var83_CompanyID/@schemeName">
													<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var83_CompanyID/@schemeAgencyID">
													<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var83_CompanyID/@schemeAgencyName">
													<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var83_CompanyID/@schemeVersionID">
													<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var83_CompanyID/@schemeDataURI">
													<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var83_CompanyID/@schemeURI">
													<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CompanyID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationDate">
										<cbc:RegistrationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:RegistrationExpirationDate">
										<cbc:RegistrationExpirationDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:RegistrationExpirationDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalFormCode">
										<cbc:CompanyLegalFormCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalFormCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLegalForm">
										<cbc:CompanyLegalForm>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLegalForm>
									</xsl:for-each>
									<xsl:for-each select="cbc:SoleProprietorshipIndicator">
										<cbc:SoleProprietorshipIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:SoleProprietorshipIndicator>
									</xsl:for-each>
									<xsl:for-each select="cbc:CompanyLiquidationStatusCode">
										<cbc:CompanyLiquidationStatusCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CompanyLiquidationStatusCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CorporateStockAmount">
										<cbc:CorporateStockAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CorporateStockAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:FullyPaidSharesIndicator">
										<cbc:FullyPaidSharesIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:FullyPaidSharesIndicator>
									</xsl:for-each>
									<xsl:for-each select="cac:RegistrationAddress">
										<cac:RegistrationAddress>
											<xsl:for-each select="cbc:ID">
												<cbc:ID>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:ID>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressTypeCode">
												<cbc:AddressTypeCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:AddressTypeCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressFormatCode">
												<cbc:AddressFormatCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:AddressFormatCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Postbox">
												<cbc:Postbox>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Postbox>
											</xsl:for-each>
											<xsl:for-each select="cbc:Floor">
												<cbc:Floor>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Floor>
											</xsl:for-each>
											<xsl:for-each select="cbc:Room">
												<cbc:Room>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Room>
											</xsl:for-each>
											<xsl:for-each select="cbc:StreetName">
												<cbc:StreetName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:StreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:AdditionalStreetName">
												<cbc:AdditionalStreetName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:AdditionalStreetName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BlockName">
												<cbc:BlockName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:BlockName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingName">
												<cbc:BuildingName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:BuildingName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingNumber">
												<cbc:BuildingNumber>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:BuildingNumber>
											</xsl:for-each>
											<xsl:for-each select="cbc:InhouseMail">
												<cbc:InhouseMail>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:InhouseMail>
											</xsl:for-each>
											<xsl:for-each select="cbc:Department">
												<cbc:Department>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Department>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkAttention">
												<cbc:MarkAttention>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:MarkAttention>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkCare">
												<cbc:MarkCare>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:MarkCare>
											</xsl:for-each>
											<xsl:for-each select="cbc:PlotIdentification">
												<cbc:PlotIdentification>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:PlotIdentification>
											</xsl:for-each>
											<xsl:for-each select="cbc:CitySubdivisionName">
												<cbc:CitySubdivisionName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CitySubdivisionName>
											</xsl:for-each>
											<xsl:for-each select="cbc:CityName">
												<cbc:CityName>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CityName>
											</xsl:for-each>
											<xsl:for-each select="cbc:PostalZone">
												<cbc:PostalZone>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:PostalZone>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentity">
												<cbc:CountrySubentity>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CountrySubentity>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentityCode">
												<cbc:CountrySubentityCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:CountrySubentityCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Region">
												<cbc:Region>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Region>
											</xsl:for-each>
											<xsl:for-each select="cbc:District">
												<cbc:District>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:District>
											</xsl:for-each>
											<xsl:for-each select="cbc:TimezoneOffset">
												<cbc:TimezoneOffset>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:TimezoneOffset>
											</xsl:for-each>
											<xsl:for-each select="cac:AddressLine">
												<cac:AddressLine>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:AddressLine>
											</xsl:for-each>
											<xsl:for-each select="cac:Country">
												<cac:Country>
													<xsl:for-each select="cbc:IdentificationCode">
														<cbc:IdentificationCode>
															<xsl:sequence select="fn:string(.)"/>
														</cbc:IdentificationCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:Name">
														<cbc:Name>
															<xsl:sequence select="fn:string(.)"/>
														</cbc:Name>
													</xsl:for-each>
												</cac:Country>
											</xsl:for-each>
											<xsl:for-each select="cac:LocationCoordinate">
												<cac:LocationCoordinate>
													<xsl:for-each select="cbc:CoordinateSystemCode">
														<cbc:CoordinateSystemCode>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:CoordinateSystemCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:LatitudeDegreesMeasure">
														<cbc:LatitudeDegreesMeasure>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:LatitudeDegreesMeasure>
													</xsl:for-each>
													<xsl:for-each select="cbc:LatitudeMinutesMeasure">
														<cbc:LatitudeMinutesMeasure>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:LatitudeMinutesMeasure>
													</xsl:for-each>
													<xsl:for-each select="cbc:LatitudeDirectionCode">
														<cbc:LatitudeDirectionCode>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:LatitudeDirectionCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:LongitudeDegreesMeasure">
														<cbc:LongitudeDegreesMeasure>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:LongitudeDegreesMeasure>
													</xsl:for-each>
													<xsl:for-each select="cbc:LongitudeMinutesMeasure">
														<cbc:LongitudeMinutesMeasure>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:LongitudeMinutesMeasure>
													</xsl:for-each>
													<xsl:for-each select="cbc:LongitudeDirectionCode">
														<cbc:LongitudeDirectionCode>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:LongitudeDirectionCode>
													</xsl:for-each>
													<xsl:for-each select="cbc:AltitudeMeasure">
														<cbc:AltitudeMeasure>
															<xsl:sequence select="(./@node(), ./node())"/>
														</cbc:AltitudeMeasure>
													</xsl:for-each>
												</cac:LocationCoordinate>
											</xsl:for-each>
										</cac:RegistrationAddress>
									</xsl:for-each>
									<xsl:for-each select="cac:CorporateRegistrationScheme">
										<cac:CorporateRegistrationScheme>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:CorporateRegistrationScheme>
									</xsl:for-each>
									<xsl:for-each select="cac:HeadOfficeParty">
										<cac:HeadOfficeParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:HeadOfficeParty>
									</xsl:for-each>
									<xsl:for-each select="cac:ShareholderParty">
										<cac:ShareholderParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ShareholderParty>
									</xsl:for-each>
								</cac:PartyLegalEntity>
							</xsl:for-each>
							<xsl:for-each select="cac:Contact">
								<xsl:variable name="var96_cur" as="node()" select="."/>
								<xsl:variable name="var92_Name" as="node()?" select="cbc:Name"/>
								<xsl:variable name="var93_ElectronicMail" as="node()?" select="cbc:ElectronicMail"/>
								<xsl:variable name="var94_Telefax" as="node()?" select="cbc:Telefax"/>
								<xsl:variable name="var95_Telephone" as="node()?" select="cbc:Telephone"/>
								<cac:Contact>
									<xsl:variable name="var84_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var92_Name)">
												<xsl:for-each select="$var92_Name">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="$var84_test_resultof_exists">
										<xsl:variable name="var87_test_resultof_greater" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
													<xsl:for-each select="$var92_Name">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:variable name="var86_ID" as="node()?" select="$var96_cur/cbc:ID"/>
													<xsl:variable name="var85_test_resultof_exists" as="xs:string?">
														<xsl:choose>
															<xsl:when test="fn:exists($var86_ID)">
																<xsl:for-each select="$var86_ID">
																	<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="''"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:for-each select="($var85_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
														<xsl:for-each select="$var86_ID">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var87_test_resultof_greater">
											<cbc:Name>
												<xsl:sequence select="."/>
											</cbc:Name>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var88_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var95_Telephone)">
												<xsl:for-each select="$var95_Telephone">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var88_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var95_Telephone">
											<cbc:Telephone>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Telephone>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var89_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var94_Telefax)">
												<xsl:for-each select="$var94_Telefax">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var89_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var94_Telefax">
											<cbc:Telefax>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Telefax>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var90_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var93_ElectronicMail)">
												<xsl:for-each select="$var93_ElectronicMail">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="$var90_test_resultof_exists">
										<xsl:variable name="var91_test_resultof_greater" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
													<xsl:for-each select="$var93_ElectronicMail">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="($var99_EndpointID)[fn:contains(fn:string(.), '@')]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var91_test_resultof_greater">
											<cbc:ElectronicMail>
												<xsl:sequence select="."/>
											</cbc:ElectronicMail>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:Note">
										<cbc:Note>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Note>
									</xsl:for-each>
									<xsl:for-each select="cac:OtherCommunication">
										<cac:OtherCommunication>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:OtherCommunication>
									</xsl:for-each>
								</cac:Contact>
							</xsl:for-each>
							<xsl:for-each select="cac:Person">
								<cac:Person>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:FirstName">
										<cbc:FirstName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:FirstName>
									</xsl:for-each>
									<xsl:for-each select="cbc:FamilyName">
										<cbc:FamilyName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:FamilyName>
									</xsl:for-each>
									<xsl:for-each select="cbc:Title">
										<cbc:Title>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Title>
									</xsl:for-each>
									<xsl:for-each select="cbc:MiddleName">
										<cbc:MiddleName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MiddleName>
									</xsl:for-each>
									<xsl:for-each select="cbc:OtherName">
										<cbc:OtherName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:OtherName>
									</xsl:for-each>
									<xsl:for-each select="cbc:NameSuffix">
										<cbc:NameSuffix>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:NameSuffix>
									</xsl:for-each>
									<xsl:for-each select="cbc:JobTitle">
										<cbc:JobTitle>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:JobTitle>
									</xsl:for-each>
									<xsl:for-each select="cbc:NationalityID">
										<cbc:NationalityID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:NationalityID>
									</xsl:for-each>
									<xsl:for-each select="cbc:GenderCode">
										<cbc:GenderCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:GenderCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:BirthDate">
										<cbc:BirthDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:BirthDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:BirthplaceName">
										<cbc:BirthplaceName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BirthplaceName>
									</xsl:for-each>
									<xsl:for-each select="cbc:OrganizationDepartment">
										<cbc:OrganizationDepartment>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:OrganizationDepartment>
									</xsl:for-each>
									<xsl:for-each select="cac:Contact">
										<cac:Contact>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:Contact>
									</xsl:for-each>
									<xsl:for-each select="cac:FinancialAccount">
										<cac:FinancialAccount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:FinancialAccount>
									</xsl:for-each>
									<xsl:for-each select="cac:IdentityDocumentReference">
										<cac:IdentityDocumentReference>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:IdentityDocumentReference>
									</xsl:for-each>
									<xsl:for-each select="cac:ResidenceAddress">
										<cac:ResidenceAddress>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ResidenceAddress>
									</xsl:for-each>
								</cac:Person>
							</xsl:for-each>
							<xsl:for-each select="cac:AgentParty">
								<cac:AgentParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AgentParty>
							</xsl:for-each>
							<xsl:for-each select="cac:ServiceProviderParty">
								<cac:ServiceProviderParty>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:ServiceTypeCode">
										<cbc:ServiceTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ServiceTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:ServiceType">
										<cbc:ServiceType>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ServiceType>
									</xsl:for-each>
									<xsl:variable name="var97_Party" as="node()" select="cac:Party"/>
									<cac:Party>
										<xsl:sequence select="($var97_Party/@node(), $var97_Party/node())"/>
									</cac:Party>
									<xsl:for-each select="cac:SellerContact">
										<cac:SellerContact>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:SellerContact>
									</xsl:for-each>
								</cac:ServiceProviderParty>
							</xsl:for-each>
							<xsl:for-each select="cac:PowerOfAttorney">
								<cac:PowerOfAttorney>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:IssueDate">
										<cbc:IssueDate>
											<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
										</cbc:IssueDate>
									</xsl:for-each>
									<xsl:for-each select="cbc:IssueTime">
										<cbc:IssueTime>
											<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
										</cbc:IssueTime>
									</xsl:for-each>
									<xsl:for-each select="cbc:Description">
										<cbc:Description>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Description>
									</xsl:for-each>
									<xsl:for-each select="cac:NotaryParty">
										<cac:NotaryParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:NotaryParty>
									</xsl:for-each>
									<xsl:variable name="var98_AgentParty" as="node()" select="cac:AgentParty"/>
									<cac:AgentParty>
										<xsl:sequence select="($var98_AgentParty/@node(), $var98_AgentParty/node())"/>
									</cac:AgentParty>
									<xsl:for-each select="cac:WitnessParty">
										<cac:WitnessParty>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:WitnessParty>
									</xsl:for-each>
									<xsl:for-each select="cac:MandateDocumentReference">
										<cac:MandateDocumentReference>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:MandateDocumentReference>
									</xsl:for-each>
								</cac:PowerOfAttorney>
							</xsl:for-each>
							<xsl:for-each select="cac:FinancialAccount">
								<cac:FinancialAccount>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="cbc:AliasName">
										<cbc:AliasName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AliasName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AccountTypeCode">
										<cbc:AccountTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AccountTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AccountFormatCode">
										<cbc:AccountFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AccountFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:CurrencyCode">
										<cbc:CurrencyCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CurrencyCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:PaymentNote">
										<cbc:PaymentNote>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PaymentNote>
									</xsl:for-each>
									<xsl:for-each select="cac:FinancialInstitutionBranch">
										<cac:FinancialInstitutionBranch>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:FinancialInstitutionBranch>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:Country>
									</xsl:for-each>
								</cac:FinancialAccount>
							</xsl:for-each>
						</cac:Party>
					</xsl:for-each>
					<xsl:for-each select="$var103_AccountingCustomerParty/cac:DeliveryContact">
						<cac:DeliveryContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:DeliveryContact>
					</xsl:for-each>
					<xsl:for-each select="$var103_AccountingCustomerParty/cac:AccountingContact">
						<cac:AccountingContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:AccountingContact>
					</xsl:for-each>
					<xsl:for-each select="$var103_AccountingCustomerParty/cac:BuyerContact">
						<cac:BuyerContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:BuyerContact>
					</xsl:for-each>
				</cac:AccountingCustomerParty>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<xsl:variable name="var115_cur" as="node()" select="."/>
				<xsl:variable name="var106_resultof_filter" as="node()?">
					<xsl:for-each select="cac:PayeeParty">
						<xsl:variable name="var105_map_of_PartyLegalEntity" as="xs:boolean*">
							<xsl:for-each select="cac:PartyLegalEntity/cbc:CompanyID">
								<xsl:variable name="var104_cur" as="node()" select="."/>
								<xsl:for-each select="$var115_cur/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID">
									<xsl:sequence select="(fn:string($var104_cur) != fn:string(.))"/>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists(($var105_map_of_PartyLegalEntity)[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var106_resultof_filter">
					<cac:PayeeParty>
						<xsl:for-each select="cbc:MarkCareIndicator">
							<cbc:MarkCareIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:MarkCareIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:MarkAttentionIndicator">
							<cbc:MarkAttentionIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:MarkAttentionIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:WebsiteURI">
							<cbc:WebsiteURI>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:WebsiteURI>
						</xsl:for-each>
						<xsl:for-each select="cbc:LogoReferenceID">
							<cbc:LogoReferenceID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:LogoReferenceID>
						</xsl:for-each>
						<xsl:for-each select="cbc:EndpointID">
							<cbc:EndpointID>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:EndpointID>
						</xsl:for-each>
						<xsl:for-each select="cbc:IndustryClassificationCode">
							<cbc:IndustryClassificationCode>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:IndustryClassificationCode>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyIdentification">
							<xsl:variable name="var109_ID" as="node()" select="cbc:ID"/>
							<xsl:variable name="var108_cur_as_string" as="xs:string" select="fn:string($var109_ID)"/>
							<cac:PartyIdentification>
								<xsl:if test="(fn:string-length(fn:normalize-space($var108_cur_as_string)) &gt; xs:decimal('0'))">
									<cbc:ID>
										<xsl:for-each select="$var109_ID/@schemeID">
											<xsl:variable name="var107_resultof_vmf__inputtoresult" as="xs:string?">
												<xsl:call-template name="vmf:vmf4_inputtoresult">
													<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:for-each select="$var107_resultof_vmf__inputtoresult">
												<xsl:attribute name="schemeID" namespace="" select="."/>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="$var109_ID/@schemeName">
											<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var109_ID/@schemeAgencyID">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var109_ID/@schemeAgencyName">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var109_ID/@schemeVersionID">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var109_ID/@schemeDataURI">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:for-each select="$var109_ID/@schemeURI">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:sequence select="$var108_cur_as_string"/>
									</cbc:ID>
								</xsl:if>
							</cac:PartyIdentification>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyName">
							<cac:PartyName>
								<cbc:Name>
									<xsl:sequence select="fn:string(cbc:Name)"/>
								</cbc:Name>
							</cac:PartyName>
						</xsl:for-each>
						<xsl:for-each select="cac:Language">
							<cac:Language>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:Language>
						</xsl:for-each>
						<xsl:for-each select="cac:PostalAddress">
							<cac:PostalAddress>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:AddressTypeCode">
									<cbc:AddressTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AddressTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:AddressFormatCode">
									<cbc:AddressFormatCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AddressFormatCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:Postbox">
									<cbc:Postbox>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Postbox>
								</xsl:for-each>
								<xsl:for-each select="cbc:Floor">
									<cbc:Floor>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Floor>
								</xsl:for-each>
								<xsl:for-each select="cbc:Room">
									<cbc:Room>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Room>
								</xsl:for-each>
								<xsl:for-each select="cbc:StreetName">
									<cbc:StreetName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:StreetName>
								</xsl:for-each>
								<xsl:for-each select="cbc:AdditionalStreetName">
									<cbc:AdditionalStreetName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AdditionalStreetName>
								</xsl:for-each>
								<xsl:for-each select="cbc:BlockName">
									<cbc:BlockName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BlockName>
								</xsl:for-each>
								<xsl:for-each select="cbc:BuildingName">
									<cbc:BuildingName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BuildingName>
								</xsl:for-each>
								<xsl:for-each select="cbc:BuildingNumber">
									<cbc:BuildingNumber>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BuildingNumber>
								</xsl:for-each>
								<xsl:for-each select="cbc:InhouseMail">
									<cbc:InhouseMail>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:InhouseMail>
								</xsl:for-each>
								<xsl:for-each select="cbc:Department">
									<cbc:Department>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Department>
								</xsl:for-each>
								<xsl:for-each select="cbc:MarkAttention">
									<cbc:MarkAttention>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MarkAttention>
								</xsl:for-each>
								<xsl:for-each select="cbc:MarkCare">
									<cbc:MarkCare>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MarkCare>
								</xsl:for-each>
								<xsl:for-each select="cbc:PlotIdentification">
									<cbc:PlotIdentification>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PlotIdentification>
								</xsl:for-each>
								<xsl:for-each select="cbc:CitySubdivisionName">
									<cbc:CitySubdivisionName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CitySubdivisionName>
								</xsl:for-each>
								<xsl:for-each select="cbc:CityName">
									<cbc:CityName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CityName>
								</xsl:for-each>
								<xsl:for-each select="cbc:PostalZone">
									<cbc:PostalZone>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PostalZone>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentity">
									<cbc:CountrySubentity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentity>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentityCode">
									<cbc:CountrySubentityCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentityCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:Region">
									<cbc:Region>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Region>
								</xsl:for-each>
								<xsl:for-each select="cbc:District">
									<cbc:District>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:District>
								</xsl:for-each>
								<xsl:for-each select="cbc:TimezoneOffset">
									<cbc:TimezoneOffset>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TimezoneOffset>
								</xsl:for-each>
								<xsl:for-each select="cac:AddressLine">
									<cac:AddressLine>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:AddressLine>
								</xsl:for-each>
								<xsl:for-each select="cac:Country">
									<cac:Country>
										<xsl:for-each select="cbc:IdentificationCode">
											<cbc:IdentificationCode>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:IdentificationCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:Name">
											<cbc:Name>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Name>
										</xsl:for-each>
									</cac:Country>
								</xsl:for-each>
								<xsl:for-each select="cac:LocationCoordinate">
									<cac:LocationCoordinate>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:LocationCoordinate>
								</xsl:for-each>
							</cac:PostalAddress>
						</xsl:for-each>
						<xsl:for-each select="cac:PhysicalLocation">
							<cac:PhysicalLocation>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:Description">
									<cbc:Description>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Description>
								</xsl:for-each>
								<xsl:for-each select="cbc:Conditions">
									<cbc:Conditions>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Conditions>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentity">
									<cbc:CountrySubentity>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentity>
								</xsl:for-each>
								<xsl:for-each select="cbc:CountrySubentityCode">
									<cbc:CountrySubentityCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CountrySubentityCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:LocationTypeCode">
									<cbc:LocationTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:LocationTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:InformationURI">
									<cbc:InformationURI>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:InformationURI>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="cac:ValidityPeriod">
									<cac:ValidityPeriod>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:ValidityPeriod>
								</xsl:for-each>
								<xsl:for-each select="cac:Address">
									<cac:Address>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:Address>
								</xsl:for-each>
								<xsl:for-each select="cac:SubsidiaryLocation">
									<cac:SubsidiaryLocation>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:SubsidiaryLocation>
								</xsl:for-each>
								<xsl:for-each select="cac:LocationCoordinate">
									<cac:LocationCoordinate>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:LocationCoordinate>
								</xsl:for-each>
							</cac:PhysicalLocation>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyTaxScheme">
							<cac:PartyTaxScheme>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:PartyTaxScheme>
						</xsl:for-each>
						<xsl:for-each select="cac:PartyLegalEntity">
							<xsl:variable name="var112_CompanyID" as="node()?" select="cbc:CompanyID"/>
							<cac:PartyLegalEntity>
								<xsl:for-each select="cbc:RegistrationName">
									<cbc:RegistrationName>
										<xsl:for-each select="@languageID">
											<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@languageLocaleID">
											<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:RegistrationName>
								</xsl:for-each>
								<xsl:variable name="var110_test_resultof_exists" as="xs:string?">
									<xsl:choose>
										<xsl:when test="fn:exists($var112_CompanyID)">
											<xsl:for-each select="$var112_CompanyID">
												<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:for-each select="($var110_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
									<xsl:for-each select="$var112_CompanyID">
										<cbc:CompanyID>
											<xsl:for-each select="$var112_CompanyID/@schemeID">
												<xsl:variable name="var111_resultof_vmf__inputtoresult" as="xs:string?">
													<xsl:call-template name="vmf:vmf5_inputtoresult">
														<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:for-each select="$var111_resultof_vmf__inputtoresult">
													<xsl:attribute name="schemeID" namespace="" select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="$var112_CompanyID/@schemeName">
												<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var112_CompanyID/@schemeAgencyID">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var112_CompanyID/@schemeAgencyName">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var112_CompanyID/@schemeVersionID">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var112_CompanyID/@schemeDataURI">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="$var112_CompanyID/@schemeURI">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:CompanyID>
									</xsl:for-each>
								</xsl:for-each>
								<xsl:for-each select="cbc:RegistrationDate">
									<cbc:RegistrationDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
									</cbc:RegistrationDate>
								</xsl:for-each>
								<xsl:for-each select="cbc:RegistrationExpirationDate">
									<cbc:RegistrationExpirationDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
									</cbc:RegistrationExpirationDate>
								</xsl:for-each>
								<xsl:for-each select="cbc:CompanyLegalFormCode">
									<cbc:CompanyLegalFormCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CompanyLegalFormCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:CompanyLegalForm">
									<cbc:CompanyLegalForm>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CompanyLegalForm>
								</xsl:for-each>
								<xsl:for-each select="cbc:SoleProprietorshipIndicator">
									<cbc:SoleProprietorshipIndicator>
										<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
									</cbc:SoleProprietorshipIndicator>
								</xsl:for-each>
								<xsl:for-each select="cbc:CompanyLiquidationStatusCode">
									<cbc:CompanyLiquidationStatusCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CompanyLiquidationStatusCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:CorporateStockAmount">
									<cbc:CorporateStockAmount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CorporateStockAmount>
								</xsl:for-each>
								<xsl:for-each select="cbc:FullyPaidSharesIndicator">
									<cbc:FullyPaidSharesIndicator>
										<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
									</cbc:FullyPaidSharesIndicator>
								</xsl:for-each>
								<xsl:for-each select="cac:RegistrationAddress">
									<cac:RegistrationAddress>
										<xsl:for-each select="cbc:ID">
											<cbc:ID>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:ID>
										</xsl:for-each>
										<xsl:for-each select="cbc:AddressTypeCode">
											<cbc:AddressTypeCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:AddressTypeCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:AddressFormatCode">
											<cbc:AddressFormatCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:AddressFormatCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:Postbox">
											<cbc:Postbox>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Postbox>
										</xsl:for-each>
										<xsl:for-each select="cbc:Floor">
											<cbc:Floor>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Floor>
										</xsl:for-each>
										<xsl:for-each select="cbc:Room">
											<cbc:Room>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Room>
										</xsl:for-each>
										<xsl:for-each select="cbc:StreetName">
											<cbc:StreetName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:StreetName>
										</xsl:for-each>
										<xsl:for-each select="cbc:AdditionalStreetName">
											<cbc:AdditionalStreetName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:AdditionalStreetName>
										</xsl:for-each>
										<xsl:for-each select="cbc:BlockName">
											<cbc:BlockName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:BlockName>
										</xsl:for-each>
										<xsl:for-each select="cbc:BuildingName">
											<cbc:BuildingName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:BuildingName>
										</xsl:for-each>
										<xsl:for-each select="cbc:BuildingNumber">
											<cbc:BuildingNumber>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:BuildingNumber>
										</xsl:for-each>
										<xsl:for-each select="cbc:InhouseMail">
											<cbc:InhouseMail>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:InhouseMail>
										</xsl:for-each>
										<xsl:for-each select="cbc:Department">
											<cbc:Department>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Department>
										</xsl:for-each>
										<xsl:for-each select="cbc:MarkAttention">
											<cbc:MarkAttention>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:MarkAttention>
										</xsl:for-each>
										<xsl:for-each select="cbc:MarkCare">
											<cbc:MarkCare>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:MarkCare>
										</xsl:for-each>
										<xsl:for-each select="cbc:PlotIdentification">
											<cbc:PlotIdentification>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:PlotIdentification>
										</xsl:for-each>
										<xsl:for-each select="cbc:CitySubdivisionName">
											<cbc:CitySubdivisionName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CitySubdivisionName>
										</xsl:for-each>
										<xsl:for-each select="cbc:CityName">
											<cbc:CityName>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CityName>
										</xsl:for-each>
										<xsl:for-each select="cbc:PostalZone">
											<cbc:PostalZone>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:PostalZone>
										</xsl:for-each>
										<xsl:for-each select="cbc:CountrySubentity">
											<cbc:CountrySubentity>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CountrySubentity>
										</xsl:for-each>
										<xsl:for-each select="cbc:CountrySubentityCode">
											<cbc:CountrySubentityCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CountrySubentityCode>
										</xsl:for-each>
										<xsl:for-each select="cbc:Region">
											<cbc:Region>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Region>
										</xsl:for-each>
										<xsl:for-each select="cbc:District">
											<cbc:District>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:District>
										</xsl:for-each>
										<xsl:for-each select="cbc:TimezoneOffset">
											<cbc:TimezoneOffset>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:TimezoneOffset>
										</xsl:for-each>
										<xsl:for-each select="cac:AddressLine">
											<cac:AddressLine>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:AddressLine>
										</xsl:for-each>
										<xsl:for-each select="cac:Country">
											<cac:Country>
												<xsl:for-each select="cbc:IdentificationCode">
													<cbc:IdentificationCode>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:IdentificationCode>
												</xsl:for-each>
												<xsl:for-each select="cbc:Name">
													<cbc:Name>
														<xsl:sequence select="(./@node(), ./node())"/>
													</cbc:Name>
												</xsl:for-each>
											</cac:Country>
										</xsl:for-each>
										<xsl:for-each select="cac:LocationCoordinate">
											<cac:LocationCoordinate>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:LocationCoordinate>
										</xsl:for-each>
									</cac:RegistrationAddress>
								</xsl:for-each>
								<xsl:for-each select="cac:CorporateRegistrationScheme">
									<cac:CorporateRegistrationScheme>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:CorporateRegistrationScheme>
								</xsl:for-each>
								<xsl:for-each select="cac:HeadOfficeParty">
									<cac:HeadOfficeParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:HeadOfficeParty>
								</xsl:for-each>
								<xsl:for-each select="cac:ShareholderParty">
									<cac:ShareholderParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:ShareholderParty>
								</xsl:for-each>
							</cac:PartyLegalEntity>
						</xsl:for-each>
						<xsl:for-each select="cac:Contact">
							<cac:Contact>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="cbc:Telephone">
									<cbc:Telephone>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Telephone>
								</xsl:for-each>
								<xsl:for-each select="cbc:Telefax">
									<cbc:Telefax>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Telefax>
								</xsl:for-each>
								<xsl:for-each select="cbc:ElectronicMail">
									<cbc:ElectronicMail>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ElectronicMail>
								</xsl:for-each>
								<xsl:for-each select="cbc:Note">
									<cbc:Note>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Note>
								</xsl:for-each>
								<xsl:for-each select="cac:OtherCommunication">
									<cac:OtherCommunication>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:OtherCommunication>
								</xsl:for-each>
							</cac:Contact>
						</xsl:for-each>
						<xsl:for-each select="cac:Person">
							<cac:Person>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:FirstName">
									<cbc:FirstName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:FirstName>
								</xsl:for-each>
								<xsl:for-each select="cbc:FamilyName">
									<cbc:FamilyName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:FamilyName>
								</xsl:for-each>
								<xsl:for-each select="cbc:Title">
									<cbc:Title>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Title>
								</xsl:for-each>
								<xsl:for-each select="cbc:MiddleName">
									<cbc:MiddleName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:MiddleName>
								</xsl:for-each>
								<xsl:for-each select="cbc:OtherName">
									<cbc:OtherName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:OtherName>
								</xsl:for-each>
								<xsl:for-each select="cbc:NameSuffix">
									<cbc:NameSuffix>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:NameSuffix>
								</xsl:for-each>
								<xsl:for-each select="cbc:JobTitle">
									<cbc:JobTitle>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:JobTitle>
								</xsl:for-each>
								<xsl:for-each select="cbc:NationalityID">
									<cbc:NationalityID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:NationalityID>
								</xsl:for-each>
								<xsl:for-each select="cbc:GenderCode">
									<cbc:GenderCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:GenderCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:BirthDate">
									<cbc:BirthDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
									</cbc:BirthDate>
								</xsl:for-each>
								<xsl:for-each select="cbc:BirthplaceName">
									<cbc:BirthplaceName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BirthplaceName>
								</xsl:for-each>
								<xsl:for-each select="cbc:OrganizationDepartment">
									<cbc:OrganizationDepartment>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:OrganizationDepartment>
								</xsl:for-each>
								<xsl:for-each select="cac:Contact">
									<cac:Contact>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:Contact>
								</xsl:for-each>
								<xsl:for-each select="cac:FinancialAccount">
									<cac:FinancialAccount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:FinancialAccount>
								</xsl:for-each>
								<xsl:for-each select="cac:IdentityDocumentReference">
									<cac:IdentityDocumentReference>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:IdentityDocumentReference>
								</xsl:for-each>
								<xsl:for-each select="cac:ResidenceAddress">
									<cac:ResidenceAddress>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:ResidenceAddress>
								</xsl:for-each>
							</cac:Person>
						</xsl:for-each>
						<xsl:for-each select="cac:AgentParty">
							<cac:AgentParty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:AgentParty>
						</xsl:for-each>
						<xsl:for-each select="cac:ServiceProviderParty">
							<cac:ServiceProviderParty>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:ServiceTypeCode">
									<cbc:ServiceTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ServiceTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:ServiceType">
									<cbc:ServiceType>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ServiceType>
								</xsl:for-each>
								<xsl:variable name="var113_Party" as="node()" select="cac:Party"/>
								<cac:Party>
									<xsl:sequence select="($var113_Party/@node(), $var113_Party/node())"/>
								</cac:Party>
								<xsl:for-each select="cac:SellerContact">
									<cac:SellerContact>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:SellerContact>
								</xsl:for-each>
							</cac:ServiceProviderParty>
						</xsl:for-each>
						<xsl:for-each select="cac:PowerOfAttorney">
							<cac:PowerOfAttorney>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:IssueDate">
									<cbc:IssueDate>
										<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
									</cbc:IssueDate>
								</xsl:for-each>
								<xsl:for-each select="cbc:IssueTime">
									<cbc:IssueTime>
										<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
									</cbc:IssueTime>
								</xsl:for-each>
								<xsl:for-each select="cbc:Description">
									<cbc:Description>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Description>
								</xsl:for-each>
								<xsl:for-each select="cac:NotaryParty">
									<cac:NotaryParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:NotaryParty>
								</xsl:for-each>
								<xsl:variable name="var114_AgentParty" as="node()" select="cac:AgentParty"/>
								<cac:AgentParty>
									<xsl:sequence select="($var114_AgentParty/@node(), $var114_AgentParty/node())"/>
								</cac:AgentParty>
								<xsl:for-each select="cac:WitnessParty">
									<cac:WitnessParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:WitnessParty>
								</xsl:for-each>
								<xsl:for-each select="cac:MandateDocumentReference">
									<cac:MandateDocumentReference>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:MandateDocumentReference>
								</xsl:for-each>
							</cac:PowerOfAttorney>
						</xsl:for-each>
						<xsl:for-each select="cac:FinancialAccount">
							<cac:FinancialAccount>
								<xsl:for-each select="cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="cbc:AliasName">
									<cbc:AliasName>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AliasName>
								</xsl:for-each>
								<xsl:for-each select="cbc:AccountTypeCode">
									<cbc:AccountTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AccountTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:AccountFormatCode">
									<cbc:AccountFormatCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:AccountFormatCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:CurrencyCode">
									<cbc:CurrencyCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CurrencyCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:PaymentNote">
									<cbc:PaymentNote>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PaymentNote>
								</xsl:for-each>
								<xsl:for-each select="cac:FinancialInstitutionBranch">
									<cac:FinancialInstitutionBranch>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:FinancialInstitutionBranch>
								</xsl:for-each>
								<xsl:for-each select="cac:Country">
									<cac:Country>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:Country>
								</xsl:for-each>
							</cac:FinancialAccount>
						</xsl:for-each>
					</cac:PayeeParty>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:BuyerCustomerParty">
				<cac:BuyerCustomerParty>
					<xsl:for-each select="cbc:CustomerAssignedAccountID">
						<cbc:CustomerAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:CustomerAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="cbc:SupplierAssignedAccountID">
						<cbc:SupplierAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:SupplierAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="cbc:AdditionalAccountID">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<xsl:for-each select="cac:Party">
						<cac:Party>
							<xsl:for-each select="cbc:MarkCareIndicator">
								<cbc:MarkCareIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkCareIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttentionIndicator">
								<cbc:MarkAttentionIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkAttentionIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:WebsiteURI">
								<cbc:WebsiteURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:WebsiteURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:LogoReferenceID">
								<cbc:LogoReferenceID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LogoReferenceID>
							</xsl:for-each>
							<xsl:for-each select="cbc:EndpointID">
								<cbc:EndpointID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:EndpointID>
							</xsl:for-each>
							<xsl:for-each select="cbc:IndustryClassificationCode">
								<cbc:IndustryClassificationCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:IndustryClassificationCode>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyIdentification">
								<cac:PartyIdentification>
									<cbc:ID>
										<xsl:sequence select="fn:string(cbc:ID)"/>
									</cbc:ID>
								</cac:PartyIdentification>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyName">
								<cac:PartyName>
									<cbc:Name>
										<xsl:sequence select="fn:string(cbc:Name)"/>
									</cbc:Name>
								</cac:PartyName>
							</xsl:for-each>
							<xsl:for-each select="cac:Language">
								<cac:Language>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Language>
							</xsl:for-each>
							<xsl:for-each select="cac:PostalAddress">
								<cac:PostalAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:PostalAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:PhysicalLocation">
								<cac:PhysicalLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PhysicalLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyTaxScheme">
								<cac:PartyTaxScheme>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyTaxScheme>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyLegalEntity">
								<cac:PartyLegalEntity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyLegalEntity>
							</xsl:for-each>
							<xsl:for-each select="cac:Contact">
								<cac:Contact>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Contact>
							</xsl:for-each>
							<xsl:for-each select="cac:Person">
								<cac:Person>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Person>
							</xsl:for-each>
							<xsl:for-each select="cac:AgentParty">
								<cac:AgentParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AgentParty>
							</xsl:for-each>
							<xsl:for-each select="cac:ServiceProviderParty">
								<cac:ServiceProviderParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ServiceProviderParty>
							</xsl:for-each>
							<xsl:for-each select="cac:PowerOfAttorney">
								<cac:PowerOfAttorney>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PowerOfAttorney>
							</xsl:for-each>
							<xsl:for-each select="cac:FinancialAccount">
								<cac:FinancialAccount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:FinancialAccount>
							</xsl:for-each>
						</cac:Party>
					</xsl:for-each>
					<xsl:for-each select="cac:DeliveryContact">
						<cac:DeliveryContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:DeliveryContact>
					</xsl:for-each>
					<xsl:for-each select="cac:AccountingContact">
						<cac:AccountingContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:AccountingContact>
					</xsl:for-each>
					<xsl:for-each select="cac:BuyerContact">
						<cac:BuyerContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:BuyerContact>
					</xsl:for-each>
				</cac:BuyerCustomerParty>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:SellerSupplierParty">
				<cac:SellerSupplierParty>
					<xsl:for-each select="cbc:CustomerAssignedAccountID">
						<cbc:CustomerAssignedAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:CustomerAssignedAccountID>
					</xsl:for-each>
					<xsl:for-each select="cbc:AdditionalAccountID">
						<cbc:AdditionalAccountID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AdditionalAccountID>
					</xsl:for-each>
					<xsl:for-each select="cbc:DataSendingCapability">
						<cbc:DataSendingCapability>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:DataSendingCapability>
					</xsl:for-each>
					<xsl:for-each select="cac:Party">
						<cac:Party>
							<xsl:for-each select="cbc:MarkCareIndicator">
								<cbc:MarkCareIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkCareIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttentionIndicator">
								<cbc:MarkAttentionIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:MarkAttentionIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:WebsiteURI">
								<cbc:WebsiteURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:WebsiteURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:LogoReferenceID">
								<cbc:LogoReferenceID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LogoReferenceID>
							</xsl:for-each>
							<xsl:for-each select="cbc:EndpointID">
								<cbc:EndpointID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:EndpointID>
							</xsl:for-each>
							<xsl:for-each select="cbc:IndustryClassificationCode">
								<cbc:IndustryClassificationCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:IndustryClassificationCode>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyIdentification">
								<cac:PartyIdentification>
									<cbc:ID>
										<xsl:sequence select="fn:string(cbc:ID)"/>
									</cbc:ID>
								</cac:PartyIdentification>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyName">
								<cac:PartyName>
									<cbc:Name>
										<xsl:sequence select="fn:string(cbc:Name)"/>
									</cbc:Name>
								</cac:PartyName>
							</xsl:for-each>
							<xsl:for-each select="cac:Language">
								<cac:Language>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Language>
							</xsl:for-each>
							<xsl:for-each select="cac:PostalAddress">
								<cac:PostalAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:PostalAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:PhysicalLocation">
								<cac:PhysicalLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PhysicalLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyTaxScheme">
								<cac:PartyTaxScheme>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyTaxScheme>
							</xsl:for-each>
							<xsl:for-each select="cac:PartyLegalEntity">
								<cac:PartyLegalEntity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PartyLegalEntity>
							</xsl:for-each>
							<xsl:for-each select="cac:Contact">
								<cac:Contact>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Contact>
							</xsl:for-each>
							<xsl:for-each select="cac:Person">
								<cac:Person>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Person>
							</xsl:for-each>
							<xsl:for-each select="cac:AgentParty">
								<cac:AgentParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:AgentParty>
							</xsl:for-each>
							<xsl:for-each select="cac:ServiceProviderParty">
								<cac:ServiceProviderParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ServiceProviderParty>
							</xsl:for-each>
							<xsl:for-each select="cac:PowerOfAttorney">
								<cac:PowerOfAttorney>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PowerOfAttorney>
							</xsl:for-each>
							<xsl:for-each select="cac:FinancialAccount">
								<cac:FinancialAccount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:FinancialAccount>
							</xsl:for-each>
						</cac:Party>
					</xsl:for-each>
					<xsl:for-each select="cac:DespatchContact">
						<cac:DespatchContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:DespatchContact>
					</xsl:for-each>
					<xsl:for-each select="cac:AccountingContact">
						<cac:AccountingContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:AccountingContact>
					</xsl:for-each>
					<xsl:for-each select="cac:SellerContact">
						<cac:SellerContact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:SellerContact>
					</xsl:for-each>
				</cac:SellerSupplierParty>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:TaxRepresentativeParty">
				<xsl:variable name="var122_PostalAddress" as="node()?" select="cac:PostalAddress"/>
				<cac:TaxRepresentativeParty>
					<xsl:for-each select="cbc:MarkCareIndicator">
						<cbc:MarkCareIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:MarkCareIndicator>
					</xsl:for-each>
					<xsl:for-each select="cbc:MarkAttentionIndicator">
						<cbc:MarkAttentionIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:MarkAttentionIndicator>
					</xsl:for-each>
					<xsl:for-each select="cbc:WebsiteURI">
						<cbc:WebsiteURI>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:WebsiteURI>
					</xsl:for-each>
					<xsl:for-each select="cbc:LogoReferenceID">
						<cbc:LogoReferenceID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:LogoReferenceID>
					</xsl:for-each>
					<xsl:for-each select="cbc:EndpointID">
						<cbc:EndpointID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:EndpointID>
					</xsl:for-each>
					<xsl:for-each select="cbc:IndustryClassificationCode">
						<cbc:IndustryClassificationCode>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:IndustryClassificationCode>
					</xsl:for-each>
					<xsl:for-each select="cac:PartyIdentification">
						<cac:PartyIdentification>
							<cbc:ID>
								<xsl:sequence select="fn:string(cbc:ID)"/>
							</cbc:ID>
						</cac:PartyIdentification>
					</xsl:for-each>
					<xsl:for-each select="cac:PartyName">
						<cac:PartyName>
							<cbc:Name>
								<xsl:sequence select="fn:string(cbc:Name)"/>
							</cbc:Name>
						</cac:PartyName>
					</xsl:for-each>
					<xsl:for-each select="cac:Language">
						<cac:Language>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:Language>
					</xsl:for-each>
					<xsl:for-each select="$var122_PostalAddress">
						<cac:PostalAddress>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:AddressTypeCode">
								<cbc:AddressTypeCode>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:AddressTypeCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:AddressFormatCode">
								<cbc:AddressFormatCode>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:AddressFormatCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:Postbox">
								<cbc:Postbox>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Postbox>
							</xsl:for-each>
							<xsl:for-each select="cbc:Floor">
								<cbc:Floor>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Floor>
							</xsl:for-each>
							<xsl:for-each select="cbc:Room">
								<cbc:Room>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Room>
							</xsl:for-each>
							<xsl:for-each select="cbc:StreetName">
								<cbc:StreetName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:StreetName>
							</xsl:for-each>
							<xsl:for-each select="cbc:AdditionalStreetName">
								<cbc:AdditionalStreetName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:AdditionalStreetName>
							</xsl:for-each>
							<xsl:for-each select="cbc:BlockName">
								<cbc:BlockName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:BlockName>
							</xsl:for-each>
							<xsl:for-each select="cbc:BuildingName">
								<cbc:BuildingName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:BuildingName>
							</xsl:for-each>
							<xsl:for-each select="cbc:BuildingNumber">
								<cbc:BuildingNumber>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:BuildingNumber>
							</xsl:for-each>
							<xsl:for-each select="cbc:InhouseMail">
								<cbc:InhouseMail>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:InhouseMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Department">
								<cbc:Department>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Department>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkAttention">
								<cbc:MarkAttention>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:MarkAttention>
							</xsl:for-each>
							<xsl:for-each select="cbc:MarkCare">
								<cbc:MarkCare>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:MarkCare>
							</xsl:for-each>
							<xsl:for-each select="cbc:PlotIdentification">
								<cbc:PlotIdentification>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:PlotIdentification>
							</xsl:for-each>
							<xsl:for-each select="cbc:CitySubdivisionName">
								<cbc:CitySubdivisionName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CitySubdivisionName>
							</xsl:for-each>
							<xsl:for-each select="cbc:CityName">
								<cbc:CityName>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CityName>
							</xsl:for-each>
							<xsl:for-each select="cbc:PostalZone">
								<cbc:PostalZone>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:PostalZone>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentity">
								<cbc:CountrySubentity>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CountrySubentity>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentityCode">
								<cbc:CountrySubentityCode>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:CountrySubentityCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:Region">
								<cbc:Region>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:Region>
							</xsl:for-each>
							<xsl:for-each select="cbc:District">
								<cbc:District>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:District>
							</xsl:for-each>
							<xsl:for-each select="cbc:TimezoneOffset">
								<cbc:TimezoneOffset>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:TimezoneOffset>
							</xsl:for-each>
							<xsl:for-each select="cac:AddressLine">
								<cac:AddressLine>
									<cbc:Line>
										<xsl:sequence select="fn:string(cbc:Line)"/>
									</cbc:Line>
								</cac:AddressLine>
							</xsl:for-each>
							<xsl:for-each select="cac:Country">
								<cac:Country>
									<xsl:for-each select="cbc:IdentificationCode">
										<cbc:IdentificationCode>
											<xsl:for-each select="@listAgencyID">
												<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listAgencyName">
												<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listName">
												<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listVersionID">
												<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@name">
												<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@languageID">
												<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listURI">
												<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="@listSchemeURI">
												<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:IdentificationCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:Name>
									</xsl:for-each>
								</cac:Country>
							</xsl:for-each>
							<xsl:for-each select="cac:LocationCoordinate">
								<cac:LocationCoordinate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:LocationCoordinate>
							</xsl:for-each>
						</cac:PostalAddress>
					</xsl:for-each>
					<xsl:for-each select="cac:PhysicalLocation">
						<cac:PhysicalLocation>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Description">
								<cbc:Description>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Description>
							</xsl:for-each>
							<xsl:for-each select="cbc:Conditions">
								<cbc:Conditions>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Conditions>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentity">
								<cbc:CountrySubentity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CountrySubentity>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentityCode">
								<cbc:CountrySubentityCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CountrySubentityCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:LocationTypeCode">
								<cbc:LocationTypeCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LocationTypeCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:InformationURI">
								<cbc:InformationURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:InformationURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cac:ValidityPeriod">
								<cac:ValidityPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ValidityPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:Address">
								<cac:Address>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:Address>
							</xsl:for-each>
							<xsl:for-each select="cac:SubsidiaryLocation">
								<cac:SubsidiaryLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:SubsidiaryLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:LocationCoordinate">
								<cac:LocationCoordinate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:LocationCoordinate>
							</xsl:for-each>
						</cac:PhysicalLocation>
					</xsl:for-each>
					<xsl:for-each select="cac:PartyTaxScheme">
						<cac:PartyTaxScheme>
							<xsl:for-each select="cbc:RegistrationName">
								<cbc:RegistrationName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:RegistrationName>
							</xsl:for-each>
							<xsl:for-each select="cbc:CompanyID">
								<xsl:variable name="var120_cur" as="node()" select="."/>
								<xsl:variable name="var119_cur_as_string" as="xs:string" select="fn:string(.)"/>
								<xsl:variable name="var118_test_resultof_equal" as="xs:string?">
									<xsl:choose>
										<xsl:when test="(fn:upper-case($var119_cur_as_string) = 'FORETAKSREGISTERET')">
											<xsl:sequence select="$var119_cur_as_string"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:for-each select="$var122_PostalAddress/cac:Country/cbc:IdentificationCode">
												<xsl:variable name="var117_cur_as_string" as="xs:string" select="fn:string(.)"/>
												<xsl:variable name="var116_test_resultof_equal" as="xs:string">
													<xsl:choose>
														<xsl:when test="(fn:lower-case($var117_cur_as_string) = 'no')">
															<xsl:sequence select="'MVA'"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="''"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:sequence select="fn:concat(fn:concat($var117_cur_as_string, fn:replace($var119_cur_as_string, '[^0-9]', '')), $var116_test_resultof_equal)"/>
											</xsl:for-each>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:for-each select="$var118_test_resultof_equal">
									<cbc:CompanyID>
										<xsl:for-each select="$var120_cur/@schemeName">
											<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var120_cur/@schemeAgencyID">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var120_cur/@schemeAgencyName">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var120_cur/@schemeVersionID">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var120_cur/@schemeDataURI">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:for-each select="$var120_cur/@schemeURI">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:sequence select="."/>
									</cbc:CompanyID>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="cbc:TaxLevelCode">
								<cbc:TaxLevelCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:TaxLevelCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:ExemptionReasonCode">
								<cbc:ExemptionReasonCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ExemptionReasonCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:ExemptionReason">
								<cbc:ExemptionReason>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ExemptionReason>
							</xsl:for-each>
							<xsl:for-each select="cac:RegistrationAddress">
								<cac:RegistrationAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:RegistrationAddress>
							</xsl:for-each>
							<xsl:variable name="var121_TaxScheme" as="node()" select="cac:TaxScheme"/>
							<cac:TaxScheme>
								<xsl:for-each select="$var121_TaxScheme/cbc:ID">
									<cbc:ID>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="$var121_TaxScheme/cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="$var121_TaxScheme/cbc:TaxTypeCode">
									<cbc:TaxTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TaxTypeCode>
								</xsl:for-each>
								<xsl:for-each select="$var121_TaxScheme/cbc:CurrencyCode">
									<cbc:CurrencyCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CurrencyCode>
								</xsl:for-each>
								<xsl:for-each select="$var121_TaxScheme/cac:JurisdictionRegionAddress">
									<cac:JurisdictionRegionAddress>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:JurisdictionRegionAddress>
								</xsl:for-each>
							</cac:TaxScheme>
						</cac:PartyTaxScheme>
					</xsl:for-each>
					<xsl:for-each select="cac:PartyLegalEntity">
						<cac:PartyLegalEntity>
							<xsl:for-each select="cbc:RegistrationName">
								<cbc:RegistrationName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:RegistrationName>
							</xsl:for-each>
							<xsl:for-each select="cbc:CompanyID">
								<cbc:CompanyID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CompanyID>
							</xsl:for-each>
							<xsl:for-each select="cbc:RegistrationDate">
								<cbc:RegistrationDate>
									<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
								</cbc:RegistrationDate>
							</xsl:for-each>
							<xsl:for-each select="cbc:RegistrationExpirationDate">
								<cbc:RegistrationExpirationDate>
									<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
								</cbc:RegistrationExpirationDate>
							</xsl:for-each>
							<xsl:for-each select="cbc:CompanyLegalFormCode">
								<cbc:CompanyLegalFormCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CompanyLegalFormCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:CompanyLegalForm">
								<cbc:CompanyLegalForm>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CompanyLegalForm>
							</xsl:for-each>
							<xsl:for-each select="cbc:SoleProprietorshipIndicator">
								<cbc:SoleProprietorshipIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:SoleProprietorshipIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:CompanyLiquidationStatusCode">
								<cbc:CompanyLiquidationStatusCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CompanyLiquidationStatusCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:CorporateStockAmount">
								<cbc:CorporateStockAmount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CorporateStockAmount>
							</xsl:for-each>
							<xsl:for-each select="cbc:FullyPaidSharesIndicator">
								<cbc:FullyPaidSharesIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:FullyPaidSharesIndicator>
							</xsl:for-each>
							<xsl:for-each select="cac:RegistrationAddress">
								<cac:RegistrationAddress>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:RegistrationAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:CorporateRegistrationScheme">
								<cac:CorporateRegistrationScheme>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:CorporateRegistrationScheme>
							</xsl:for-each>
							<xsl:for-each select="cac:HeadOfficeParty">
								<cac:HeadOfficeParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:HeadOfficeParty>
							</xsl:for-each>
							<xsl:for-each select="cac:ShareholderParty">
								<cac:ShareholderParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ShareholderParty>
							</xsl:for-each>
						</cac:PartyLegalEntity>
					</xsl:for-each>
					<xsl:for-each select="cac:Contact">
						<cac:Contact>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telephone">
								<cbc:Telephone>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telephone>
							</xsl:for-each>
							<xsl:for-each select="cbc:Telefax">
								<cbc:Telefax>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Telefax>
							</xsl:for-each>
							<xsl:for-each select="cbc:ElectronicMail">
								<cbc:ElectronicMail>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ElectronicMail>
							</xsl:for-each>
							<xsl:for-each select="cbc:Note">
								<cbc:Note>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Note>
							</xsl:for-each>
							<xsl:for-each select="cac:OtherCommunication">
								<cac:OtherCommunication>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:OtherCommunication>
							</xsl:for-each>
						</cac:Contact>
					</xsl:for-each>
					<xsl:for-each select="cac:Person">
						<cac:Person>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:Person>
					</xsl:for-each>
					<xsl:for-each select="cac:AgentParty">
						<cac:AgentParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:AgentParty>
					</xsl:for-each>
					<xsl:for-each select="cac:ServiceProviderParty">
						<cac:ServiceProviderParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:ServiceProviderParty>
					</xsl:for-each>
					<xsl:for-each select="cac:PowerOfAttorney">
						<cac:PowerOfAttorney>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PowerOfAttorney>
					</xsl:for-each>
					<xsl:for-each select="cac:FinancialAccount">
						<cac:FinancialAccount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:FinancialAccount>
					</xsl:for-each>
				</cac:TaxRepresentativeParty>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:Delivery">
				<cac:Delivery>
					<xsl:for-each select="cbc:ID">
						<cbc:ID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:ID>
					</xsl:for-each>
					<xsl:for-each select="cbc:Quantity">
						<cbc:Quantity>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:Quantity>
					</xsl:for-each>
					<xsl:for-each select="cbc:MinimumQuantity">
						<cbc:MinimumQuantity>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:MinimumQuantity>
					</xsl:for-each>
					<xsl:for-each select="cbc:MaximumQuantity">
						<cbc:MaximumQuantity>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:MaximumQuantity>
					</xsl:for-each>
					<xsl:for-each select="cbc:ActualDeliveryDate">
						<cbc:ActualDeliveryDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:ActualDeliveryDate>
					</xsl:for-each>
					<xsl:for-each select="cbc:ActualDeliveryTime">
						<cbc:ActualDeliveryTime>
							<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
						</cbc:ActualDeliveryTime>
					</xsl:for-each>
					<xsl:for-each select="cbc:LatestDeliveryDate">
						<cbc:LatestDeliveryDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:LatestDeliveryDate>
					</xsl:for-each>
					<xsl:for-each select="cbc:LatestDeliveryTime">
						<cbc:LatestDeliveryTime>
							<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
						</cbc:LatestDeliveryTime>
					</xsl:for-each>
					<xsl:for-each select="cbc:ReleaseID">
						<cbc:ReleaseID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:ReleaseID>
					</xsl:for-each>
					<xsl:for-each select="cbc:TrackingID">
						<cbc:TrackingID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:TrackingID>
					</xsl:for-each>
					<xsl:for-each select="cac:DeliveryAddress">
						<cac:DeliveryAddress>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DeliveryAddress>
					</xsl:for-each>
					<xsl:for-each select="cac:DeliveryLocation">
						<cac:DeliveryLocation>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:for-each select="@schemeName">
										<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeAgencyID">
										<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeAgencyName">
										<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeVersionID">
										<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeDataURI">
										<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeURI">
										<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Description">
								<cbc:Description>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Description>
							</xsl:for-each>
							<xsl:for-each select="cbc:Conditions">
								<cbc:Conditions>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Conditions>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentity">
								<cbc:CountrySubentity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CountrySubentity>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentityCode">
								<cbc:CountrySubentityCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CountrySubentityCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:LocationTypeCode">
								<cbc:LocationTypeCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LocationTypeCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:InformationURI">
								<cbc:InformationURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:InformationURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cac:ValidityPeriod">
								<cac:ValidityPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ValidityPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:Address">
								<xsl:variable name="var130_StreetName" as="node()?" select="cbc:StreetName"/>
								<xsl:variable name="var131_PostalZone" as="node()?" select="cbc:PostalZone"/>
								<xsl:variable name="var132_AdditionalStreetName" as="node()?" select="cbc:AdditionalStreetName"/>
								<xsl:variable name="var133_CityName" as="node()?" select="cbc:CityName"/>
								<cac:Address>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:variable name="var123_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var130_StreetName)">
												<xsl:for-each select="$var130_StreetName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var123_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var130_StreetName">
											<cbc:StreetName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:StreetName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var124_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var132_AdditionalStreetName)">
												<xsl:for-each select="$var132_AdditionalStreetName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var124_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var132_AdditionalStreetName">
											<cbc:AdditionalStreetName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:AdditionalStreetName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:variable name="var125_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var133_CityName)">
												<xsl:for-each select="$var133_CityName">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var125_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var133_CityName">
											<cbc:CityName>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:CityName>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var126_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var131_PostalZone)">
												<xsl:for-each select="$var131_PostalZone">
													<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="($var126_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:for-each select="$var131_PostalZone">
											<cbc:PostalZone>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:PostalZone>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<xsl:variable name="var129_IdentificationCode" as="node()?" select="cbc:IdentificationCode"/>
										<xsl:variable name="var127_test_resultof_exists" as="xs:string?">
											<xsl:choose>
												<xsl:when test="fn:exists($var129_IdentificationCode)">
													<xsl:for-each select="$var129_IdentificationCode">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<cac:Country>
											<xsl:for-each select="$var127_test_resultof_exists">
												<xsl:variable name="var128_test_resultof_greater" as="xs:string?">
													<xsl:choose>
														<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
															<xsl:for-each select="$var129_IdentificationCode">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="'NO'"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:for-each select="$var128_test_resultof_greater">
													<cbc:IdentificationCode>
														<xsl:sequence select="."/>
													</cbc:IdentificationCode>
												</xsl:for-each>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:Address>
							</xsl:for-each>
							<xsl:for-each select="cac:SubsidiaryLocation">
								<cac:SubsidiaryLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:SubsidiaryLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:LocationCoordinate">
								<cac:LocationCoordinate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:LocationCoordinate>
							</xsl:for-each>
						</cac:DeliveryLocation>
					</xsl:for-each>
					<xsl:for-each select="cac:AlternativeDeliveryLocation">
						<cac:AlternativeDeliveryLocation>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:for-each select="@schemeID">
										<xsl:variable name="var134_resultof_vmf__inputtoresult" as="xs:string?">
											<xsl:call-template name="vmf:vmf6_inputtoresult">
												<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:for-each select="$var134_resultof_vmf__inputtoresult">
											<xsl:attribute name="schemeID" namespace="" select="."/>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="@schemeName">
										<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeAgencyID">
										<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeAgencyName">
										<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeVersionID">
										<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeDataURI">
										<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeURI">
										<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Description">
								<cbc:Description>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Description>
							</xsl:for-each>
							<xsl:for-each select="cbc:Conditions">
								<cbc:Conditions>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Conditions>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentity">
								<cbc:CountrySubentity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CountrySubentity>
							</xsl:for-each>
							<xsl:for-each select="cbc:CountrySubentityCode">
								<cbc:CountrySubentityCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CountrySubentityCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:LocationTypeCode">
								<cbc:LocationTypeCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:LocationTypeCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:InformationURI">
								<cbc:InformationURI>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:InformationURI>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cac:ValidityPeriod">
								<cac:ValidityPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ValidityPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:Address">
								<cac:Address>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressTypeCode">
										<cbc:AddressTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AddressFormatCode">
										<cbc:AddressFormatCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AddressFormatCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Postbox">
										<cbc:Postbox>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Postbox>
									</xsl:for-each>
									<xsl:for-each select="cbc:Floor">
										<cbc:Floor>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Floor>
									</xsl:for-each>
									<xsl:for-each select="cbc:Room">
										<cbc:Room>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Room>
									</xsl:for-each>
									<xsl:for-each select="cbc:StreetName">
										<cbc:StreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:StreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:AdditionalStreetName">
										<cbc:AdditionalStreetName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AdditionalStreetName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BlockName">
										<cbc:BlockName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BlockName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingName">
										<cbc:BuildingName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingName>
									</xsl:for-each>
									<xsl:for-each select="cbc:BuildingNumber">
										<cbc:BuildingNumber>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BuildingNumber>
									</xsl:for-each>
									<xsl:for-each select="cbc:InhouseMail">
										<cbc:InhouseMail>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InhouseMail>
									</xsl:for-each>
									<xsl:for-each select="cbc:Department">
										<cbc:Department>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Department>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkAttention">
										<cbc:MarkAttention>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkAttention>
									</xsl:for-each>
									<xsl:for-each select="cbc:MarkCare">
										<cbc:MarkCare>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MarkCare>
									</xsl:for-each>
									<xsl:for-each select="cbc:PlotIdentification">
										<cbc:PlotIdentification>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PlotIdentification>
									</xsl:for-each>
									<xsl:for-each select="cbc:CitySubdivisionName">
										<cbc:CitySubdivisionName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CitySubdivisionName>
									</xsl:for-each>
									<xsl:for-each select="cbc:CityName">
										<cbc:CityName>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CityName>
									</xsl:for-each>
									<xsl:for-each select="cbc:PostalZone">
										<cbc:PostalZone>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PostalZone>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:Region">
										<cbc:Region>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Region>
									</xsl:for-each>
									<xsl:for-each select="cbc:District">
										<cbc:District>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:District>
									</xsl:for-each>
									<xsl:for-each select="cbc:TimezoneOffset">
										<cbc:TimezoneOffset>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TimezoneOffset>
									</xsl:for-each>
									<xsl:for-each select="cac:AddressLine">
										<cac:AddressLine>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:AddressLine>
									</xsl:for-each>
									<xsl:for-each select="cac:Country">
										<cac:Country>
											<xsl:for-each select="cbc:IdentificationCode">
												<cbc:IdentificationCode>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:IdentificationCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Name>
											</xsl:for-each>
										</cac:Country>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:Address>
							</xsl:for-each>
							<xsl:for-each select="cac:SubsidiaryLocation">
								<cac:SubsidiaryLocation>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:SubsidiaryLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:LocationCoordinate">
								<cac:LocationCoordinate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:LocationCoordinate>
							</xsl:for-each>
						</cac:AlternativeDeliveryLocation>
					</xsl:for-each>
					<xsl:for-each select="cac:RequestedDeliveryPeriod">
						<cac:RequestedDeliveryPeriod>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:RequestedDeliveryPeriod>
					</xsl:for-each>
					<xsl:for-each select="cac:PromisedDeliveryPeriod">
						<cac:PromisedDeliveryPeriod>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PromisedDeliveryPeriod>
					</xsl:for-each>
					<xsl:for-each select="cac:EstimatedDeliveryPeriod">
						<cac:EstimatedDeliveryPeriod>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:EstimatedDeliveryPeriod>
					</xsl:for-each>
					<xsl:for-each select="cac:CarrierParty">
						<cac:CarrierParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:CarrierParty>
					</xsl:for-each>
					<xsl:for-each select="cac:DeliveryParty">
						<cac:DeliveryParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DeliveryParty>
					</xsl:for-each>
					<xsl:for-each select="cac:NotifyParty">
						<cac:NotifyParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:NotifyParty>
					</xsl:for-each>
					<xsl:for-each select="cac:Despatch">
						<cac:Despatch>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:Despatch>
					</xsl:for-each>
					<xsl:for-each select="cac:DeliveryTerms">
						<cac:DeliveryTerms>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DeliveryTerms>
					</xsl:for-each>
					<xsl:for-each select="cac:MinimumDeliveryUnit">
						<cac:MinimumDeliveryUnit>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:MinimumDeliveryUnit>
					</xsl:for-each>
					<xsl:for-each select="cac:MaximumDeliveryUnit">
						<cac:MaximumDeliveryUnit>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:MaximumDeliveryUnit>
					</xsl:for-each>
					<xsl:for-each select="cac:Shipment">
						<cac:Shipment>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:Shipment>
					</xsl:for-each>
				</cac:Delivery>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:DeliveryTerms">
				<cac:DeliveryTerms>
					<xsl:for-each select="cbc:ID">
						<cbc:ID>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:ID>
					</xsl:for-each>
					<xsl:for-each select="cbc:SpecialTerms">
						<cbc:SpecialTerms>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:SpecialTerms>
					</xsl:for-each>
					<xsl:for-each select="cbc:LossRiskResponsibilityCode">
						<cbc:LossRiskResponsibilityCode>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:LossRiskResponsibilityCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:LossRisk">
						<cbc:LossRisk>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:LossRisk>
					</xsl:for-each>
					<xsl:for-each select="cbc:Amount">
						<cbc:Amount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:Amount>
					</xsl:for-each>
					<xsl:for-each select="cac:DeliveryLocation">
						<cac:DeliveryLocation>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DeliveryLocation>
					</xsl:for-each>
					<xsl:for-each select="cac:AllowanceCharge">
						<cac:AllowanceCharge>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:AllowanceCharge>
					</xsl:for-each>
				</cac:DeliveryTerms>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:PaymentMeans">
				<xsl:variable name="var148_PaymentChannelCode" as="node()?" select="cbc:PaymentChannelCode"/>
				<xsl:variable name="var149_PaymentID" as="node()*" select="cbc:PaymentID"/>
				<xsl:variable name="var147_resultof_exists" as="xs:boolean" select="fn:exists($var149_PaymentID)"/>
				<cac:PaymentMeans>
					<xsl:for-each select="cbc:ID">
						<cbc:ID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:ID>
					</xsl:for-each>
					<xsl:variable name="var136_PaymentMeansCode" as="node()" select="cbc:PaymentMeansCode"/>
					<xsl:variable name="var135_listAgencyID" as="node()?" select="$var136_PaymentMeansCode/@listAgencyID"/>
					<cbc:PaymentMeansCode>
						<xsl:for-each select="$var135_listAgencyID">
							<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var135_listAgencyID">
							<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var136_PaymentMeansCode/@listName">
							<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var136_PaymentMeansCode/@listVersionID">
							<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var136_PaymentMeansCode/@name">
							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var136_PaymentMeansCode/@languageID">
							<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var136_PaymentMeansCode/@listURI">
							<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:for-each select="$var136_PaymentMeansCode/@listSchemeURI">
							<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:sequence select="fn:string($var136_PaymentMeansCode)"/>
					</cbc:PaymentMeansCode>
					<xsl:variable name="var137_test_resultof_exists" as="xs:string?">
						<xsl:choose>
							<xsl:when test="fn:exists($var148_PaymentChannelCode)">
								<xsl:for-each select="$var148_PaymentChannelCode">
									<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="($var137_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
						<xsl:for-each select="$var148_PaymentChannelCode">
							<cbc:PaymentChannelCode>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:PaymentChannelCode>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="cbc:InstructionID">
						<cbc:InstructionID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:InstructionID>
					</xsl:for-each>
					<xsl:for-each select="cbc:InstructionNote">
						<cbc:InstructionNote>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:InstructionNote>
					</xsl:for-each>
					<xsl:variable name="var138_test_exists" as="xs:string*">
						<xsl:choose>
							<xsl:when test="$var147_resultof_exists">
								<xsl:for-each select="$var149_PaymentID">
									<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="(fn:string-length(xs:string(fn:string-join(for $x in $var138_test_exists return xs:string($x), ' '))) &gt; xs:decimal('0'))">
						<xsl:if test="$var147_resultof_exists">
							<xsl:variable name="var139_cur_of_PaymentID" as="xs:string*">
								<xsl:for-each select="$var149_PaymentID">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var140_resultof_last" as="xs:string" select="xs:normalizedString(fn:string-join(for $x in $var139_cur_of_PaymentID return xs:string($x), ' '))"/>
							<cbc:PaymentID>
								<xsl:sequence select="$var140_resultof_last"/>
							</cbc:PaymentID>
						</xsl:if>
					</xsl:if>
					<xsl:for-each select="cac:CardAccount">
						<cac:CardAccount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:CardAccount>
					</xsl:for-each>
					<xsl:for-each select="cac:PayerFinancialAccount">
						<cac:PayerFinancialAccount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PayerFinancialAccount>
					</xsl:for-each>
					<xsl:for-each select="cac:PayeeFinancialAccount">
						<xsl:variable name="var146_ID" as="node()?" select="cbc:ID"/>
						<cac:PayeeFinancialAccount>
							<xsl:for-each select="$var146_ID">
								<cbc:ID>
									<xsl:for-each select="@schemeName">
										<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeAgencyID">
										<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeAgencyName">
										<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeVersionID">
										<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeDataURI">
										<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:for-each select="@schemeURI">
										<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="cbc:AliasName">
								<cbc:AliasName>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AliasName>
							</xsl:for-each>
							<xsl:for-each select="cbc:AccountTypeCode">
								<cbc:AccountTypeCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AccountTypeCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:AccountFormatCode">
								<cbc:AccountFormatCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AccountFormatCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:CurrencyCode">
								<cbc:CurrencyCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:CurrencyCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:PaymentNote">
								<cbc:PaymentNote>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PaymentNote>
							</xsl:for-each>
							<xsl:for-each select="cac:FinancialInstitutionBranch">
								<xsl:variable name="var145_cur" as="node()" select="."/>
								<cac:FinancialInstitutionBranch>
									<xsl:for-each select="$var146_ID/@schemeID">
										<xsl:variable name="var141_test_resultof_equal" as="xs:string?">
											<xsl:choose>
												<xsl:when test="(fn:string(.) = 'IBAN')">
													<xsl:for-each select="$var145_cur/cac:FinancialInstitution/cbc:ID">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="($var145_cur/cbc:ID)[(fn:string-length(fn:string(.)) = xs:decimal('8'))]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var141_test_resultof_equal">
											<cbc:ID>
												<xsl:sequence select="."/>
											</cbc:ID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="($var146_ID/@schemeID)[(fn:upper-case(fn:string(.)) = 'IBAN')]">
										<xsl:for-each select="$var145_cur/cbc:Name">
											<cbc:Name>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:Name>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:variable name="var143_resultof_filter" as="node()?">
										<xsl:for-each select="cac:Address">
											<xsl:variable name="var142_map_of_ID" as="xs:boolean?">
												<xsl:for-each select="$var146_ID/@schemeID">
													<xsl:sequence select="(fn:upper-case(fn:string(.)) = 'IBAN')"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:if test="fn:exists(($var142_map_of_ID)[.])">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var143_resultof_filter">
										<xsl:variable name="var144_create_Address" as="node()">
											<Address xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
												<xsl:sequence select="(./@node(), ./node())"/>
											</Address>
										</xsl:variable>
										<cac:Address>
											<xsl:sequence select="($var144_create_Address/@node(), $var144_create_Address/node())"/>
										</cac:Address>
									</xsl:for-each>
								</cac:FinancialInstitutionBranch>
							</xsl:for-each>
							<xsl:for-each select="cac:Country">
								<cac:Country>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Country>
							</xsl:for-each>
						</cac:PayeeFinancialAccount>
					</xsl:for-each>
					<xsl:for-each select="cac:CreditAccount">
						<cac:CreditAccount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:CreditAccount>
					</xsl:for-each>
					<xsl:for-each select="cac:PaymentMandate">
						<cac:PaymentMandate>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PaymentMandate>
					</xsl:for-each>
					<xsl:for-each select="cac:TradeFinancing">
						<cac:TradeFinancing>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:TradeFinancing>
					</xsl:for-each>
				</cac:PaymentMeans>
			</xsl:for-each>
			<xsl:variable name="var152_resultof_filter" as="node()*">
				<xsl:for-each select="$var359_Invoice/cac:PaymentTerms">
					<xsl:variable name="var151_resultof_first_items" as="node()*" select="(./cbc:Note)[(fn:position() &lt;= xs:integer('1'))]"/>
					<xsl:variable name="var150_test_resultof_exists" as="xs:string*">
						<xsl:choose>
							<xsl:when test="fn:exists($var151_resultof_first_items)">
								<xsl:for-each select="$var151_resultof_first_items">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="(fn:string-length(xs:string(fn:string-join(for $x in $var150_test_resultof_exists return xs:string($x), ' '))) &gt; xs:decimal('0'))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var152_resultof_filter">
				<xsl:variable name="var157_Note" as="node()*" select="cbc:Note"/>
				<xsl:variable name="var156_resultof_first_items" as="node()*" select="($var157_Note)[(fn:position() &lt;= xs:integer('1'))]"/>
				<xsl:variable name="var153_test_resultof_exists" as="xs:string*">
					<xsl:choose>
						<xsl:when test="fn:exists($var156_resultof_first_items)">
							<xsl:for-each select="$var156_resultof_first_items">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:sequence select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<cac:PaymentTerms>
					<xsl:if test="(fn:string-length(xs:string(fn:string-join(for $x in $var153_test_resultof_exists return xs:string($x), ' '))) &gt; xs:decimal('0'))">
						<xsl:if test="fn:exists($var157_Note)">
							<xsl:variable name="var154_cur_of_Note" as="xs:string*">
								<xsl:for-each select="$var157_Note">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var155_resultof_last" as="xs:string" select="xs:string(fn:string-join(for $x in $var154_cur_of_Note return xs:string($x), ' '))"/>
							<cbc:Note>
								<xsl:sequence select="$var155_resultof_last"/>
							</cbc:Note>
						</xsl:if>
					</xsl:if>
				</cac:PaymentTerms>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:PrepaidPayment">
				<cac:PrepaidPayment>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:PrepaidPayment>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:AllowanceCharge">
				<xsl:variable name="var190_cur" as="node()" select="."/>
				<xsl:variable name="var189_BaseAmount" as="node()?" select="cbc:BaseAmount"/>
				<cac:AllowanceCharge>
					<xsl:for-each select="cbc:ID">
						<cbc:ID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:ID>
					</xsl:for-each>
					<cbc:ChargeIndicator>
						<xsl:sequence select="xs:string(xs:boolean(fn:string(cbc:ChargeIndicator)))"/>
					</cbc:ChargeIndicator>
					<xsl:for-each select="cbc:AllowanceChargeReasonCode">
						<cbc:AllowanceChargeReasonCode>
							<xsl:for-each select="@listAgencyID">
								<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@listAgencyName">
								<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@listName">
								<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@listVersionID">
								<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@name">
								<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@languageID">
								<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@listURI">
								<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
							</xsl:for-each>
							<xsl:for-each select="@listSchemeURI">
								<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
							</xsl:for-each>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:AllowanceChargeReasonCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:AllowanceChargeReason">
						<cbc:AllowanceChargeReason>
							<xsl:sequence select="fn:string(.)"/>
						</cbc:AllowanceChargeReason>
					</xsl:for-each>
					<xsl:variable name="var158_test_resultof_exists" as="xs:string?">
						<xsl:choose>
							<xsl:when test="fn:exists($var189_BaseAmount)">
								<xsl:for-each select="$var189_BaseAmount">
									<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="$var158_test_resultof_exists">
						<xsl:variable name="var159_cur" as="xs:string" select="."/>
						<xsl:for-each select="($var190_cur/cbc:MultiplierFactorNumeric)[fn:exists((((fn:string-length($var159_cur) &gt; xs:decimal('0')), (xs:decimal(fn:string(.)) != xs:decimal('0'))))[.])]">
							<cbc:MultiplierFactorNumeric>
								<xsl:for-each select="@format">
									<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
							</cbc:MultiplierFactorNumeric>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="cbc:PrepaidIndicator">
						<cbc:PrepaidIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:PrepaidIndicator>
					</xsl:for-each>
					<xsl:for-each select="cbc:SequenceNumeric">
						<cbc:SequenceNumeric>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:SequenceNumeric>
					</xsl:for-each>
					<xsl:variable name="var160_Amount" as="node()" select="cbc:Amount"/>
					<cbc:Amount>
						<xsl:sequence select="($var160_Amount/@node(), $var160_Amount/node())"/>
					</cbc:Amount>
					<xsl:for-each select="$var189_BaseAmount">
						<cbc:BaseAmount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:BaseAmount>
					</xsl:for-each>
					<xsl:for-each select="cbc:AccountingCostCode">
						<cbc:AccountingCostCode>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AccountingCostCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:AccountingCost">
						<cbc:AccountingCost>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AccountingCost>
					</xsl:for-each>
					<xsl:for-each select="cbc:PerUnitAmount">
						<cbc:PerUnitAmount>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:PerUnitAmount>
					</xsl:for-each>
					<xsl:for-each select="cac:TaxCategory">
						<xsl:variable name="var188_cur" as="node()" select="."/>
						<xsl:variable name="var185_TaxExemptionReasonCode" as="node()?" select="cbc:TaxExemptionReasonCode"/>
						<xsl:variable name="var186_Percent" as="node()?" select="cbc:Percent"/>
						<xsl:variable name="var187_ID" as="node()?" select="cbc:ID"/>
						<cac:TaxCategory>
							<xsl:for-each select="$var187_ID">
								<xsl:variable name="var163_cur" as="node()" select="."/>
								<xsl:variable name="var162_cur_as_string" as="xs:string" select="fn:string(.)"/>
								<xsl:variable name="var161_test_resultof_any" as="xs:string?">
									<xsl:choose>
										<xsl:when test="fn:exists(((($var162_cur_as_string = 'H'), ($var162_cur_as_string = 'R'), ($var162_cur_as_string = 'AA')))[.])">
											<xsl:sequence select="'S'"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:for-each select="$var186_Percent">
												<xsl:choose>
													<xsl:when test="(($var162_cur_as_string = 'S') and (xs:decimal(fn:string(.)) = xs:decimal('0')))">
														<xsl:sequence select="'Z'"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="$var162_cur_as_string"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:for-each>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:for-each select="$var161_test_resultof_any">
									<cbc:ID>
										<xsl:for-each select="$var163_cur/@schemeID">
											<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var163_cur/@schemeName">
											<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var163_cur/@schemeAgencyID">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var163_cur/@schemeAgencyName">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var163_cur/@schemeVersionID">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="$var163_cur/@schemeDataURI">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:for-each select="$var163_cur/@schemeURI">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:sequence select="."/>
									</cbc:ID>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="cbc:Name">
								<cbc:Name>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Name>
							</xsl:for-each>
							<xsl:for-each select="$var186_Percent">
								<cbc:Percent>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Percent>
							</xsl:for-each>
							<xsl:for-each select="cbc:BaseUnitMeasure">
								<cbc:BaseUnitMeasure>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:BaseUnitMeasure>
							</xsl:for-each>
							<xsl:for-each select="cbc:PerUnitAmount">
								<cbc:PerUnitAmount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PerUnitAmount>
							</xsl:for-each>
							<xsl:variable name="var164_test_resultof_exists" as="xs:string?">
								<xsl:choose>
									<xsl:when test="fn:exists($var185_TaxExemptionReasonCode)">
										<xsl:for-each select="$var185_TaxExemptionReasonCode">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:variable name="var166_filter_of_filter" as="node()?">
								<xsl:for-each select="($var164_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
									<xsl:for-each select="$var187_ID">
										<xsl:variable name="var165_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:if test="(($var165_cur_as_string != 'Z') and ($var165_cur_as_string != 'S'))">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="var172_resultof_filter" as="node()?">
								<xsl:for-each select="$var166_filter_of_filter">
									<xsl:variable name="var171_resultof_filter" as="node()*">
										<xsl:for-each select="$var185_TaxExemptionReasonCode">
											<xsl:variable name="var170_cur" as="node()" select="."/>
											<xsl:variable name="var169_resultof_filter" as="node()*">
												<xsl:for-each select="$var188_cur/cbc:TaxExemptionReason">
													<xsl:variable name="var168_cur_as_string" as="xs:string" select="fn:string($var170_cur)"/>
													<xsl:variable name="var167_resultof_vmf__inputtoresult" as="xs:string">
														<xsl:call-template name="vmf:vmf7_inputtoresult">
															<xsl:with-param name="input" select="$var168_cur_as_string" as="xs:string"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:if test="fn:exists(((($var167_resultof_vmf__inputtoresult = 'TRUE'), ($var168_cur_as_string != fn:string(.))))[.])">
														<xsl:sequence select="."/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:if test="fn:exists($var169_resultof_filter)">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var171_resultof_filter)">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var172_resultof_filter">
								<xsl:variable name="var177_map_of_TaxExemptionReasonCo" as="xs:string*">
									<xsl:for-each select="$var185_TaxExemptionReasonCode">
										<xsl:variable name="var176_cur" as="node()" select="."/>
										<xsl:variable name="var175_resultof_filter" as="node()*">
											<xsl:for-each select="$var188_cur/cbc:TaxExemptionReason">
												<xsl:variable name="var174_cur_as_string" as="xs:string" select="fn:string($var176_cur)"/>
												<xsl:variable name="var173_resultof_vmf__inputtoresult" as="xs:string">
													<xsl:call-template name="vmf:vmf7_inputtoresult">
														<xsl:with-param name="input" select="$var174_cur_as_string" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="fn:exists(((($var173_resultof_vmf__inputtoresult = 'TRUE'), ($var174_cur_as_string != fn:string(.))))[.])">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var175_resultof_filter">
											<xsl:sequence select="fn:string($var176_cur)"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<cbc:TaxExemptionReasonCode>
									<xsl:sequence select="xs:normalizedString(fn:string-join(for $x in $var177_map_of_TaxExemptionReasonCo return xs:string($x), ' '))"/>
								</cbc:TaxExemptionReasonCode>
							</xsl:for-each>
							<xsl:for-each select="$var187_ID">
								<xsl:variable name="var183_cur" as="node()" select="."/>
								<xsl:for-each select="$var188_cur/cbc:TaxExemptionReason">
									<xsl:variable name="var182_cur" as="node()" select="."/>
									<xsl:variable name="var180_cur_as_string" as="xs:string" select="fn:string(.)"/>
									<xsl:variable name="var181_cur_as_string" as="xs:string" select="fn:string($var183_cur)"/>
									<xsl:variable name="var178_test_resultof_logical_and" as="xs:string?">
										<xsl:choose>
											<xsl:when test="(($var181_cur_as_string = 'E') and (fn:string-length($var180_cur_as_string) = xs:decimal('0')))">
												<xsl:sequence select="'Ingen moms'"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:if test="(($var181_cur_as_string = 'Z') and ($var181_cur_as_string != 'S'))">
													<xsl:sequence select="$var180_cur_as_string"/>
												</xsl:if>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="$var178_test_resultof_logical_and">
										<xsl:variable name="var179_resultof_logical_and" as="xs:boolean" select="(($var181_cur_as_string = 'Z') and ($var181_cur_as_string != 'S'))"/>
										<cbc:TaxExemptionReason>
											<xsl:if test="$var179_resultof_logical_and">
												<xsl:for-each select="$var182_cur/@languageID">
													<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:if>
											<xsl:if test="$var179_resultof_logical_and">
												<xsl:for-each select="$var182_cur/@languageLocaleID">
													<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:if>
											<xsl:sequence select="."/>
										</cbc:TaxExemptionReason>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="cbc:TierRange">
								<cbc:TierRange>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:TierRange>
							</xsl:for-each>
							<xsl:for-each select="cbc:TierRatePercent">
								<cbc:TierRatePercent>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:TierRatePercent>
							</xsl:for-each>
							<xsl:variable name="var184_TaxScheme" as="node()" select="cac:TaxScheme"/>
							<cac:TaxScheme>
								<xsl:sequence select="($var184_TaxScheme/@node(), $var184_TaxScheme/node())"/>
							</cac:TaxScheme>
						</cac:TaxCategory>
					</xsl:for-each>
					<xsl:for-each select="cac:TaxTotal">
						<cac:TaxTotal>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:TaxTotal>
					</xsl:for-each>
					<xsl:for-each select="cac:PaymentMeans">
						<cac:PaymentMeans>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PaymentMeans>
					</xsl:for-each>
				</cac:AllowanceCharge>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:TaxExchangeRate">
				<cac:TaxExchangeRate>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:TaxExchangeRate>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:PricingExchangeRate">
				<cac:PricingExchangeRate>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:PricingExchangeRate>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:PaymentExchangeRate">
				<cac:PaymentExchangeRate>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:PaymentExchangeRate>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:PaymentAlternativeExchangeRate">
				<cac:PaymentAlternativeExchangeRate>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:PaymentAlternativeExchangeRate>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice">
				<xsl:variable name="var244_cur" as="node()" select="."/>
				<xsl:for-each select="cac:TaxTotal">
					<xsl:variable name="var243_TaxSubtotal" as="node()*" select="cac:TaxSubtotal"/>
					<cac:TaxTotal>
						<xsl:variable name="var191_TaxAmount" as="node()" select="cbc:TaxAmount"/>
						<cbc:TaxAmount>
							<xsl:sequence select="($var191_TaxAmount/@node(), $var191_TaxAmount/node())"/>
						</cbc:TaxAmount>
						<xsl:for-each select="cbc:RoundingAmount">
							<cbc:RoundingAmount>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:RoundingAmount>
						</xsl:for-each>
						<xsl:for-each select="cbc:TaxEvidenceIndicator">
							<cbc:TaxEvidenceIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:TaxEvidenceIndicator>
						</xsl:for-each>
						<xsl:for-each select="cbc:TaxIncludedIndicator">
							<cbc:TaxIncludedIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:TaxIncludedIndicator>
						</xsl:for-each>
						<xsl:variable name="var196_resultof_filter" as="node()*">
							<xsl:for-each select="$var243_TaxSubtotal">
								<xsl:variable name="var194_resultof_filter" as="node()*">
									<xsl:for-each select="$var244_cur/cac:InvoiceLine">
										<xsl:variable name="var193_map_of_ClassifiedTaxCategory" as="xs:boolean*">
											<xsl:for-each select="cac:Item/cac:ClassifiedTaxCategory/cbc:ID">
												<xsl:variable name="var192_cur_as_string" as="xs:string" select="fn:string(.)"/>
												<xsl:sequence select="fn:exists(((($var192_cur_as_string = 'E'), ($var192_cur_as_string = '')))[.])"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists(($var193_map_of_ClassifiedTaxCategory)[.])">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var195_test_resultof_any" as="node()?">
									<xsl:if test="fn:exists((./cac:TaxCategory/cbc:ID)[(fn:string(.) = 'E')])">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:variable>
								<xsl:if test="((fn:count($var194_resultof_filter) &gt; xs:decimal('0')) and (fn:count($var195_test_resultof_any) = xs:decimal('0')))">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var196_resultof_filter">
							<xsl:variable name="var202___as_string" as="xs:string" select="xs:string(xs:decimal('0'))"/>
							<xsl:variable name="var201_create_currencyID_of_DocumentCurrencyCode" as="node()?">
								<xsl:for-each select="$var244_cur/cbc:DocumentCurrencyCode">
									<xsl:attribute name="currencyID" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<cac:TaxSubtotal>
								<xsl:variable name="var200_map_of_InvoiceLine" as="xs:decimal*">
									<xsl:for-each select="$var244_cur/cac:InvoiceLine">
										<xsl:variable name="var199_cur" as="node()" select="."/>
										<xsl:variable name="var198_resultof_filter" as="node()*">
											<xsl:for-each select="cac:Item/cac:ClassifiedTaxCategory/cbc:ID">
												<xsl:variable name="var197_cur_as_string" as="xs:string" select="fn:string(.)"/>
												<xsl:if test="fn:exists(((($var197_cur_as_string = 'E'), ($var197_cur_as_string = '')))[.])">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var198_resultof_filter">
											<xsl:sequence select="xs:decimal(fn:string($var199_cur/cbc:LineExtensionAmount))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<cbc:TaxableAmount>
									<xsl:sequence select="($var201_create_currencyID_of_DocumentCurrencyCode, xs:string(fn:sum($var200_map_of_InvoiceLine)))"/>
								</cbc:TaxableAmount>
								<cbc:TaxAmount>
									<xsl:sequence select="($var201_create_currencyID_of_DocumentCurrencyCode, $var202___as_string)"/>
								</cbc:TaxAmount>
								<cac:TaxCategory>
									<cbc:ID>E</cbc:ID>
									<cbc:Percent>
										<xsl:sequence select="$var202___as_string"/>
									</cbc:Percent>
									<cbc:TaxExemptionReason>Ingen moms</cbc:TaxExemptionReason>
									<cac:TaxScheme>
										<cbc:ID>VAT</cbc:ID>
									</cac:TaxScheme>
								</cac:TaxCategory>
							</cac:TaxSubtotal>
						</xsl:for-each>
						<xsl:variable name="var205_resultof_filter" as="node()*">
							<xsl:for-each select="$var243_TaxSubtotal">
								<xsl:variable name="var204_resultof_filter" as="node()*">
									<xsl:for-each select="$var244_cur/cac:InvoiceLine">
										<xsl:variable name="var203_map_of_ClassifiedTaxCategory" as="xs:boolean*">
											<xsl:for-each select="cac:Item/cac:ClassifiedTaxCategory/cbc:ID">
												<xsl:sequence select="(fn:string(.) = 'Z')"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists(($var203_map_of_ClassifiedTaxCategory)[.])">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="(fn:count($var204_resultof_filter) &gt; xs:decimal('0'))">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var205_resultof_filter">
							<xsl:variable name="var209___as_string" as="xs:string" select="xs:string(xs:decimal('0'))"/>
							<xsl:variable name="var208_create_currencyID_of_DocumentCurrencyCode" as="node()?">
								<xsl:for-each select="$var244_cur/cbc:DocumentCurrencyCode">
									<xsl:attribute name="currencyID" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</xsl:variable>
							<cac:TaxSubtotal>
								<xsl:variable name="var207_map_of_InvoiceLine" as="xs:decimal*">
									<xsl:for-each select="$var244_cur/cac:InvoiceLine">
										<xsl:variable name="var206_cur" as="node()" select="."/>
										<xsl:for-each select="(./cac:Item/cac:ClassifiedTaxCategory/cbc:ID)[(fn:string(.) = 'Z')]">
											<xsl:sequence select="xs:decimal(fn:string($var206_cur/cbc:LineExtensionAmount))"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<cbc:TaxableAmount>
									<xsl:sequence select="($var208_create_currencyID_of_DocumentCurrencyCode, xs:string(fn:sum($var207_map_of_InvoiceLine)))"/>
								</cbc:TaxableAmount>
								<cbc:TaxAmount>
									<xsl:sequence select="($var208_create_currencyID_of_DocumentCurrencyCode, $var209___as_string)"/>
								</cbc:TaxAmount>
								<cac:TaxCategory>
									<cbc:ID>Z</cbc:ID>
									<cbc:Percent>
										<xsl:sequence select="$var209___as_string"/>
									</cbc:Percent>
									<cac:TaxScheme>
										<cbc:ID>VAT</cbc:ID>
									</cac:TaxScheme>
								</cac:TaxCategory>
							</cac:TaxSubtotal>
						</xsl:for-each>
						<xsl:variable name="var213_resultof_filter" as="node()*">
							<xsl:for-each select="$var243_TaxSubtotal">
								<xsl:variable name="var211_TaxAmount" as="node()" select="cbc:TaxAmount"/>
								<xsl:variable name="var212_result" as="xs:boolean*">
									<xsl:for-each select="cac:TaxCategory/cbc:ID">
										<xsl:variable name="var210_cur" as="node()" select="."/>
										<xsl:for-each select="$var244_cur/cac:InvoiceLine/cac:Item/cac:ClassifiedTaxCategory/cbc:ID">
											<xsl:sequence select="fn:exists((((xs:decimal(fn:string($var211_TaxAmount)) != xs:decimal('0')), (fn:string($var210_cur) = fn:string(.))))[.])"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:variable>
								<xsl:if test="fn:exists(($var212_result)[.])">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var213_resultof_filter">
							<cac:TaxSubtotal>
								<xsl:for-each select="cbc:TaxableAmount">
									<cbc:TaxableAmount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TaxableAmount>
								</xsl:for-each>
								<xsl:variable name="var214_TaxAmount" as="node()" select="cbc:TaxAmount"/>
								<cbc:TaxAmount>
									<xsl:sequence select="($var214_TaxAmount/@node(), $var214_TaxAmount/node())"/>
								</cbc:TaxAmount>
								<xsl:for-each select="cbc:CalculationSequenceNumeric">
									<cbc:CalculationSequenceNumeric>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CalculationSequenceNumeric>
								</xsl:for-each>
								<xsl:for-each select="cbc:TransactionCurrencyTaxAmount">
									<cbc:TransactionCurrencyTaxAmount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TransactionCurrencyTaxAmount>
								</xsl:for-each>
								<xsl:for-each select="cbc:Percent">
									<cbc:Percent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Percent>
								</xsl:for-each>
								<xsl:for-each select="cbc:BaseUnitMeasure">
									<cbc:BaseUnitMeasure>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BaseUnitMeasure>
								</xsl:for-each>
								<xsl:for-each select="cbc:PerUnitAmount">
									<cbc:PerUnitAmount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PerUnitAmount>
								</xsl:for-each>
								<xsl:for-each select="cbc:TierRange">
									<cbc:TierRange>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TierRange>
								</xsl:for-each>
								<xsl:for-each select="cbc:TierRatePercent">
									<cbc:TierRatePercent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TierRatePercent>
								</xsl:for-each>
								<xsl:variable name="var242_TaxCategory" as="node()" select="cac:TaxCategory"/>
								<xsl:variable name="var239_TaxExemptionReasonCode" as="node()?" select="$var242_TaxCategory/cbc:TaxExemptionReasonCode"/>
								<xsl:variable name="var240_ID" as="node()?" select="$var242_TaxCategory/cbc:ID"/>
								<xsl:variable name="var241_Percent" as="node()?" select="$var242_TaxCategory/cbc:Percent"/>
								<cac:TaxCategory>
									<xsl:for-each select="$var240_ID">
										<xsl:variable name="var217_cur" as="node()" select="."/>
										<xsl:variable name="var216_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:variable name="var215_test_resultof_any" as="xs:string?">
											<xsl:choose>
												<xsl:when test="fn:exists(((($var216_cur_as_string = 'H'), ($var216_cur_as_string = 'R'), ($var216_cur_as_string = 'AA')))[.])">
													<xsl:sequence select="'S'"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="$var241_Percent">
														<xsl:choose>
															<xsl:when test="(($var216_cur_as_string = 'S') and (xs:decimal(fn:string(.)) = xs:decimal('0')))">
																<xsl:sequence select="'Z'"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="$var216_cur_as_string"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var215_test_resultof_any">
											<cbc:ID>
												<xsl:for-each select="$var217_cur/@schemeID">
													<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var217_cur/@schemeName">
													<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var217_cur/@schemeAgencyID">
													<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var217_cur/@schemeAgencyName">
													<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var217_cur/@schemeVersionID">
													<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var217_cur/@schemeDataURI">
													<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var217_cur/@schemeURI">
													<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:sequence select="."/>
											</cbc:ID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="$var242_TaxCategory/cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="$var241_Percent">
										<cbc:Percent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Percent>
									</xsl:for-each>
									<xsl:for-each select="$var242_TaxCategory/cbc:BaseUnitMeasure">
										<cbc:BaseUnitMeasure>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BaseUnitMeasure>
									</xsl:for-each>
									<xsl:for-each select="$var242_TaxCategory/cbc:PerUnitAmount">
										<cbc:PerUnitAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PerUnitAmount>
									</xsl:for-each>
									<xsl:variable name="var218_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var239_TaxExemptionReasonCode)">
												<xsl:for-each select="$var239_TaxExemptionReasonCode">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var220_filter_of_filter" as="node()?">
										<xsl:for-each select="($var218_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
											<xsl:for-each select="$var240_ID">
												<xsl:variable name="var219_cur_as_string" as="xs:string" select="fn:string(.)"/>
												<xsl:if test="(($var219_cur_as_string != 'Z') and ($var219_cur_as_string != 'S'))">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var226_resultof_filter" as="node()?">
										<xsl:for-each select="$var220_filter_of_filter">
											<xsl:variable name="var225_resultof_filter" as="node()*">
												<xsl:for-each select="$var239_TaxExemptionReasonCode">
													<xsl:variable name="var224_cur" as="node()" select="."/>
													<xsl:variable name="var223_resultof_filter" as="node()*">
														<xsl:for-each select="$var242_TaxCategory/cbc:TaxExemptionReason">
															<xsl:variable name="var222_cur_as_string" as="xs:string" select="fn:string($var224_cur)"/>
															<xsl:variable name="var221_resultof_vmf__inputtoresult" as="xs:string">
																<xsl:call-template name="vmf:vmf8_inputtoresult">
																	<xsl:with-param name="input" select="$var222_cur_as_string" as="xs:string"/>
																</xsl:call-template>
															</xsl:variable>
															<xsl:if test="fn:exists(((($var221_resultof_vmf__inputtoresult = 'TRUE'), ($var222_cur_as_string != fn:string(.))))[.])">
																<xsl:sequence select="."/>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:if test="fn:exists($var223_resultof_filter)">
														<xsl:sequence select="."/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:if test="fn:exists($var225_resultof_filter)">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var226_resultof_filter">
										<xsl:variable name="var231_map_of_TaxExemptionReasonCo" as="xs:string*">
											<xsl:for-each select="$var239_TaxExemptionReasonCode">
												<xsl:variable name="var230_cur" as="node()" select="."/>
												<xsl:variable name="var229_resultof_filter" as="node()*">
													<xsl:for-each select="$var242_TaxCategory/cbc:TaxExemptionReason">
														<xsl:variable name="var228_cur_as_string" as="xs:string" select="fn:string($var230_cur)"/>
														<xsl:variable name="var227_resultof_vmf__inputtoresult" as="xs:string">
															<xsl:call-template name="vmf:vmf8_inputtoresult">
																<xsl:with-param name="input" select="$var228_cur_as_string" as="xs:string"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="fn:exists(((($var227_resultof_vmf__inputtoresult = 'TRUE'), ($var228_cur_as_string != fn:string(.))))[.])">
															<xsl:sequence select="."/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:for-each select="$var229_resultof_filter">
													<xsl:sequence select="fn:string($var230_cur)"/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:variable>
										<cbc:TaxExemptionReasonCode>
											<xsl:sequence select="xs:normalizedString(fn:string-join(for $x in $var231_map_of_TaxExemptionReasonCo return xs:string($x), ' '))"/>
										</cbc:TaxExemptionReasonCode>
									</xsl:for-each>
									<xsl:for-each select="$var240_ID">
										<xsl:variable name="var237_cur" as="node()" select="."/>
										<xsl:for-each select="$var242_TaxCategory/cbc:TaxExemptionReason">
											<xsl:variable name="var236_cur" as="node()" select="."/>
											<xsl:variable name="var234_cur_as_string" as="xs:string" select="fn:string(.)"/>
											<xsl:variable name="var235_cur_as_string" as="xs:string" select="fn:string($var237_cur)"/>
											<xsl:variable name="var232_test_resultof_logical_and" as="xs:string?">
												<xsl:choose>
													<xsl:when test="(($var235_cur_as_string = 'E') and (fn:string-length($var234_cur_as_string) = xs:decimal('0')))">
														<xsl:sequence select="'Ingen moms'"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:if test="(($var235_cur_as_string != 'Z') and ($var235_cur_as_string != 'S'))">
															<xsl:sequence select="$var234_cur_as_string"/>
														</xsl:if>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:for-each select="$var232_test_resultof_logical_and">
												<xsl:variable name="var233_resultof_logical_and" as="xs:boolean" select="(($var235_cur_as_string != 'Z') and ($var235_cur_as_string != 'S'))"/>
												<cbc:TaxExemptionReason>
													<xsl:if test="$var233_resultof_logical_and">
														<xsl:for-each select="$var236_cur/@languageID">
															<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:if>
													<xsl:if test="$var233_resultof_logical_and">
														<xsl:for-each select="$var236_cur/@languageLocaleID">
															<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:if>
													<xsl:sequence select="."/>
												</cbc:TaxExemptionReason>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="$var242_TaxCategory/cbc:TierRange">
										<cbc:TierRange>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRange>
									</xsl:for-each>
									<xsl:for-each select="$var242_TaxCategory/cbc:TierRatePercent">
										<cbc:TierRatePercent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRatePercent>
									</xsl:for-each>
									<xsl:variable name="var238_TaxScheme" as="node()" select="$var242_TaxCategory/cac:TaxScheme"/>
									<cac:TaxScheme>
										<xsl:for-each select="$var238_TaxScheme/cbc:ID">
											<cbc:ID>
												<xsl:sequence select="fn:string(.)"/>
											</cbc:ID>
										</xsl:for-each>
										<xsl:for-each select="$var238_TaxScheme/cbc:Name">
											<cbc:Name>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:Name>
										</xsl:for-each>
										<xsl:for-each select="$var238_TaxScheme/cbc:TaxTypeCode">
											<cbc:TaxTypeCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:TaxTypeCode>
										</xsl:for-each>
										<xsl:for-each select="$var238_TaxScheme/cbc:CurrencyCode">
											<cbc:CurrencyCode>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cbc:CurrencyCode>
										</xsl:for-each>
										<xsl:for-each select="$var238_TaxScheme/cac:JurisdictionRegionAddress">
											<cac:JurisdictionRegionAddress>
												<xsl:sequence select="(./@node(), ./node())"/>
											</cac:JurisdictionRegionAddress>
										</xsl:for-each>
									</cac:TaxScheme>
								</cac:TaxCategory>
							</cac:TaxSubtotal>
						</xsl:for-each>
					</cac:TaxTotal>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var359_Invoice/cac:WithholdingTaxTotal">
				<cac:WithholdingTaxTotal>
					<xsl:sequence select="(./@node(), ./node())"/>
				</cac:WithholdingTaxTotal>
			</xsl:for-each>
			<cac:LegalMonetaryTotal>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:LineExtensionAmount">
					<cbc:LineExtensionAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:LineExtensionAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:TaxExclusiveAmount">
					<cbc:TaxExclusiveAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:TaxExclusiveAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice">
					<xsl:variable name="var246_cur" as="node()" select="."/>
					<xsl:for-each select="cac:LegalMonetaryTotal/cbc:TaxExclusiveAmount">
						<xsl:variable name="var245_cur" as="node()" select="."/>
						<xsl:for-each select="$var246_cur/cac:TaxTotal">
							<cbc:TaxInclusiveAmount>
								<xsl:for-each select="$var245_cur/@currencyCodeListVersionID">
									<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:attribute name="currencyID" namespace="" select="fn:string($var245_cur/@currencyID)"/>
								<xsl:sequence select="xs:string((xs:decimal(fn:string($var245_cur)) + xs:decimal(fn:string(cbc:TaxAmount))))"/>
							</cbc:TaxInclusiveAmount>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:AllowanceTotalAmount">
					<cbc:AllowanceTotalAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:AllowanceTotalAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:ChargeTotalAmount">
					<cbc:ChargeTotalAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:ChargeTotalAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:PrepaidAmount">
					<cbc:PrepaidAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:PrepaidAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:PayableRoundingAmount">
					<cbc:PayableRoundingAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:PayableRoundingAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice">
					<xsl:variable name="var247_PayableAmount" as="node()" select="cac:LegalMonetaryTotal/cbc:PayableAmount"/>
					<cbc:PayableAmount>
						<xsl:sequence select="($var247_PayableAmount/@node(), $var247_PayableAmount/node())"/>
					</cbc:PayableAmount>
				</xsl:for-each>
				<xsl:for-each select="$var359_Invoice/cac:LegalMonetaryTotal/cbc:PayableAlternativeAmount">
					<cbc:PayableAlternativeAmount>
						<xsl:sequence select="(./@node(), ./node())"/>
					</cbc:PayableAlternativeAmount>
				</xsl:for-each>
			</cac:LegalMonetaryTotal>
			<xsl:for-each select="$var359_Invoice/cac:InvoiceLine">
				<xsl:variable name="var358_AccountingCost" as="node()?" select="cbc:AccountingCost"/>
				<cac:InvoiceLine>
					<xsl:variable name="var248_ID" as="node()" select="cbc:ID"/>
					<cbc:ID>
						<xsl:sequence select="($var248_ID/@node(), $var248_ID/node())"/>
					</cbc:ID>
					<xsl:for-each select="cbc:UUID">
						<cbc:UUID>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:UUID>
					</xsl:for-each>
					<xsl:variable name="var251_resultof_filter" as="node()*">
						<xsl:for-each select="cbc:Note">
							<xsl:variable name="var250_cur_as_string" as="xs:string" select="fn:string(.)"/>
							<xsl:variable name="var249_test_resultof_greater" as="xs:string">
								<xsl:choose>
									<xsl:when test="(fn:string-length(fn:normalize-space($var250_cur_as_string)) &gt; xs:decimal('0'))">
										<xsl:sequence select="$var250_cur_as_string"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="(fn:string-length($var249_test_resultof_greater) &gt; xs:decimal('0'))">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var251_resultof_filter">
						<xsl:variable name="var252_create_Note" as="node()">
							<Note xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Note>
						</xsl:variable>
						<cbc:Note>
							<xsl:for-each select="$var252_create_Note/@languageID">
								<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="$var252_create_Note/@languageLocaleID">
								<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:sequence select="fn:string($var252_create_Note)"/>
						</cbc:Note>
					</xsl:for-each>
					<xsl:for-each select="cbc:InvoicedQuantity">
						<cbc:InvoicedQuantity>
							<xsl:for-each select="@unitCode">
								<xsl:attribute name="unitCode" namespace="">
									<xsl:call-template name="vmf:vmf9_inputtoresult">
										<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
									</xsl:call-template>
								</xsl:attribute>
							</xsl:for-each>
							<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
						</cbc:InvoicedQuantity>
					</xsl:for-each>
					<xsl:variable name="var255_LineExtensionAmount" as="node()" select="cbc:LineExtensionAmount"/>
					<cbc:LineExtensionAmount>
						<xsl:attribute name="currencyID" namespace="" select="fn:string($var255_LineExtensionAmount/@currencyID)"/>
						<xsl:variable name="var253_resultof_firstCharacter" as="xs:string">
							<xsl:call-template name="core:firstCharacter">
								<xsl:with-param name="value" select="'.'" as="xs:string"/>
								<xsl:with-param name="default" select="'.'" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var254_resultof_firstCharacter" as="xs:string">
							<xsl:call-template name="core:firstCharacter">
								<xsl:with-param name="value" select="','" as="xs:string"/>
								<xsl:with-param name="default" select="','" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:sequence select="xs:string(xs:decimal(fn:translate(format-number(xs:decimal(fn:string($var255_LineExtensionAmount)), '####.00'), '.,', fn:concat($var253_resultof_firstCharacter, $var254_resultof_firstCharacter))))"/>
					</cbc:LineExtensionAmount>
					<xsl:for-each select="cbc:TaxPointDate">
						<cbc:TaxPointDate>
							<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
						</cbc:TaxPointDate>
					</xsl:for-each>
					<xsl:for-each select="cbc:AccountingCostCode">
						<cbc:AccountingCostCode>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:AccountingCostCode>
					</xsl:for-each>
					<xsl:variable name="var256_test_resultof_exists" as="xs:string?">
						<xsl:choose>
							<xsl:when test="fn:exists($var358_AccountingCost)">
								<xsl:for-each select="$var358_AccountingCost">
									<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
								</xsl:for-each>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="''"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:for-each select="($var256_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
						<xsl:for-each select="$var358_AccountingCost">
							<cbc:AccountingCost>
								<xsl:sequence select="fn:string(.)"/>
							</cbc:AccountingCost>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="cbc:PaymentPurposeCode">
						<cbc:PaymentPurposeCode>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cbc:PaymentPurposeCode>
					</xsl:for-each>
					<xsl:for-each select="cbc:FreeOfChargeIndicator">
						<cbc:FreeOfChargeIndicator>
							<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
						</cbc:FreeOfChargeIndicator>
					</xsl:for-each>
					<xsl:for-each select="cac:InvoicePeriod">
						<cac:InvoicePeriod>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:InvoicePeriod>
					</xsl:for-each>
					<xsl:for-each select="(./cac:OrderLineReference)[(fn:string-length(fn:normalize-space(fn:string(cbc:LineID))) &gt; xs:decimal('0'))]">
						<xsl:variable name="var257_create_OrderLineReference" as="node()">
							<OrderLineReference xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
								<xsl:sequence select="(./@node(), ./node())"/>
							</OrderLineReference>
						</xsl:variable>
						<cac:OrderLineReference>
							<xsl:sequence select="($var257_create_OrderLineReference/@node(), $var257_create_OrderLineReference/node())"/>
						</cac:OrderLineReference>
					</xsl:for-each>
					<xsl:for-each select="cac:DespatchLineReference">
						<cac:DespatchLineReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DespatchLineReference>
					</xsl:for-each>
					<xsl:for-each select="cac:ReceiptLineReference">
						<cac:ReceiptLineReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:ReceiptLineReference>
					</xsl:for-each>
					<xsl:for-each select="cac:BillingReference">
						<cac:BillingReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:BillingReference>
					</xsl:for-each>
					<xsl:for-each select="cac:DocumentReference">
						<cac:DocumentReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:DocumentReference>
					</xsl:for-each>
					<xsl:for-each select="cac:PricingReference">
						<cac:PricingReference>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PricingReference>
					</xsl:for-each>
					<xsl:for-each select="cac:OriginatorParty">
						<cac:OriginatorParty>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:OriginatorParty>
					</xsl:for-each>
					<xsl:for-each select="cac:Delivery">
						<cac:Delivery>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ID>
							</xsl:for-each>
							<xsl:for-each select="cbc:Quantity">
								<cbc:Quantity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:Quantity>
							</xsl:for-each>
							<xsl:for-each select="cbc:MinimumQuantity">
								<cbc:MinimumQuantity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:MinimumQuantity>
							</xsl:for-each>
							<xsl:for-each select="cbc:MaximumQuantity">
								<cbc:MaximumQuantity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:MaximumQuantity>
							</xsl:for-each>
							<xsl:for-each select="cbc:ActualDeliveryDate">
								<cbc:ActualDeliveryDate>
									<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
								</cbc:ActualDeliveryDate>
							</xsl:for-each>
							<xsl:for-each select="cbc:ActualDeliveryTime">
								<cbc:ActualDeliveryTime>
									<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
								</cbc:ActualDeliveryTime>
							</xsl:for-each>
							<xsl:for-each select="cbc:LatestDeliveryDate">
								<cbc:LatestDeliveryDate>
									<xsl:sequence select="xs:string(xs:date(fn:string(.)))"/>
								</cbc:LatestDeliveryDate>
							</xsl:for-each>
							<xsl:for-each select="cbc:LatestDeliveryTime">
								<cbc:LatestDeliveryTime>
									<xsl:sequence select="xs:string(xs:time(fn:string(.)))"/>
								</cbc:LatestDeliveryTime>
							</xsl:for-each>
							<xsl:for-each select="cbc:ReleaseID">
								<cbc:ReleaseID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ReleaseID>
							</xsl:for-each>
							<xsl:for-each select="cbc:TrackingID">
								<cbc:TrackingID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:TrackingID>
							</xsl:for-each>
							<xsl:for-each select="cac:DeliveryAddress">
								<cac:DeliveryAddress>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:DeliveryAddress>
							</xsl:for-each>
							<xsl:for-each select="cac:DeliveryLocation">
								<cac:DeliveryLocation>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:for-each select="@schemeName">
												<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeAgencyID">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeAgencyName">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeVersionID">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeDataURI">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeURI">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:Description">
										<cbc:Description>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Description>
									</xsl:for-each>
									<xsl:for-each select="cbc:Conditions">
										<cbc:Conditions>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Conditions>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:LocationTypeCode">
										<cbc:LocationTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:LocationTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:InformationURI">
										<cbc:InformationURI>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InformationURI>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="cac:ValidityPeriod">
										<cac:ValidityPeriod>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ValidityPeriod>
									</xsl:for-each>
									<xsl:for-each select="cac:Address">
										<xsl:variable name="var264_StreetName" as="node()?" select="cbc:StreetName"/>
										<xsl:variable name="var265_Country" as="node()?" select="cac:Country"/>
										<xsl:variable name="var266_AdditionalStreetName" as="node()?" select="cbc:AdditionalStreetName"/>
										<cac:Address>
											<xsl:for-each select="cbc:ID">
												<cbc:ID>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:ID>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressTypeCode">
												<cbc:AddressTypeCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AddressTypeCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:AddressFormatCode">
												<cbc:AddressFormatCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:AddressFormatCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Postbox">
												<cbc:Postbox>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Postbox>
											</xsl:for-each>
											<xsl:for-each select="cbc:Floor">
												<cbc:Floor>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Floor>
											</xsl:for-each>
											<xsl:for-each select="cbc:Room">
												<cbc:Room>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Room>
											</xsl:for-each>
											<xsl:variable name="var258_test_resultof_exists" as="xs:string?">
												<xsl:choose>
													<xsl:when test="fn:exists($var264_StreetName)">
														<xsl:for-each select="$var264_StreetName">
															<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
														</xsl:for-each>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="''"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:for-each select="($var258_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
												<xsl:for-each select="$var264_StreetName">
													<cbc:StreetName>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:StreetName>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:variable name="var259_test_resultof_exists" as="xs:string?">
												<xsl:choose>
													<xsl:when test="fn:exists($var266_AdditionalStreetName)">
														<xsl:for-each select="$var266_AdditionalStreetName">
															<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
														</xsl:for-each>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="''"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:for-each select="($var259_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
												<xsl:for-each select="$var266_AdditionalStreetName">
													<cbc:AdditionalStreetName>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:AdditionalStreetName>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="cbc:BlockName">
												<cbc:BlockName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BlockName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingName">
												<cbc:BuildingName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BuildingName>
											</xsl:for-each>
											<xsl:for-each select="cbc:BuildingNumber">
												<cbc:BuildingNumber>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:BuildingNumber>
											</xsl:for-each>
											<xsl:for-each select="cbc:InhouseMail">
												<cbc:InhouseMail>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:InhouseMail>
											</xsl:for-each>
											<xsl:for-each select="cbc:Department">
												<cbc:Department>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Department>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkAttention">
												<cbc:MarkAttention>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:MarkAttention>
											</xsl:for-each>
											<xsl:for-each select="cbc:MarkCare">
												<cbc:MarkCare>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:MarkCare>
											</xsl:for-each>
											<xsl:for-each select="cbc:PlotIdentification">
												<cbc:PlotIdentification>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:PlotIdentification>
											</xsl:for-each>
											<xsl:for-each select="cbc:CitySubdivisionName">
												<cbc:CitySubdivisionName>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CitySubdivisionName>
											</xsl:for-each>
											<xsl:for-each select="(./cbc:CityName)[(fn:string-length(fn:normalize-space(fn:string(.))) &gt; xs:decimal('0'))]">
												<xsl:variable name="var260_create_CityName" as="node()">
													<CityName xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
														<xsl:sequence select="(./@node(), ./node())"/>
													</CityName>
												</xsl:variable>
												<cbc:CityName>
													<xsl:sequence select="($var260_create_CityName/@node(), $var260_create_CityName/node())"/>
												</cbc:CityName>
											</xsl:for-each>
											<xsl:for-each select="(./cbc:PostalZone)[(fn:string-length(fn:normalize-space(fn:string(.))) &gt; xs:decimal('0'))]">
												<xsl:variable name="var261_create_PostalZone" as="node()">
													<PostalZone xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
														<xsl:sequence select="(./@node(), ./node())"/>
													</PostalZone>
												</xsl:variable>
												<cbc:PostalZone>
													<xsl:sequence select="($var261_create_PostalZone/@node(), $var261_create_PostalZone/node())"/>
												</cbc:PostalZone>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentity">
												<cbc:CountrySubentity>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CountrySubentity>
											</xsl:for-each>
											<xsl:for-each select="cbc:CountrySubentityCode">
												<cbc:CountrySubentityCode>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:CountrySubentityCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:Region">
												<cbc:Region>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:Region>
											</xsl:for-each>
											<xsl:for-each select="cbc:District">
												<cbc:District>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:District>
											</xsl:for-each>
											<xsl:for-each select="cbc:TimezoneOffset">
												<cbc:TimezoneOffset>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cbc:TimezoneOffset>
											</xsl:for-each>
											<xsl:for-each select="cac:AddressLine">
												<cac:AddressLine>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:AddressLine>
											</xsl:for-each>
											<xsl:variable name="var262_test_resultof_any" as="xs:string?">
												<xsl:choose>
													<xsl:when test="fn:exists(($var265_Country)[fn:exists(cbc:IdentificationCode)])">
														<xsl:for-each select="$var265_Country/cbc:IdentificationCode">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="''"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<cac:Country>
												<xsl:for-each select="$var262_test_resultof_any">
													<xsl:variable name="var263_test_resultof_greater" as="xs:string?">
														<xsl:choose>
															<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
																<xsl:for-each select="$var265_Country/cbc:IdentificationCode">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="'NO'"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:for-each select="$var263_test_resultof_greater">
														<cbc:IdentificationCode>
															<xsl:sequence select="."/>
														</cbc:IdentificationCode>
													</xsl:for-each>
												</xsl:for-each>
											</cac:Country>
											<xsl:for-each select="cac:LocationCoordinate">
												<cac:LocationCoordinate>
													<xsl:sequence select="(./@node(), ./node())"/>
												</cac:LocationCoordinate>
											</xsl:for-each>
										</cac:Address>
									</xsl:for-each>
									<xsl:for-each select="cac:SubsidiaryLocation">
										<cac:SubsidiaryLocation>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:SubsidiaryLocation>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:DeliveryLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:AlternativeDeliveryLocation">
								<cac:AlternativeDeliveryLocation>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:for-each select="@schemeID">
												<xsl:variable name="var267_resultof_vmf___inputtoresult" as="xs:string?">
													<xsl:call-template name="vmf:vmf10_inputtoresult">
														<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:for-each select="$var267_resultof_vmf___inputtoresult">
													<xsl:attribute name="schemeID" namespace="" select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="@schemeName">
												<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeAgencyID">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeAgencyName">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeVersionID">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeDataURI">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="@schemeURI">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="cbc:Description">
										<cbc:Description>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Description>
									</xsl:for-each>
									<xsl:for-each select="cbc:Conditions">
										<cbc:Conditions>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Conditions>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentity">
										<cbc:CountrySubentity>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentity>
									</xsl:for-each>
									<xsl:for-each select="cbc:CountrySubentityCode">
										<cbc:CountrySubentityCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CountrySubentityCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:LocationTypeCode">
										<cbc:LocationTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:LocationTypeCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:InformationURI">
										<cbc:InformationURI>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:InformationURI>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="cac:ValidityPeriod">
										<cac:ValidityPeriod>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:ValidityPeriod>
									</xsl:for-each>
									<xsl:for-each select="cac:Address">
										<cac:Address>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:Address>
									</xsl:for-each>
									<xsl:for-each select="cac:SubsidiaryLocation">
										<cac:SubsidiaryLocation>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:SubsidiaryLocation>
									</xsl:for-each>
									<xsl:for-each select="cac:LocationCoordinate">
										<cac:LocationCoordinate>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:LocationCoordinate>
									</xsl:for-each>
								</cac:AlternativeDeliveryLocation>
							</xsl:for-each>
							<xsl:for-each select="cac:RequestedDeliveryPeriod">
								<cac:RequestedDeliveryPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:RequestedDeliveryPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:PromisedDeliveryPeriod">
								<cac:PromisedDeliveryPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PromisedDeliveryPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:EstimatedDeliveryPeriod">
								<cac:EstimatedDeliveryPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:EstimatedDeliveryPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:CarrierParty">
								<cac:CarrierParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:CarrierParty>
							</xsl:for-each>
							<xsl:for-each select="cac:DeliveryParty">
								<cac:DeliveryParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:DeliveryParty>
							</xsl:for-each>
							<xsl:for-each select="cac:NotifyParty">
								<cac:NotifyParty>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:NotifyParty>
							</xsl:for-each>
							<xsl:for-each select="cac:Despatch">
								<cac:Despatch>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Despatch>
							</xsl:for-each>
							<xsl:for-each select="cac:DeliveryTerms">
								<cac:DeliveryTerms>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:DeliveryTerms>
							</xsl:for-each>
							<xsl:for-each select="cac:MinimumDeliveryUnit">
								<cac:MinimumDeliveryUnit>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:MinimumDeliveryUnit>
							</xsl:for-each>
							<xsl:for-each select="cac:MaximumDeliveryUnit">
								<cac:MaximumDeliveryUnit>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:MaximumDeliveryUnit>
							</xsl:for-each>
							<xsl:for-each select="cac:Shipment">
								<cac:Shipment>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:Shipment>
							</xsl:for-each>
						</cac:Delivery>
					</xsl:for-each>
					<xsl:for-each select="cac:PaymentTerms">
						<cac:PaymentTerms>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:PaymentTerms>
					</xsl:for-each>
					<xsl:for-each select="cac:AllowanceCharge">
						<xsl:variable name="var301_BaseAmount" as="node()?" select="cbc:BaseAmount"/>
						<cac:AllowanceCharge>
							<xsl:for-each select="cbc:ID">
								<cbc:ID>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:ID>
							</xsl:for-each>
							<cbc:ChargeIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(cbc:ChargeIndicator)))"/>
							</cbc:ChargeIndicator>
							<xsl:for-each select="cbc:AllowanceChargeReasonCode">
								<cbc:AllowanceChargeReasonCode>
									<xsl:for-each select="@listAgencyID">
										<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@listAgencyName">
										<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@listName">
										<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@listVersionID">
										<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@name">
										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@languageID">
										<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@listURI">
										<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:for-each select="@listSchemeURI">
										<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
									</xsl:for-each>
									<xsl:sequence select="fn:string(.)"/>
								</cbc:AllowanceChargeReasonCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:AllowanceChargeReason">
								<cbc:AllowanceChargeReason>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AllowanceChargeReason>
							</xsl:for-each>
							<xsl:variable name="var270_resultof_filter" as="node()?">
								<xsl:for-each select="cbc:MultiplierFactorNumeric">
									<xsl:variable name="var269_cur" as="node()" select="."/>
									<xsl:variable name="var268_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var301_BaseAmount)">
												<xsl:for-each select="$var301_BaseAmount">
													<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:if test="fn:exists(($var268_test_resultof_exists)[fn:exists((((fn:string-length(.) &gt; xs:decimal('0')), (xs:decimal(fn:string($var269_cur)) != xs:decimal('0'))))[.])])">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var270_resultof_filter">
								<xsl:variable name="var271_create_MultiplierFactorNumeric" as="node()">
									<MultiplierFactorNumeric xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
										<xsl:sequence select="(./@node(), ./node())"/>
									</MultiplierFactorNumeric>
								</xsl:variable>
								<cbc:MultiplierFactorNumeric>
									<xsl:sequence select="($var271_create_MultiplierFactorNumeric/@node(), $var271_create_MultiplierFactorNumeric/node())"/>
								</cbc:MultiplierFactorNumeric>
							</xsl:for-each>
							<xsl:for-each select="cbc:PrepaidIndicator">
								<cbc:PrepaidIndicator>
									<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
								</cbc:PrepaidIndicator>
							</xsl:for-each>
							<xsl:for-each select="cbc:SequenceNumeric">
								<cbc:SequenceNumeric>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:SequenceNumeric>
							</xsl:for-each>
							<xsl:variable name="var272_Amount" as="node()" select="cbc:Amount"/>
							<cbc:Amount>
								<xsl:sequence select="($var272_Amount/@node(), $var272_Amount/node())"/>
							</cbc:Amount>
							<xsl:for-each select="$var301_BaseAmount">
								<cbc:BaseAmount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:BaseAmount>
							</xsl:for-each>
							<xsl:for-each select="cbc:AccountingCostCode">
								<cbc:AccountingCostCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AccountingCostCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:AccountingCost">
								<cbc:AccountingCost>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:AccountingCost>
							</xsl:for-each>
							<xsl:for-each select="cbc:PerUnitAmount">
								<cbc:PerUnitAmount>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PerUnitAmount>
							</xsl:for-each>
							<xsl:for-each select="cac:TaxCategory">
								<xsl:variable name="var300_cur" as="node()" select="."/>
								<xsl:variable name="var297_TaxExemptionReasonCode" as="node()?" select="cbc:TaxExemptionReasonCode"/>
								<xsl:variable name="var298_Percent" as="node()?" select="cbc:Percent"/>
								<xsl:variable name="var299_ID" as="node()?" select="cbc:ID"/>
								<cac:TaxCategory>
									<xsl:for-each select="$var299_ID">
										<xsl:variable name="var275_cur" as="node()" select="."/>
										<xsl:variable name="var274_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:variable name="var273_test_resultof_any" as="xs:string?">
											<xsl:choose>
												<xsl:when test="fn:exists(((($var274_cur_as_string = 'H'), ($var274_cur_as_string = 'R'), ($var274_cur_as_string = 'AA')))[.])">
													<xsl:sequence select="'S'"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="$var298_Percent">
														<xsl:choose>
															<xsl:when test="(($var274_cur_as_string = 'S') and (xs:decimal(fn:string(.)) = xs:decimal('0')))">
																<xsl:sequence select="'Z'"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="$var274_cur_as_string"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="$var273_test_resultof_any">
											<cbc:ID>
												<xsl:for-each select="$var275_cur/@schemeID">
													<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var275_cur/@schemeName">
													<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var275_cur/@schemeAgencyID">
													<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var275_cur/@schemeAgencyName">
													<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var275_cur/@schemeVersionID">
													<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var275_cur/@schemeDataURI">
													<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var275_cur/@schemeURI">
													<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:sequence select="."/>
											</cbc:ID>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="$var298_Percent">
										<cbc:Percent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Percent>
									</xsl:for-each>
									<xsl:for-each select="cbc:BaseUnitMeasure">
										<cbc:BaseUnitMeasure>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:BaseUnitMeasure>
									</xsl:for-each>
									<xsl:for-each select="cbc:PerUnitAmount">
										<cbc:PerUnitAmount>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:PerUnitAmount>
									</xsl:for-each>
									<xsl:variable name="var276_test_resultof_exists" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists($var297_TaxExemptionReasonCode)">
												<xsl:for-each select="$var297_TaxExemptionReasonCode">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</xsl:when>
											<xsl:otherwise>
												<xsl:sequence select="''"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="var278_filter_of_filter" as="node()?">
										<xsl:for-each select="($var276_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
											<xsl:for-each select="$var299_ID">
												<xsl:variable name="var277_cur_as_string" as="xs:string" select="fn:string(.)"/>
												<xsl:if test="(($var277_cur_as_string != 'Z') and ($var277_cur_as_string != 'S'))">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var284_resultof_filter" as="node()?">
										<xsl:for-each select="$var278_filter_of_filter">
											<xsl:variable name="var283_resultof_filter" as="node()*">
												<xsl:for-each select="$var297_TaxExemptionReasonCode">
													<xsl:variable name="var282_cur" as="node()" select="."/>
													<xsl:variable name="var281_resultof_filter" as="node()*">
														<xsl:for-each select="$var300_cur/cbc:TaxExemptionReason">
															<xsl:variable name="var280_cur_as_string" as="xs:string" select="fn:string($var282_cur)"/>
															<xsl:variable name="var279_resultof_vmf___inputtoresult" as="xs:string">
																<xsl:call-template name="vmf:vmf11_inputtoresult">
																	<xsl:with-param name="input" select="$var280_cur_as_string" as="xs:string"/>
																</xsl:call-template>
															</xsl:variable>
															<xsl:if test="fn:exists(((($var279_resultof_vmf___inputtoresult = 'TRUE'), ($var280_cur_as_string != fn:string(.))))[.])">
																<xsl:sequence select="."/>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:if test="fn:exists($var281_resultof_filter)">
														<xsl:sequence select="."/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:if test="fn:exists($var283_resultof_filter)">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var284_resultof_filter">
										<xsl:variable name="var289_map_of_TaxExemptionReasonCo" as="xs:string*">
											<xsl:for-each select="$var297_TaxExemptionReasonCode">
												<xsl:variable name="var288_cur" as="node()" select="."/>
												<xsl:variable name="var287_resultof_filter" as="node()*">
													<xsl:for-each select="$var300_cur/cbc:TaxExemptionReason">
														<xsl:variable name="var286_cur_as_string" as="xs:string" select="fn:string($var288_cur)"/>
														<xsl:variable name="var285_resultof_vmf___inputtoresult" as="xs:string">
															<xsl:call-template name="vmf:vmf11_inputtoresult">
																<xsl:with-param name="input" select="$var286_cur_as_string" as="xs:string"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="fn:exists(((($var285_resultof_vmf___inputtoresult = 'TRUE'), ($var286_cur_as_string != fn:string(.))))[.])">
															<xsl:sequence select="."/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:for-each select="$var287_resultof_filter">
													<xsl:sequence select="fn:string($var288_cur)"/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:variable>
										<cbc:TaxExemptionReasonCode>
											<xsl:sequence select="xs:normalizedString(fn:string-join(for $x in $var289_map_of_TaxExemptionReasonCo return xs:string($x), ' '))"/>
										</cbc:TaxExemptionReasonCode>
									</xsl:for-each>
									<xsl:for-each select="$var299_ID">
										<xsl:variable name="var295_cur" as="node()" select="."/>
										<xsl:for-each select="$var300_cur/cbc:TaxExemptionReason">
											<xsl:variable name="var294_cur" as="node()" select="."/>
											<xsl:variable name="var292_cur_as_string" as="xs:string" select="fn:string(.)"/>
											<xsl:variable name="var293_cur_as_string" as="xs:string" select="fn:string($var295_cur)"/>
											<xsl:variable name="var290_test_resultof_logical_and" as="xs:string?">
												<xsl:choose>
													<xsl:when test="(($var293_cur_as_string = 'E') and (fn:string-length($var292_cur_as_string) = xs:decimal('0')))">
														<xsl:sequence select="'Ingen moms'"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:if test="(($var293_cur_as_string != 'Z') and ($var293_cur_as_string != 'S'))">
															<xsl:sequence select="$var292_cur_as_string"/>
														</xsl:if>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:for-each select="$var290_test_resultof_logical_and">
												<xsl:variable name="var291_resultof_logical_and" as="xs:boolean" select="(($var293_cur_as_string != 'Z') and ($var293_cur_as_string != 'S'))"/>
												<cbc:TaxExemptionReason>
													<xsl:if test="$var291_resultof_logical_and">
														<xsl:for-each select="$var294_cur/@languageID">
															<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:if>
													<xsl:if test="$var291_resultof_logical_and">
														<xsl:for-each select="$var294_cur/@languageLocaleID">
															<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
													</xsl:if>
													<xsl:sequence select="."/>
												</cbc:TaxExemptionReason>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="cbc:TierRange">
										<cbc:TierRange>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRange>
									</xsl:for-each>
									<xsl:for-each select="cbc:TierRatePercent">
										<cbc:TierRatePercent>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TierRatePercent>
									</xsl:for-each>
									<xsl:variable name="var296_TaxScheme" as="node()" select="cac:TaxScheme"/>
									<cac:TaxScheme>
										<xsl:sequence select="($var296_TaxScheme/@node(), $var296_TaxScheme/node())"/>
									</cac:TaxScheme>
								</cac:TaxCategory>
							</xsl:for-each>
							<xsl:for-each select="cac:TaxTotal">
								<cac:TaxTotal>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:TaxTotal>
							</xsl:for-each>
							<xsl:for-each select="cac:PaymentMeans">
								<cac:PaymentMeans>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PaymentMeans>
							</xsl:for-each>
						</cac:AllowanceCharge>
					</xsl:for-each>
					<xsl:for-each select="cac:WithholdingTaxTotal">
						<cac:WithholdingTaxTotal>
							<xsl:sequence select="(./@node(), ./node())"/>
						</cac:WithholdingTaxTotal>
					</xsl:for-each>
					<xsl:variable name="var347_Item" as="node()" select="cac:Item"/>
					<xsl:variable name="var345_Name" as="node()?" select="$var347_Item/cbc:Name"/>
					<xsl:variable name="var346_Description" as="node()*" select="$var347_Item/cbc:Description"/>
					<xsl:variable name="var344_resultof_exists" as="xs:boolean" select="fn:exists($var346_Description)"/>
					<cac:Item>
						<xsl:variable name="var302_test_exists" as="xs:string*">
							<xsl:choose>
								<xsl:when test="$var344_resultof_exists">
									<xsl:for-each select="$var346_Description">
										<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
									</xsl:for-each>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="''"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:if test="(fn:string-length(xs:string(fn:string-join(for $x in $var302_test_exists return xs:string($x), ' '))) &gt; xs:decimal('0'))">
							<xsl:if test="$var344_resultof_exists">
								<xsl:variable name="var303_cur_of_Description" as="xs:string*">
									<xsl:for-each select="$var346_Description">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:variable name="var304_resultof_last" as="xs:string" select="xs:string(fn:string-join(for $x in $var303_cur_of_Description return xs:string($x), ' '))"/>
								<cbc:Description>
									<xsl:sequence select="$var304_resultof_last"/>
								</cbc:Description>
							</xsl:if>
						</xsl:if>
						<xsl:for-each select="$var347_Item/cbc:PackQuantity">
							<cbc:PackQuantity>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:PackQuantity>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:PackSizeNumeric">
							<cbc:PackSizeNumeric>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:PackSizeNumeric>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:CatalogueIndicator">
							<cbc:CatalogueIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:CatalogueIndicator>
						</xsl:for-each>
						<xsl:variable name="var305_test_resultof_exists" as="xs:string?">
							<xsl:choose>
								<xsl:when test="fn:exists($var345_Name)">
									<xsl:for-each select="$var345_Name">
										<xsl:sequence select="fn:normalize-space(fn:string(.))"/>
									</xsl:for-each>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="''"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:for-each select="$var305_test_resultof_exists">
							<xsl:variable name="var306_test_resultof_greater" as="xs:string?">
								<xsl:choose>
									<xsl:when test="(fn:string-length(.) &gt; xs:decimal('0'))">
										<xsl:for-each select="$var345_Name">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="'.'"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:for-each select="$var306_test_resultof_greater">
								<cbc:Name>
									<xsl:sequence select="."/>
								</cbc:Name>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:HazardousRiskIndicator">
							<cbc:HazardousRiskIndicator>
								<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
							</cbc:HazardousRiskIndicator>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:AdditionalInformation">
							<cbc:AdditionalInformation>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:AdditionalInformation>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:Keyword">
							<cbc:Keyword>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:Keyword>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:BrandName">
							<cbc:BrandName>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:BrandName>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cbc:ModelName">
							<cbc:ModelName>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cbc:ModelName>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:BuyersItemIdentification">
							<cac:BuyersItemIdentification>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:BuyersItemIdentification>
						</xsl:for-each>
						<xsl:for-each select="($var347_Item/cac:SellersItemIdentification)[(fn:string-length(fn:normalize-space(fn:string(cbc:ID))) &gt; xs:decimal('0'))]">
							<xsl:variable name="var307_create_SellersItemIdentification" as="node()">
								<SellersItemIdentification xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">
									<xsl:sequence select="(./@node(), ./node())"/>
								</SellersItemIdentification>
							</xsl:variable>
							<cac:SellersItemIdentification>
								<xsl:for-each select="$var307_create_SellersItemIdentification/cbc:ID">
									<cbc:ID>
										<xsl:for-each select="@schemeID">
											<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@schemeName">
											<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@schemeAgencyID">
											<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@schemeAgencyName">
											<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@schemeVersionID">
											<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@schemeDataURI">
											<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:for-each select="@schemeURI">
											<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ID>
								</xsl:for-each>
								<xsl:for-each select="$var307_create_SellersItemIdentification/cbc:ExtendedID">
									<cbc:ExtendedID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ExtendedID>
								</xsl:for-each>
								<xsl:for-each select="$var307_create_SellersItemIdentification/cbc:BarcodeSymbologyID">
									<cbc:BarcodeSymbologyID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BarcodeSymbologyID>
								</xsl:for-each>
								<xsl:for-each select="$var307_create_SellersItemIdentification/cac:PhysicalAttribute">
									<cac:PhysicalAttribute>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:PhysicalAttribute>
								</xsl:for-each>
								<xsl:for-each select="$var307_create_SellersItemIdentification/cac:MeasurementDimension">
									<cac:MeasurementDimension>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:MeasurementDimension>
								</xsl:for-each>
								<xsl:for-each select="$var307_create_SellersItemIdentification/cac:IssuerParty">
									<cac:IssuerParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:IssuerParty>
								</xsl:for-each>
							</cac:SellersItemIdentification>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:ManufacturersItemIdentification">
							<cac:ManufacturersItemIdentification>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ManufacturersItemIdentification>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:StandardItemIdentification">
							<cac:StandardItemIdentification>
								<xsl:variable name="var309_ID" as="node()" select="cbc:ID"/>
								<cbc:ID>
									<xsl:for-each select="$var309_ID/@schemeID">
										<xsl:variable name="var308_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:attribute name="schemeID" namespace="">
											<xsl:choose>
												<xsl:when test="($var308_cur_as_string = 'GTIN')">
													<xsl:sequence select="'0160'"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="$var308_cur_as_string"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
									</xsl:for-each>
									<xsl:sequence select="fn:string($var309_ID)"/>
								</cbc:ID>
								<xsl:for-each select="cbc:ExtendedID">
									<cbc:ExtendedID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:ExtendedID>
								</xsl:for-each>
								<xsl:for-each select="cbc:BarcodeSymbologyID">
									<cbc:BarcodeSymbologyID>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BarcodeSymbologyID>
								</xsl:for-each>
								<xsl:for-each select="cac:PhysicalAttribute">
									<cac:PhysicalAttribute>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:PhysicalAttribute>
								</xsl:for-each>
								<xsl:for-each select="cac:MeasurementDimension">
									<cac:MeasurementDimension>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:MeasurementDimension>
								</xsl:for-each>
								<xsl:for-each select="cac:IssuerParty">
									<cac:IssuerParty>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cac:IssuerParty>
								</xsl:for-each>
							</cac:StandardItemIdentification>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:CatalogueItemIdentification">
							<cac:CatalogueItemIdentification>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:CatalogueItemIdentification>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:AdditionalItemIdentification">
							<cac:AdditionalItemIdentification>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:AdditionalItemIdentification>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:CatalogueDocumentReference">
							<cac:CatalogueDocumentReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:CatalogueDocumentReference>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:ItemSpecificationDocumentReference">
							<cac:ItemSpecificationDocumentReference>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:ItemSpecificationDocumentReference>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:OriginCountry">
							<cac:OriginCountry>
								<xsl:for-each select="cbc:IdentificationCode">
									<cbc:IdentificationCode>
										<xsl:for-each select="@listAgencyID">
											<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listAgencyName">
											<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listName">
											<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listVersionID">
											<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@name">
											<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@languageID">
											<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listURI">
											<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:for-each select="@listSchemeURI">
											<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:IdentificationCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
							</cac:OriginCountry>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:CommodityClassification">
							<cac:CommodityClassification>
								<xsl:for-each select="cbc:NatureCode">
									<cbc:NatureCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:NatureCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:CargoTypeCode">
									<cbc:CargoTypeCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CargoTypeCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:CommodityCode">
									<cbc:CommodityCode>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:CommodityCode>
								</xsl:for-each>
								<xsl:for-each select="cbc:ItemClassificationCode">
									<xsl:variable name="var316_listID" as="node()?" select="@listID"/>
									<xsl:variable name="var314_vmf___inputtoresult_of_filename" as="xs:string?">
										<xsl:for-each select="$var316_listID">
											<xsl:call-template name="vmf:vmf12_inputtoresult">
												<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
											</xsl:call-template>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var315_resultof_first_items" as="xs:string*" select="($var314_vmf___inputtoresult_of_filename)[(fn:position() &lt;= xs:integer('1'))]"/>
									<cbc:ItemClassificationCode>
										<xsl:variable name="var311_test_resultof_exists" as="xs:string*">
											<xsl:choose>
												<xsl:when test="fn:exists($var315_resultof_first_items)">
													<xsl:sequence select="$var315_resultof_first_items"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="''"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var312_resultof_last" as="xs:string" select="xs:string(fn:string-join(for $x in $var311_test_resultof_exists return xs:string($x), ' '))"/>
										<xsl:variable name="var310_test_resultof_greater" as="xs:string*">
											<xsl:choose>
												<xsl:when test="(fn:string-length($var312_resultof_last) &gt; xs:decimal('0'))">
													<xsl:sequence select="$var315_resultof_first_items"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:for-each select="$var316_listID">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var313_result" as="xs:string?">
											<xsl:if test="fn:exists($var310_test_resultof_greater)">
												<xsl:sequence select="xs:string(fn:string-join(for $x in $var310_test_resultof_greater return xs:string($x), ' '))"/>
											</xsl:if>
										</xsl:variable>
										<xsl:for-each select="$var313_result">
											<xsl:attribute name="listID" namespace="" select="."/>
										</xsl:for-each>
										<xsl:for-each select="@listAgencyID">
											<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listAgencyName">
											<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listName">
											<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listVersionID">
											<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@name">
											<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@languageID">
											<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@listURI">
											<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:for-each select="@listSchemeURI">
											<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
										</xsl:for-each>
										<xsl:sequence select="fn:string(.)"/>
									</cbc:ItemClassificationCode>
								</xsl:for-each>
							</cac:CommodityClassification>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:ClassifiedTaxCategory">
							<xsl:variable name="var340_Percent" as="node()?" select="cbc:Percent"/>
							<xsl:variable name="var341_ID" as="node()?" select="cbc:ID"/>
							<xsl:variable name="var342_TaxExemptionReason" as="node()*" select="cbc:TaxExemptionReason"/>
							<xsl:variable name="var343_TaxExemptionReasonCode" as="node()?" select="cbc:TaxExemptionReasonCode"/>
							<cac:ClassifiedTaxCategory>
								<xsl:for-each select="$var341_ID">
									<xsl:variable name="var320_cur" as="node()" select="."/>
									<xsl:variable name="var319_cur_as_string" as="xs:string" select="fn:string(.)"/>
									<xsl:variable name="var318_test_resultof_any" as="xs:string?">
										<xsl:choose>
											<xsl:when test="fn:exists(((($var319_cur_as_string = 'H'), ($var319_cur_as_string = 'R'), ($var319_cur_as_string = 'AA')))[.])">
												<xsl:sequence select="'S'"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:for-each select="$var340_Percent">
													<xsl:variable name="var317_resultof_equal" as="xs:boolean" select="(xs:decimal(fn:string(.)) = xs:decimal('0'))"/>
													<xsl:choose>
														<xsl:when test="(($var319_cur_as_string = 'S') and $var317_resultof_equal)">
															<xsl:sequence select="'E'"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:choose>
																<xsl:when test="(($var319_cur_as_string = '') and $var317_resultof_equal)">
																	<xsl:sequence select="'E'"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:sequence select="$var319_cur_as_string"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:for-each>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:for-each select="$var318_test_resultof_any">
										<cbc:ID>
											<xsl:for-each select="$var320_cur/@schemeID">
												<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var320_cur/@schemeName">
												<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var320_cur/@schemeAgencyID">
												<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var320_cur/@schemeAgencyName">
												<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var320_cur/@schemeVersionID">
												<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="$var320_cur/@schemeDataURI">
												<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="$var320_cur/@schemeURI">
												<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="."/>
										</cbc:ID>
									</xsl:for-each>
								</xsl:for-each>
								<xsl:for-each select="cbc:Name">
									<cbc:Name>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Name>
								</xsl:for-each>
								<xsl:for-each select="$var340_Percent">
									<cbc:Percent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:Percent>
								</xsl:for-each>
								<xsl:for-each select="cbc:BaseUnitMeasure">
									<cbc:BaseUnitMeasure>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:BaseUnitMeasure>
								</xsl:for-each>
								<xsl:for-each select="cbc:PerUnitAmount">
									<cbc:PerUnitAmount>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:PerUnitAmount>
								</xsl:for-each>
								<xsl:variable name="var321_test_resultof_exists" as="xs:string?">
									<xsl:choose>
										<xsl:when test="fn:exists($var343_TaxExemptionReasonCode)">
											<xsl:for-each select="$var343_TaxExemptionReasonCode">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="''"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var327_resultof_filter" as="xs:string?">
									<xsl:for-each select="($var321_test_resultof_exists)[(fn:string-length(.) &gt; xs:decimal('0'))]">
										<xsl:variable name="var326_resultof_filter" as="node()*">
											<xsl:for-each select="$var343_TaxExemptionReasonCode">
												<xsl:variable name="var325_cur" as="node()" select="."/>
												<xsl:variable name="var324_resultof_filter" as="node()*">
													<xsl:for-each select="$var342_TaxExemptionReason">
														<xsl:variable name="var323_cur_as_string" as="xs:string" select="fn:string($var325_cur)"/>
														<xsl:variable name="var322_resultof_vmf___inputtoresult" as="xs:string">
															<xsl:call-template name="vmf:vmf13_inputtoresult">
																<xsl:with-param name="input" select="$var323_cur_as_string" as="xs:string"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="fn:exists(((($var322_resultof_vmf___inputtoresult = 'TRUE'), ($var323_cur_as_string != fn:string(.))))[.])">
															<xsl:sequence select="."/>
														</xsl:if>
													</xsl:for-each>
												</xsl:variable>
												<xsl:if test="fn:exists($var324_resultof_filter)">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:if test="fn:exists($var326_resultof_filter)">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var327_resultof_filter">
									<xsl:variable name="var332_map_of_TaxExemptionReasonCo" as="xs:string*">
										<xsl:for-each select="$var343_TaxExemptionReasonCode">
											<xsl:variable name="var331_cur" as="node()" select="."/>
											<xsl:variable name="var330_resultof_filter" as="node()*">
												<xsl:for-each select="$var342_TaxExemptionReason">
													<xsl:variable name="var329_cur_as_string" as="xs:string" select="fn:string($var331_cur)"/>
													<xsl:variable name="var328_resultof_vmf___inputtoresult" as="xs:string">
														<xsl:call-template name="vmf:vmf13_inputtoresult">
															<xsl:with-param name="input" select="$var329_cur_as_string" as="xs:string"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:if test="fn:exists(((($var328_resultof_vmf___inputtoresult = 'TRUE'), ($var329_cur_as_string != fn:string(.))))[.])">
														<xsl:sequence select="."/>
													</xsl:if>
												</xsl:for-each>
											</xsl:variable>
											<xsl:for-each select="$var330_resultof_filter">
												<xsl:sequence select="fn:string($var331_cur)"/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:variable>
									<cbc:TaxExemptionReasonCode>
										<xsl:sequence select="xs:normalizedString(fn:string-join(for $x in $var332_map_of_TaxExemptionReasonCo return xs:string($x), ' '))"/>
									</cbc:TaxExemptionReasonCode>
								</xsl:for-each>
								<xsl:for-each select="$var342_TaxExemptionReason">
									<xsl:variable name="var338_cur" as="node()" select="."/>
									<xsl:for-each select="$var340_Percent">
										<xsl:variable name="var337_cur" as="node()" select="."/>
										<xsl:for-each select="$var341_ID">
											<xsl:variable name="var336_resultof_logical_and" as="xs:boolean" select="(((fn:string($var338_cur) = '') and (xs:decimal(fn:string($var337_cur)) = xs:decimal('0'))) and (fn:string(.) != 'Z'))"/>
											<cbc:TaxExemptionReason>
												<xsl:if test="fn:not($var336_resultof_logical_and)">
													<xsl:variable name="var333_create_TaxExemptionReason" as="node()">
														<TaxExemptionReason xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
															<xsl:sequence select="($var338_cur/@node(), $var338_cur/node())"/>
														</TaxExemptionReason>
													</xsl:variable>
													<xsl:for-each select="$var333_create_TaxExemptionReason/@languageID">
														<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:if>
												<xsl:if test="fn:not($var336_resultof_logical_and)">
													<xsl:variable name="var334_create_TaxExemptionReason" as="node()">
														<TaxExemptionReason xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
															<xsl:sequence select="($var338_cur/@node(), $var338_cur/node())"/>
														</TaxExemptionReason>
													</xsl:variable>
													<xsl:for-each select="$var334_create_TaxExemptionReason/@languageLocaleID">
														<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
												</xsl:if>
												<xsl:choose>
													<xsl:when test="$var336_resultof_logical_and">
														<xsl:sequence select="'Ingen moms'"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:variable name="var335_create_TaxExemptionReason" as="node()">
															<TaxExemptionReason xmlns="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
																<xsl:sequence select="($var338_cur/@node(), $var338_cur/node())"/>
															</TaxExemptionReason>
														</xsl:variable>
														<xsl:sequence select="fn:string($var335_create_TaxExemptionReason)"/>
													</xsl:otherwise>
												</xsl:choose>
											</cbc:TaxExemptionReason>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
								<xsl:for-each select="cbc:TierRange">
									<cbc:TierRange>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TierRange>
								</xsl:for-each>
								<xsl:for-each select="cbc:TierRatePercent">
									<cbc:TierRatePercent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</cbc:TierRatePercent>
								</xsl:for-each>
								<xsl:variable name="var339_TaxScheme" as="node()" select="cac:TaxScheme"/>
								<cac:TaxScheme>
									<xsl:for-each select="$var339_TaxScheme/cbc:ID">
										<cbc:ID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ID>
									</xsl:for-each>
									<xsl:for-each select="$var339_TaxScheme/cbc:Name">
										<cbc:Name>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:Name>
									</xsl:for-each>
									<xsl:for-each select="$var339_TaxScheme/cbc:TaxTypeCode">
										<cbc:TaxTypeCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:TaxTypeCode>
									</xsl:for-each>
									<xsl:for-each select="$var339_TaxScheme/cbc:CurrencyCode">
										<cbc:CurrencyCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:CurrencyCode>
									</xsl:for-each>
									<xsl:for-each select="$var339_TaxScheme/cac:JurisdictionRegionAddress">
										<cac:JurisdictionRegionAddress>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:JurisdictionRegionAddress>
									</xsl:for-each>
								</cac:TaxScheme>
							</cac:ClassifiedTaxCategory>
						</xsl:for-each>
						<xsl:for-each select="$var347_Item/cac:AdditionalItemProperty">
							<cac:AdditionalItemProperty>
								<xsl:sequence select="(./@node(), ./node())"/>
							</cac:AdditionalItemProperty>
						</xsl:for-each>
					</cac:Item>
					<xsl:for-each select="cac:Price">
						<xsl:variable name="var357_PriceAmount" as="node()" select="cbc:PriceAmount"/>
						<cac:Price>
							<cbc:PriceAmount>
								<xsl:sequence select="($var357_PriceAmount/@node(), $var357_PriceAmount/node())"/>
							</cbc:PriceAmount>
							<xsl:for-each select="cbc:BaseQuantity">
								<cbc:BaseQuantity>
									<xsl:variable name="var348_vmf___inputtoresult_of_unitCode" as="xs:string?">
										<xsl:for-each select="@unitCode">
											<xsl:call-template name="vmf:vmf14_inputtoresult">
												<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
											</xsl:call-template>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="($var348_vmf___inputtoresult_of_unitCode)[(fn:position() &lt;= xs:integer('1'))]">
										<xsl:attribute name="unitCode" namespace="" select="."/>
									</xsl:for-each>
									<xsl:for-each select="@unitCodeListID">
										<xsl:attribute name="unitCodeListID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@unitCodeListAgencyID">
										<xsl:attribute name="unitCodeListAgencyID" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@unitCodeListAgencyName">
										<xsl:attribute name="unitCodeListAgencyName" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
								</cbc:BaseQuantity>
							</xsl:for-each>
							<xsl:for-each select="cbc:PriceChangeReason">
								<cbc:PriceChangeReason>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PriceChangeReason>
							</xsl:for-each>
							<xsl:for-each select="cbc:PriceTypeCode">
								<cbc:PriceTypeCode>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PriceTypeCode>
							</xsl:for-each>
							<xsl:for-each select="cbc:PriceType">
								<cbc:PriceType>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:PriceType>
							</xsl:for-each>
							<xsl:for-each select="cbc:OrderableUnitFactorRate">
								<cbc:OrderableUnitFactorRate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cbc:OrderableUnitFactorRate>
							</xsl:for-each>
							<xsl:for-each select="cac:ValidityPeriod">
								<cac:ValidityPeriod>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:ValidityPeriod>
							</xsl:for-each>
							<xsl:for-each select="cac:PriceList">
								<cac:PriceList>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PriceList>
							</xsl:for-each>
							<xsl:for-each select="cac:AllowanceCharge">
								<xsl:variable name="var356_Amount" as="node()" select="cbc:Amount"/>
								<cac:AllowanceCharge>
									<xsl:for-each select="cbc:ID">
										<cbc:ID>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:ID>
									</xsl:for-each>
									<cbc:ChargeIndicator>
										<xsl:sequence select="xs:string(xs:boolean(fn:string(cbc:ChargeIndicator)))"/>
									</cbc:ChargeIndicator>
									<xsl:for-each select="cbc:AllowanceChargeReasonCode">
										<cbc:AllowanceChargeReasonCode>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AllowanceChargeReasonCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AllowanceChargeReason">
										<cbc:AllowanceChargeReason>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:AllowanceChargeReason>
									</xsl:for-each>
									<xsl:for-each select="cbc:MultiplierFactorNumeric">
										<cbc:MultiplierFactorNumeric>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:MultiplierFactorNumeric>
									</xsl:for-each>
									<xsl:for-each select="cbc:PrepaidIndicator">
										<cbc:PrepaidIndicator>
											<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
										</cbc:PrepaidIndicator>
									</xsl:for-each>
									<xsl:for-each select="cbc:SequenceNumeric">
										<cbc:SequenceNumeric>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cbc:SequenceNumeric>
									</xsl:for-each>
									<cbc:Amount>
										<xsl:sequence select="($var356_Amount/@node(), $var356_Amount/node())"/>
									</cbc:Amount>
									<xsl:for-each select="(./cbc:BaseAmount)[(xs:decimal(fn:string(.)) = (xs:decimal(fn:string($var357_PriceAmount)) + xs:decimal(fn:string($var356_Amount))))]">
										<cbc:BaseAmount>
											<xsl:for-each select="@currencyCodeListVersionID">
												<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
											<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
										</cbc:BaseAmount>
									</xsl:for-each>
									<xsl:for-each select="cbc:AccountingCostCode">
										<cbc:AccountingCostCode>
											<xsl:for-each select="@listID">
												<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listAgencyID">
												<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listAgencyName">
												<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listName">
												<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listVersionID">
												<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@name">
												<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@languageID">
												<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@listURI">
												<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:for-each select="@listSchemeURI">
												<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:AccountingCostCode>
									</xsl:for-each>
									<xsl:for-each select="cbc:AccountingCost">
										<cbc:AccountingCost>
											<xsl:for-each select="@languageID">
												<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@languageLocaleID">
												<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:sequence select="fn:string(.)"/>
										</cbc:AccountingCost>
									</xsl:for-each>
									<xsl:for-each select="cbc:PerUnitAmount">
										<cbc:PerUnitAmount>
											<xsl:for-each select="@currencyCodeListVersionID">
												<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
											<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
										</cbc:PerUnitAmount>
									</xsl:for-each>
									<xsl:for-each select="cac:TaxCategory">
										<cac:TaxCategory>
											<xsl:for-each select="cbc:ID">
												<cbc:ID>
													<xsl:for-each select="@schemeID">
														<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@schemeName">
														<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@schemeAgencyID">
														<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@schemeAgencyName">
														<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@schemeVersionID">
														<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@schemeDataURI">
														<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:for-each select="@schemeURI">
														<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:ID>
											</xsl:for-each>
											<xsl:for-each select="cbc:Name">
												<cbc:Name>
													<xsl:for-each select="@languageID">
														<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@languageLocaleID">
														<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:Name>
											</xsl:for-each>
											<xsl:for-each select="cbc:Percent">
												<cbc:Percent>
													<xsl:for-each select="@format">
														<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
												</cbc:Percent>
											</xsl:for-each>
											<xsl:for-each select="cbc:BaseUnitMeasure">
												<cbc:BaseUnitMeasure>
													<xsl:for-each select="@unitCodeListVersionID">
														<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
													<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
												</cbc:BaseUnitMeasure>
											</xsl:for-each>
											<xsl:for-each select="cbc:PerUnitAmount">
												<cbc:PerUnitAmount>
													<xsl:for-each select="@currencyCodeListVersionID">
														<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
													<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
												</cbc:PerUnitAmount>
											</xsl:for-each>
											<xsl:for-each select="cbc:TaxExemptionReasonCode">
												<cbc:TaxExemptionReasonCode>
													<xsl:for-each select="@listID">
														<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listAgencyID">
														<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listAgencyName">
														<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listName">
														<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listVersionID">
														<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@languageID">
														<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@listURI">
														<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:for-each select="@listSchemeURI">
														<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:TaxExemptionReasonCode>
											</xsl:for-each>
											<xsl:for-each select="cbc:TaxExemptionReason">
												<cbc:TaxExemptionReason>
													<xsl:for-each select="@languageID">
														<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@languageLocaleID">
														<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:TaxExemptionReason>
											</xsl:for-each>
											<xsl:for-each select="cbc:TierRange">
												<cbc:TierRange>
													<xsl:for-each select="@languageID">
														<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@languageLocaleID">
														<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:sequence select="fn:string(.)"/>
												</cbc:TierRange>
											</xsl:for-each>
											<xsl:for-each select="cbc:TierRatePercent">
												<cbc:TierRatePercent>
													<xsl:for-each select="@format">
														<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
												</cbc:TierRatePercent>
											</xsl:for-each>
											<xsl:variable name="var350_TaxScheme" as="node()" select="cac:TaxScheme"/>
											<cac:TaxScheme>
												<xsl:for-each select="$var350_TaxScheme/cbc:ID">
													<cbc:ID>
														<xsl:for-each select="@schemeID">
															<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@schemeName">
															<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@schemeAgencyID">
															<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@schemeAgencyName">
															<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@schemeVersionID">
															<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@schemeDataURI">
															<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="@schemeURI">
															<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:ID>
												</xsl:for-each>
												<xsl:for-each select="$var350_TaxScheme/cbc:Name">
													<cbc:Name>
														<xsl:for-each select="@languageID">
															<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@languageLocaleID">
															<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:Name>
												</xsl:for-each>
												<xsl:for-each select="$var350_TaxScheme/cbc:TaxTypeCode">
													<cbc:TaxTypeCode>
														<xsl:for-each select="@listID">
															<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listAgencyID">
															<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listAgencyName">
															<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listName">
															<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listVersionID">
															<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@name">
															<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@languageID">
															<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listURI">
															<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="@listSchemeURI">
															<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:TaxTypeCode>
												</xsl:for-each>
												<xsl:for-each select="$var350_TaxScheme/cbc:CurrencyCode">
													<cbc:CurrencyCode>
														<xsl:for-each select="@listID">
															<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listAgencyID">
															<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listAgencyName">
															<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listName">
															<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listVersionID">
															<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@name">
															<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@languageID">
															<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@listURI">
															<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="@listSchemeURI">
															<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:sequence select="fn:string(.)"/>
													</cbc:CurrencyCode>
												</xsl:for-each>
												<xsl:for-each select="$var350_TaxScheme/cac:JurisdictionRegionAddress">
													<cac:JurisdictionRegionAddress>
														<xsl:for-each select="cbc:ID">
															<cbc:ID>
																<xsl:for-each select="@schemeID">
																	<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeName">
																	<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeAgencyID">
																	<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeAgencyName">
																	<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeVersionID">
																	<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeDataURI">
																	<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeURI">
																	<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:ID>
														</xsl:for-each>
														<xsl:for-each select="cbc:AddressTypeCode">
															<cbc:AddressTypeCode>
																<xsl:for-each select="@listID">
																	<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyID">
																	<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyName">
																	<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listName">
																	<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listVersionID">
																	<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listURI">
																	<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="@listSchemeURI">
																	<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:AddressTypeCode>
														</xsl:for-each>
														<xsl:for-each select="cbc:AddressFormatCode">
															<cbc:AddressFormatCode>
																<xsl:for-each select="@listID">
																	<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyID">
																	<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyName">
																	<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listName">
																	<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listVersionID">
																	<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listURI">
																	<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="@listSchemeURI">
																	<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:AddressFormatCode>
														</xsl:for-each>
														<xsl:for-each select="cbc:Postbox">
															<cbc:Postbox>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:Postbox>
														</xsl:for-each>
														<xsl:for-each select="cbc:Floor">
															<cbc:Floor>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:Floor>
														</xsl:for-each>
														<xsl:for-each select="cbc:Room">
															<cbc:Room>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:Room>
														</xsl:for-each>
														<xsl:for-each select="cbc:StreetName">
															<cbc:StreetName>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:StreetName>
														</xsl:for-each>
														<xsl:for-each select="cbc:AdditionalStreetName">
															<cbc:AdditionalStreetName>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:AdditionalStreetName>
														</xsl:for-each>
														<xsl:for-each select="cbc:BlockName">
															<cbc:BlockName>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:BlockName>
														</xsl:for-each>
														<xsl:for-each select="cbc:BuildingName">
															<cbc:BuildingName>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:BuildingName>
														</xsl:for-each>
														<xsl:for-each select="cbc:BuildingNumber">
															<cbc:BuildingNumber>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:BuildingNumber>
														</xsl:for-each>
														<xsl:for-each select="cbc:InhouseMail">
															<cbc:InhouseMail>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:InhouseMail>
														</xsl:for-each>
														<xsl:for-each select="cbc:Department">
															<cbc:Department>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:Department>
														</xsl:for-each>
														<xsl:for-each select="cbc:MarkAttention">
															<cbc:MarkAttention>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:MarkAttention>
														</xsl:for-each>
														<xsl:for-each select="cbc:MarkCare">
															<cbc:MarkCare>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:MarkCare>
														</xsl:for-each>
														<xsl:for-each select="cbc:PlotIdentification">
															<cbc:PlotIdentification>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:PlotIdentification>
														</xsl:for-each>
														<xsl:for-each select="cbc:CitySubdivisionName">
															<cbc:CitySubdivisionName>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:CitySubdivisionName>
														</xsl:for-each>
														<xsl:for-each select="cbc:CityName">
															<cbc:CityName>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:CityName>
														</xsl:for-each>
														<xsl:for-each select="cbc:PostalZone">
															<cbc:PostalZone>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:PostalZone>
														</xsl:for-each>
														<xsl:for-each select="cbc:CountrySubentity">
															<cbc:CountrySubentity>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:CountrySubentity>
														</xsl:for-each>
														<xsl:for-each select="cbc:CountrySubentityCode">
															<cbc:CountrySubentityCode>
																<xsl:for-each select="@listID">
																	<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyID">
																	<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyName">
																	<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listName">
																	<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listVersionID">
																	<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listURI">
																	<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="@listSchemeURI">
																	<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:CountrySubentityCode>
														</xsl:for-each>
														<xsl:for-each select="cbc:Region">
															<cbc:Region>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:Region>
														</xsl:for-each>
														<xsl:for-each select="cbc:District">
															<cbc:District>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:District>
														</xsl:for-each>
														<xsl:for-each select="cbc:TimezoneOffset">
															<cbc:TimezoneOffset>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:TimezoneOffset>
														</xsl:for-each>
														<xsl:for-each select="cac:AddressLine">
															<xsl:variable name="var349_Line" as="node()" select="cbc:Line"/>
															<cac:AddressLine>
																<cbc:Line>
																	<xsl:for-each select="$var349_Line/@languageID">
																		<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="$var349_Line/@languageLocaleID">
																		<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:sequence select="fn:string($var349_Line)"/>
																</cbc:Line>
															</cac:AddressLine>
														</xsl:for-each>
														<xsl:for-each select="cac:Country">
															<cac:Country>
																<xsl:for-each select="cbc:IdentificationCode">
																	<cbc:IdentificationCode>
																		<xsl:for-each select="@listID">
																			<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyID">
																			<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyName">
																			<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listName">
																			<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listVersionID">
																			<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@name">
																			<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@languageID">
																			<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listURI">
																			<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listSchemeURI">
																			<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:sequence select="fn:string(.)"/>
																	</cbc:IdentificationCode>
																</xsl:for-each>
																<xsl:for-each select="cbc:Name">
																	<cbc:Name>
																		<xsl:for-each select="@languageID">
																			<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@languageLocaleID">
																			<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:sequence select="fn:string(.)"/>
																	</cbc:Name>
																</xsl:for-each>
															</cac:Country>
														</xsl:for-each>
														<xsl:for-each select="cac:LocationCoordinate">
															<cac:LocationCoordinate>
																<xsl:for-each select="cbc:CoordinateSystemCode">
																	<cbc:CoordinateSystemCode>
																		<xsl:for-each select="@listID">
																			<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyID">
																			<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyName">
																			<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listName">
																			<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listVersionID">
																			<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@name">
																			<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@languageID">
																			<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listURI">
																			<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listSchemeURI">
																			<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:sequence select="fn:string(.)"/>
																	</cbc:CoordinateSystemCode>
																</xsl:for-each>
																<xsl:for-each select="cbc:LatitudeDegreesMeasure">
																	<cbc:LatitudeDegreesMeasure>
																		<xsl:for-each select="@unitCodeListVersionID">
																			<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																		<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																	</cbc:LatitudeDegreesMeasure>
																</xsl:for-each>
																<xsl:for-each select="cbc:LatitudeMinutesMeasure">
																	<cbc:LatitudeMinutesMeasure>
																		<xsl:for-each select="@unitCodeListVersionID">
																			<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																		<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																	</cbc:LatitudeMinutesMeasure>
																</xsl:for-each>
																<xsl:for-each select="cbc:LatitudeDirectionCode">
																	<cbc:LatitudeDirectionCode>
																		<xsl:for-each select="@listID">
																			<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyID">
																			<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyName">
																			<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listName">
																			<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listVersionID">
																			<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@name">
																			<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@languageID">
																			<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listURI">
																			<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listSchemeURI">
																			<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:sequence select="fn:string(.)"/>
																	</cbc:LatitudeDirectionCode>
																</xsl:for-each>
																<xsl:for-each select="cbc:LongitudeDegreesMeasure">
																	<cbc:LongitudeDegreesMeasure>
																		<xsl:for-each select="@unitCodeListVersionID">
																			<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																		<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																	</cbc:LongitudeDegreesMeasure>
																</xsl:for-each>
																<xsl:for-each select="cbc:LongitudeMinutesMeasure">
																	<cbc:LongitudeMinutesMeasure>
																		<xsl:for-each select="@unitCodeListVersionID">
																			<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																		<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																	</cbc:LongitudeMinutesMeasure>
																</xsl:for-each>
																<xsl:for-each select="cbc:LongitudeDirectionCode">
																	<cbc:LongitudeDirectionCode>
																		<xsl:for-each select="@listID">
																			<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyID">
																			<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listAgencyName">
																			<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listName">
																			<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listVersionID">
																			<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@name">
																			<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@languageID">
																			<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listURI">
																			<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:for-each select="@listSchemeURI">
																			<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:sequence select="fn:string(.)"/>
																	</cbc:LongitudeDirectionCode>
																</xsl:for-each>
																<xsl:for-each select="cbc:AltitudeMeasure">
																	<cbc:AltitudeMeasure>
																		<xsl:for-each select="@unitCodeListVersionID">
																			<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																		<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																	</cbc:AltitudeMeasure>
																</xsl:for-each>
															</cac:LocationCoordinate>
														</xsl:for-each>
													</cac:JurisdictionRegionAddress>
												</xsl:for-each>
											</cac:TaxScheme>
										</cac:TaxCategory>
									</xsl:for-each>
									<xsl:for-each select="cac:TaxTotal">
										<cac:TaxTotal>
											<xsl:variable name="var351_TaxAmount" as="node()" select="cbc:TaxAmount"/>
											<cbc:TaxAmount>
												<xsl:for-each select="$var351_TaxAmount/@currencyCodeListVersionID">
													<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:attribute name="currencyID" namespace="" select="fn:string($var351_TaxAmount/@currencyID)"/>
												<xsl:sequence select="xs:string(xs:decimal(fn:string($var351_TaxAmount)))"/>
											</cbc:TaxAmount>
											<xsl:for-each select="cbc:RoundingAmount">
												<cbc:RoundingAmount>
													<xsl:for-each select="@currencyCodeListVersionID">
														<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
													<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
												</cbc:RoundingAmount>
											</xsl:for-each>
											<xsl:for-each select="cbc:TaxEvidenceIndicator">
												<cbc:TaxEvidenceIndicator>
													<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
												</cbc:TaxEvidenceIndicator>
											</xsl:for-each>
											<xsl:for-each select="cbc:TaxIncludedIndicator">
												<cbc:TaxIncludedIndicator>
													<xsl:sequence select="xs:string(xs:boolean(fn:string(.)))"/>
												</cbc:TaxIncludedIndicator>
											</xsl:for-each>
											<xsl:for-each select="cac:TaxSubtotal">
												<cac:TaxSubtotal>
													<xsl:for-each select="cbc:TaxableAmount">
														<cbc:TaxableAmount>
															<xsl:for-each select="@currencyCodeListVersionID">
																<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:TaxableAmount>
													</xsl:for-each>
													<xsl:variable name="var352_TaxAmount" as="node()" select="cbc:TaxAmount"/>
													<cbc:TaxAmount>
														<xsl:for-each select="$var352_TaxAmount/@currencyCodeListVersionID">
															<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:attribute name="currencyID" namespace="" select="fn:string($var352_TaxAmount/@currencyID)"/>
														<xsl:sequence select="xs:string(xs:decimal(fn:string($var352_TaxAmount)))"/>
													</cbc:TaxAmount>
													<xsl:for-each select="cbc:CalculationSequenceNumeric">
														<cbc:CalculationSequenceNumeric>
															<xsl:for-each select="@format">
																<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:CalculationSequenceNumeric>
													</xsl:for-each>
													<xsl:for-each select="cbc:TransactionCurrencyTaxAmount">
														<cbc:TransactionCurrencyTaxAmount>
															<xsl:for-each select="@currencyCodeListVersionID">
																<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:TransactionCurrencyTaxAmount>
													</xsl:for-each>
													<xsl:for-each select="cbc:Percent">
														<cbc:Percent>
															<xsl:for-each select="@format">
																<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:Percent>
													</xsl:for-each>
													<xsl:for-each select="cbc:BaseUnitMeasure">
														<cbc:BaseUnitMeasure>
															<xsl:for-each select="@unitCodeListVersionID">
																<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:BaseUnitMeasure>
													</xsl:for-each>
													<xsl:for-each select="cbc:PerUnitAmount">
														<cbc:PerUnitAmount>
															<xsl:for-each select="@currencyCodeListVersionID">
																<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:PerUnitAmount>
													</xsl:for-each>
													<xsl:for-each select="cbc:TierRange">
														<cbc:TierRange>
															<xsl:for-each select="@languageID">
																<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:for-each select="@languageLocaleID">
																<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:sequence select="fn:string(.)"/>
														</cbc:TierRange>
													</xsl:for-each>
													<xsl:for-each select="cbc:TierRatePercent">
														<cbc:TierRatePercent>
															<xsl:for-each select="@format">
																<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
														</cbc:TierRatePercent>
													</xsl:for-each>
													<xsl:variable name="var355_TaxCategory" as="node()" select="cac:TaxCategory"/>
													<cac:TaxCategory>
														<xsl:for-each select="$var355_TaxCategory/cbc:ID">
															<cbc:ID>
																<xsl:for-each select="@schemeID">
																	<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeName">
																	<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeAgencyID">
																	<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeAgencyName">
																	<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeVersionID">
																	<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeDataURI">
																	<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="@schemeURI">
																	<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:ID>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:Name">
															<cbc:Name>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:Name>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:Percent">
															<cbc:Percent>
																<xsl:for-each select="@format">
																	<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
															</cbc:Percent>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:BaseUnitMeasure">
															<cbc:BaseUnitMeasure>
																<xsl:for-each select="@unitCodeListVersionID">
																	<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
															</cbc:BaseUnitMeasure>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:PerUnitAmount">
															<cbc:PerUnitAmount>
																<xsl:for-each select="@currencyCodeListVersionID">
																	<xsl:attribute name="currencyCodeListVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:attribute name="currencyID" namespace="" select="fn:string(@currencyID)"/>
																<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
															</cbc:PerUnitAmount>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:TaxExemptionReasonCode">
															<cbc:TaxExemptionReasonCode>
																<xsl:for-each select="@listID">
																	<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyID">
																	<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listAgencyName">
																	<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listName">
																	<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listVersionID">
																	<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@listURI">
																	<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="@listSchemeURI">
																	<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:TaxExemptionReasonCode>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:TaxExemptionReason">
															<cbc:TaxExemptionReason>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:TaxExemptionReason>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:TierRange">
															<cbc:TierRange>
																<xsl:for-each select="@languageID">
																	<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@languageLocaleID">
																	<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="fn:string(.)"/>
															</cbc:TierRange>
														</xsl:for-each>
														<xsl:for-each select="$var355_TaxCategory/cbc:TierRatePercent">
															<cbc:TierRatePercent>
																<xsl:for-each select="@format">
																	<xsl:attribute name="format" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
															</cbc:TierRatePercent>
														</xsl:for-each>
														<xsl:variable name="var354_TaxScheme" as="node()" select="$var355_TaxCategory/cac:TaxScheme"/>
														<cac:TaxScheme>
															<xsl:for-each select="$var354_TaxScheme/cbc:ID">
																<cbc:ID>
																	<xsl:for-each select="@schemeID">
																		<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@schemeName">
																		<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@schemeAgencyID">
																		<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@schemeAgencyName">
																		<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@schemeVersionID">
																		<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@schemeDataURI">
																		<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:for-each select="@schemeURI">
																		<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:sequence select="fn:string(.)"/>
																</cbc:ID>
															</xsl:for-each>
															<xsl:for-each select="$var354_TaxScheme/cbc:Name">
																<cbc:Name>
																	<xsl:for-each select="@languageID">
																		<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@languageLocaleID">
																		<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:sequence select="fn:string(.)"/>
																</cbc:Name>
															</xsl:for-each>
															<xsl:for-each select="$var354_TaxScheme/cbc:TaxTypeCode">
																<cbc:TaxTypeCode>
																	<xsl:for-each select="@listID">
																		<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listAgencyID">
																		<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listAgencyName">
																		<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listName">
																		<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listVersionID">
																		<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@name">
																		<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@languageID">
																		<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listURI">
																		<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listSchemeURI">
																		<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:sequence select="fn:string(.)"/>
																</cbc:TaxTypeCode>
															</xsl:for-each>
															<xsl:for-each select="$var354_TaxScheme/cbc:CurrencyCode">
																<cbc:CurrencyCode>
																	<xsl:for-each select="@listID">
																		<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listAgencyID">
																		<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listAgencyName">
																		<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listName">
																		<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listVersionID">
																		<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@name">
																		<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@languageID">
																		<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listURI">
																		<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:for-each select="@listSchemeURI">
																		<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:sequence select="fn:string(.)"/>
																</cbc:CurrencyCode>
															</xsl:for-each>
															<xsl:for-each select="$var354_TaxScheme/cac:JurisdictionRegionAddress">
																<cac:JurisdictionRegionAddress>
																	<xsl:for-each select="cbc:ID">
																		<cbc:ID>
																			<xsl:for-each select="@schemeID">
																				<xsl:attribute name="schemeID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@schemeName">
																				<xsl:attribute name="schemeName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@schemeAgencyID">
																				<xsl:attribute name="schemeAgencyID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@schemeAgencyName">
																				<xsl:attribute name="schemeAgencyName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@schemeVersionID">
																				<xsl:attribute name="schemeVersionID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@schemeDataURI">
																				<xsl:attribute name="schemeDataURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:for-each select="@schemeURI">
																				<xsl:attribute name="schemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:ID>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:AddressTypeCode">
																		<cbc:AddressTypeCode>
																			<xsl:for-each select="@listID">
																				<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listAgencyID">
																				<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listAgencyName">
																				<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listName">
																				<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listVersionID">
																				<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listURI">
																				<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listSchemeURI">
																				<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:AddressTypeCode>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:AddressFormatCode">
																		<cbc:AddressFormatCode>
																			<xsl:for-each select="@listID">
																				<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listAgencyID">
																				<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listAgencyName">
																				<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listName">
																				<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listVersionID">
																				<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listURI">
																				<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listSchemeURI">
																				<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:AddressFormatCode>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:Postbox">
																		<cbc:Postbox>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:Postbox>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:Floor">
																		<cbc:Floor>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:Floor>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:Room">
																		<cbc:Room>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:Room>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:StreetName">
																		<cbc:StreetName>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:StreetName>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:AdditionalStreetName">
																		<cbc:AdditionalStreetName>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:AdditionalStreetName>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:BlockName">
																		<cbc:BlockName>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:BlockName>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:BuildingName">
																		<cbc:BuildingName>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:BuildingName>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:BuildingNumber">
																		<cbc:BuildingNumber>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:BuildingNumber>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:InhouseMail">
																		<cbc:InhouseMail>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:InhouseMail>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:Department">
																		<cbc:Department>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:Department>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:MarkAttention">
																		<cbc:MarkAttention>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:MarkAttention>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:MarkCare">
																		<cbc:MarkCare>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:MarkCare>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:PlotIdentification">
																		<cbc:PlotIdentification>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:PlotIdentification>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:CitySubdivisionName">
																		<cbc:CitySubdivisionName>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:CitySubdivisionName>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:CityName">
																		<cbc:CityName>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:CityName>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:PostalZone">
																		<cbc:PostalZone>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:PostalZone>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:CountrySubentity">
																		<cbc:CountrySubentity>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:CountrySubentity>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:CountrySubentityCode">
																		<cbc:CountrySubentityCode>
																			<xsl:for-each select="@listID">
																				<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listAgencyID">
																				<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listAgencyName">
																				<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listName">
																				<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listVersionID">
																				<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listURI">
																				<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:for-each select="@listSchemeURI">
																				<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:CountrySubentityCode>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:Region">
																		<cbc:Region>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:Region>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:District">
																		<cbc:District>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:District>
																	</xsl:for-each>
																	<xsl:for-each select="cbc:TimezoneOffset">
																		<cbc:TimezoneOffset>
																			<xsl:for-each select="@languageID">
																				<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@languageLocaleID">
																				<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:sequence select="fn:string(.)"/>
																		</cbc:TimezoneOffset>
																	</xsl:for-each>
																	<xsl:for-each select="cac:AddressLine">
																		<xsl:variable name="var353_Line" as="node()" select="cbc:Line"/>
																		<cac:AddressLine>
																			<cbc:Line>
																				<xsl:for-each select="$var353_Line/@languageID">
																					<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="$var353_Line/@languageLocaleID">
																					<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:sequence select="fn:string($var353_Line)"/>
																			</cbc:Line>
																		</cac:AddressLine>
																	</xsl:for-each>
																	<xsl:for-each select="cac:Country">
																		<cac:Country>
																			<xsl:for-each select="cbc:IdentificationCode">
																				<cbc:IdentificationCode>
																					<xsl:for-each select="@listID">
																						<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyID">
																						<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyName">
																						<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listName">
																						<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listVersionID">
																						<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@name">
																						<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@languageID">
																						<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listURI">
																						<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listSchemeURI">
																						<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:sequence select="fn:string(.)"/>
																				</cbc:IdentificationCode>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:Name">
																				<cbc:Name>
																					<xsl:for-each select="@languageID">
																						<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@languageLocaleID">
																						<xsl:attribute name="languageLocaleID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:sequence select="fn:string(.)"/>
																				</cbc:Name>
																			</xsl:for-each>
																		</cac:Country>
																	</xsl:for-each>
																	<xsl:for-each select="cac:LocationCoordinate">
																		<cac:LocationCoordinate>
																			<xsl:for-each select="cbc:CoordinateSystemCode">
																				<cbc:CoordinateSystemCode>
																					<xsl:for-each select="@listID">
																						<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyID">
																						<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyName">
																						<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listName">
																						<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listVersionID">
																						<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@name">
																						<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@languageID">
																						<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listURI">
																						<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listSchemeURI">
																						<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:sequence select="fn:string(.)"/>
																				</cbc:CoordinateSystemCode>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:LatitudeDegreesMeasure">
																				<cbc:LatitudeDegreesMeasure>
																					<xsl:for-each select="@unitCodeListVersionID">
																						<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																					<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																				</cbc:LatitudeDegreesMeasure>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:LatitudeMinutesMeasure">
																				<cbc:LatitudeMinutesMeasure>
																					<xsl:for-each select="@unitCodeListVersionID">
																						<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																					<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																				</cbc:LatitudeMinutesMeasure>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:LatitudeDirectionCode">
																				<cbc:LatitudeDirectionCode>
																					<xsl:for-each select="@listID">
																						<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyID">
																						<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyName">
																						<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listName">
																						<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listVersionID">
																						<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@name">
																						<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@languageID">
																						<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listURI">
																						<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listSchemeURI">
																						<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:sequence select="fn:string(.)"/>
																				</cbc:LatitudeDirectionCode>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:LongitudeDegreesMeasure">
																				<cbc:LongitudeDegreesMeasure>
																					<xsl:for-each select="@unitCodeListVersionID">
																						<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																					<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																				</cbc:LongitudeDegreesMeasure>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:LongitudeMinutesMeasure">
																				<cbc:LongitudeMinutesMeasure>
																					<xsl:for-each select="@unitCodeListVersionID">
																						<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																					<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																				</cbc:LongitudeMinutesMeasure>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:LongitudeDirectionCode">
																				<cbc:LongitudeDirectionCode>
																					<xsl:for-each select="@listID">
																						<xsl:attribute name="listID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyID">
																						<xsl:attribute name="listAgencyID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listAgencyName">
																						<xsl:attribute name="listAgencyName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listName">
																						<xsl:attribute name="listName" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listVersionID">
																						<xsl:attribute name="listVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@name">
																						<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@languageID">
																						<xsl:attribute name="languageID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listURI">
																						<xsl:attribute name="listURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:for-each select="@listSchemeURI">
																						<xsl:attribute name="listSchemeURI" namespace="" select="xs:string(xs:anyURI(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:sequence select="fn:string(.)"/>
																				</cbc:LongitudeDirectionCode>
																			</xsl:for-each>
																			<xsl:for-each select="cbc:AltitudeMeasure">
																				<cbc:AltitudeMeasure>
																					<xsl:for-each select="@unitCodeListVersionID">
																						<xsl:attribute name="unitCodeListVersionID" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:attribute name="unitCode" namespace="" select="fn:string(@unitCode)"/>
																					<xsl:sequence select="xs:string(xs:decimal(fn:string(.)))"/>
																				</cbc:AltitudeMeasure>
																			</xsl:for-each>
																		</cac:LocationCoordinate>
																	</xsl:for-each>
																</cac:JurisdictionRegionAddress>
															</xsl:for-each>
														</cac:TaxScheme>
													</cac:TaxCategory>
												</cac:TaxSubtotal>
											</xsl:for-each>
										</cac:TaxTotal>
									</xsl:for-each>
									<xsl:for-each select="cac:PaymentMeans">
										<cac:PaymentMeans>
											<xsl:sequence select="(./@node(), ./node())"/>
										</cac:PaymentMeans>
									</xsl:for-each>
								</cac:AllowanceCharge>
							</xsl:for-each>
							<xsl:for-each select="cac:PricingExchangeRate">
								<cac:PricingExchangeRate>
									<xsl:sequence select="(./@node(), ./node())"/>
								</cac:PricingExchangeRate>
							</xsl:for-each>
						</cac:Price>
					</xsl:for-each>
				</cac:InvoiceLine>
			</xsl:for-each>
		</Invoice>
	</xsl:template>
</xsl:stylesheet>
